<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Complete Think</title>
  
  <subtitle>Thinking, Coding, and Learning.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rickhw.github.io/"/>
  <updated>2018-12-16T03:23:36.608Z</updated>
  <id>http://rickhw.github.io/</id>
  
  <author>
    <name>Rick Hwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>需要專職的 Release Engineer？</title>
    <link href="http://rickhw.github.io/2018/12/16/DevOps/Hire-a-Release-Engineer/"/>
    <id>http://rickhw.github.io/2018/12/16/DevOps/Hire-a-Release-Engineer/</id>
    <published>2018-12-16T04:43:00.000Z</published>
    <updated>2018-12-16T03:23:36.608Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理 SRE 讀書會 Round 2 的討論與筆記。問題是：</p><blockquote><p>團隊 Release 的角色是否應該專職？<br>(不管是叫 DevOps Engineer or Release Engineer)</p></blockquote><p>那天 (2018/09/13) 討論的章節是 <code>第7章 提交階段</code>，我在回程公車上寫下這段 <a href="https://www.facebook.com/rick.kyhwang/posts/10209921505113654" target="_blank" rel="noopener">筆記</a>，重新整理成文章，也補充一些想法。</p><p>我從以下幾個面向分析：</p><ul><li>企業階段</li><li>架構與組織</li><li>產品特性</li></ul><a id="more"></a><hr><h2 id="企業階段"><a href="#企業階段" class="headerlink" title="企業階段"></a>企業階段</h2><p>這問題討論到最後一定分成兩種：</p><ul><li><code>不該專職</code>：團隊成員輪著做，不應該專職 (偏向 Agile 的概念)</li><li><code>應該專職</code>：技術 know how 很深，應該專人專職 (偏向傳統、大型組織)</li></ul><p>我想想都對、也都不對，因為這兩個都沒有提到 <code>前提條件與背景</code>，這樣的討論不會有結論。整理前提與背景的組合如下：</p><ol><li>SOP 未確立之前：工具、流程、架構還在混沌狀態<ul><li>一定是專人專職，因為狀況很複雜，流程一直在變，必須用技術來駕馭、控制整個過程。</li><li>這個人對整理狀況有一定掌握度，有一定的技術能力</li><li>通常是新創事業，要即戰力，每個人都是各個領域的專家、高手</li><li>萬事起頭難，需要有經驗的人開始</li></ul></li><li>SOP 很清楚：工具、流程、架構都清楚了<ul><li>誰來點都可以，反正要做的就是那些 A,B,C,….</li><li>只要能夠透過標準化的流程，透過一段時間訓練就可以上手的。</li><li>這表示已經經過時間考驗的結果，經過 (1 焠鍊後的結果。</li></ul></li></ol><p>所以表示 2) 要先有 1) 的結果與歷練，才有辦法在不影響任務的前提下 <code>輪著做</code>。</p><blockquote><p>再說一次：不影響任務的前提！如果會影響任務，那這件事情會造成的現象稱為：<code>壓力</code></p></blockquote><hr><h2 id="架構與組織"><a href="#架構與組織" class="headerlink" title="架構與組織"></a>架構與組織</h2><p>用架構與組織當作兩個維度，結果都是清楚與不清楚。</p><ul><li><code>架構</code>：指的是系統架構的清晰度，包含邊界、依賴性、耦合度等面向。</li><li><code>組織</code>：組織的拆分，人員的專業、團隊的職責，簡單說就是 <a href="/2018/06/13/Management/Role-And-Responsibility/">R&amp;R</a></li></ul><p>這兩個面向，用清楚與不清楚分，所以有四種排列組合：</p><ol><li>架構不清楚、組織不清楚：找技術高手和顧問來幫忙。</li><li>架構不清楚、組織清楚：找技術高手來幫忙。</li><li>架構清楚、組織不清楚：找顧問來協助</li><li>架構清楚、組織清楚：直接往下一個階段走，讓團隊自行發揮</li></ol><p>組織結構與架構無法清楚的時候，造成的問題是：內部空轉以及溝通成本。</p><hr><h2 id="產品特性"><a href="#產品特性" class="headerlink" title="產品特性"></a>產品特性</h2><p>除了 SOP，另外要提的是產品特性的 <code>範圍</code>：</p><ol><li>小範圍：互聯網的軟體，Startup 的核心團隊，或者 Microservice 的 2pizza team，這種一定是大家都要能相互 cover</li><li>大範圍：大型產品（作業系統、火箭、汽車），組織很龐大的 team，例如 M$ 的 Windows Team or Nasa 火箭發射… 這種的團隊一定是專職專人</li></ol><p>現在的 CI/CD 工具鍊複雜度以及觀念，甚至是架構，跟十年前比起來其實差不多。但是擴散的面積已經跟以前不一樣，以前可能只有部分人有辦法看到全貌，現在是大家都可以看到全貌。</p><p>但是問題就在於：</p><blockquote><p>看到全貌 != #可以駕馭全貌</p></blockquote><p>這是兩回事。</p><ul><li><code>駕馭</code>：需要一定的技術能力、專業與經驗</li><li><code>了解全貌</code>：需要組織能力、視野、判斷力、決策力，甚至是策略與戰略</li></ul><h2 id="問題的維度"><a href="#問題的維度" class="headerlink" title="問題的維度"></a>問題的維度</h2><p>我觀察到問題的維度有以下：</p><ul><li>(A) <code>看到全貌</code>：能否看見全貌，分成系統架構、組織架構</li><li>(B) <code>駕馭技術</code>：技術成熟度，包含 CI/CD 工具駕馭、容器化等</li></ul><p>這兩個變因的四種排列組合：</p><ol><li><code>00</code>: 看不到全貌，也無法駕馭技術。放低身段，快點找專家顧問來幫忙。</li><li><code>10</code>: 能看到全貌，卻無法駕馭技術，那就像在玩遙控車：要趕快找高手進來，我們要玩真的。</li><li><code>01</code>: 看不到全貌，可以駕馭技術，跟酒駕沒兩樣，狂踩煞車，卻不知為何而戰。快點找 DevOps 顧問或架構師幫忙。</li><li><code>11</code>: 能看到全貌、能駕馭技術。剩下的問題是：如何讓團隊成員都可以做這件事情。</li></ol><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>回到開頭的是否需要專職的 DevOps Engineer or Release Engineer？<br>你現在有答案了？</p><hr><h1 id="相關文章-站內"><a href="#相關文章-站內" class="headerlink" title="相關文章 (站內)"></a>相關文章 (站內)</h1><ul><li><a href="/2018/03/20/DevOps/First-Step-To-CICD/">導入 CI/CD 的第一步</a></li><li><a href="/2018/04/01/DevOps/How-To-Make-CICD-Quality/">怎樣的 CI/CD 才夠 Quality?</a></li><li><a href="/2017/02/11/AWS/Resource-Provisioning-and-DevOps/">Resource Provisioning and DevOps</a></li><li><a href="/2017/12/21/DevOps/What-is-Automation/">What is Automation?</a></li><li><a href="/2018/06/13/Management/Role-And-Responsibility/">Role And Responsibility</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整理 SRE 讀書會 Round 2 的討論與筆記。問題是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;團隊 Release 的角色是否應該專職？&lt;br&gt;(不管是叫 DevOps Engineer or Release Engineer)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那天 (2018/09/13) 討論的章節是 &lt;code&gt;第7章 提交階段&lt;/code&gt;，我在回程公車上寫下這段 &lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/10209921505113654&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;筆記&lt;/a&gt;，重新整理成文章，也補充一些想法。&lt;/p&gt;
&lt;p&gt;我從以下幾個面向分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企業階段&lt;/li&gt;
&lt;li&gt;架構與組織&lt;/li&gt;
&lt;li&gt;產品特性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="Continuous Delivery" scheme="http://rickhw.github.io/tags/Continuous-Delivery/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Continuous Integration" scheme="http://rickhw.github.io/tags/Continuous-Integration/"/>
    
      <category term="Build" scheme="http://rickhw.github.io/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>DevOps 8 字環的誤區：左環問題</title>
    <link href="http://rickhw.github.io/2018/12/15/DevOps/TheProblem-In-DevOps-8-Cycle/"/>
    <id>http://rickhw.github.io/2018/12/15/DevOps/TheProblem-In-DevOps-8-Cycle/</id>
    <published>2018-12-15T15:43:00.000Z</published>
    <updated>2018-12-15T07:32:11.980Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理 2018/12/07 我寫的一篇論述：DevOps 8 字環的誤區。</p><a id="more"></a><hr><h2 id="左環的問題"><a href="#左環的問題" class="headerlink" title="左環的問題"></a>左環的問題</h2><p>這張 DevOps 很有名的 8 字圖，我不只一次說過這張圖有問題 (因為出處是某些大神)，但很少人可以了解有問題在哪。</p><p><img src="/images/DevOps/DevOpsCycle.jpg" alt=""></p><p>先講結論，我認為的問題在於：</p><blockquote><p>Build 的下一個不是 Test</p></blockquote><p>當然我知道這只是圖示，為了方便表示，可能因此 <code>省略</code> 很多細節。但是就是這個省略，透過網路的傳播，以後都真的省略了。</p><h2 id="測試前的準備工作"><a href="#測試前的準備工作" class="headerlink" title="測試前的準備工作"></a>測試前的準備工作</h2><p>在開始說明圖中的誤區之前，整理測試前要知道的事情。</p><p>在我的觀念裡，Deploy (or Installation) 是測試人員的第一個 <code>必備硬技能</code> (軟技能則是：溝通技巧與問題分析能力)。不管是 backend, frontend, desktop application。不包含 Deploy Strategy (Blue/Green, Canary, A/B …) ，這段通常會跟 Dev / Ops 合作，或者整個團隊一起來。</p><blockquote><p>測試或者 QA 該具備的軟硬技能，請參閱： <a href="/2015/10/11/SQA/How-To-Be-An-SQA/">How to be an SQA?</a></p></blockquote><p>以現代服務導向的架構來看，至少會有 Web/App + Backend 三大部分，所以測試前要準備些什麼？我覺得要完成以下必要的條件：</p><ul><li>確認準備測試的 <code>版本編號</code> (SemVer)</li><li>確認可以 Build 出 Artifact 位置<ul><li>Build 的依賴有沒有需要調整或者刪減</li><li>Artifact 存放的位置與資訊</li><li>App Build 的方式</li></ul></li><li>確認環境是否可以重新 Provisioning<ul><li>有沒有新增角色、如何部署</li></ul></li><li>確認 Config 的必要依賴資源、資訊是否完整<ul><li>確認相關服務的 endpoint</li><li>Funciton 有沒有新增參數、第三方依賴</li><li>參數的預設值與邊界值</li></ul></li></ul><p>這些資訊，通常是由 PM / Tech Lead / QA Manager 一起確認，如果有使用第三方資源，甚至要先去採購。最後這些資訊都要被統籌管理，屬於企業資產的一部分。</p><h2 id="認知差異"><a href="#認知差異" class="headerlink" title="認知差異"></a>認知差異</h2><p>關於測試，後來發現一個認知上的差異在於：</p><ol><li>大部分 (&gt; 95%) 的人認為：測試只有測 <code>商業功能</code>，不包含系統 (或稱非功能)</li><li>我認為的測試：不只是測試功能，還包含非功能、系統、效能<ul><li>其中非功有幾件很重要的任務叫做：<a href="/2018/07/08/DevOps/Artifacts-Management/">Artifact</a>、<a href="/2017/02/11/AWS/Resource-Provisioning-and-DevOps/">Provisioning</a>、Deployment</li><li>在用 Open Source 的時候 (Redis, Kafka …)，文件裡有很多效能指標、部署策略，這些東西怎麼來的？</li></ul></li><li>測試種類以及目的會隨產品特性以及開發方法有關係，所以必須要搭配 <a href="/2017/03/18/SQA/Stages-In-Software-Testing/">測試執行策略</a> 做選擇以及調整</li></ol><blockquote><p>測試種類、策略介紹參閱：<a href="/2017/03/18/SQA/Stages-In-Software-Testing/">Stages in Software Testing</a></p></blockquote><p>回到八字環，我認為的誤區、有問題的第一個點是左環 Dev 裡 <code>Build -&gt; Test</code> 的部分，缺少的補充如下：</p><ol><li>Deploy 之前要有 <a href="/2018/07/08/DevOps/Artifacts-Management/">Artifact</a>、<a href="/2017/02/11/AWS/Resource-Provisioning-and-DevOps/">Provisioning</a>、Config</li><li>Build 之後不是 Test，而是 Deploy</li><li>沒有 Deploy 的測試，請問是誰 Deploy？</li><li>這個 Deploy 的人知道測試的目的與策略？</li><li>能獨立 Deploy，就知道 Artifact、Config，然後才有 Testable 可言，才有<a href="/2017/03/18/SQA/Stages-In-Software-Testing/">測試策略</a></li></ol><p>換言之，測試者無法自行部署的應用程式、自行配置 Config，等於無法了解應用程式在系統的狀況，狀況包含系統架構、版本資訊、資料庫 DDL、Init Data、第三方倚賴，無法自行建立測試資料，這種測試，等於沒有測，或者沒有意義。產品上線後，隨著時間越久，這種問題會越來越嚴重，最後 QA 會越來越沒價值，然後上面就會說：請工讀生就好。</p><p>這張 8 字循環，表達的大方向沒有錯，但是卻因此弱化了測試該要有的資訊，間接誤導很多人。</p><h2 id="誤區與問題"><a href="#誤區與問題" class="headerlink" title="誤區與問題"></a>誤區與問題</h2><p>因為觀察到普遍的團隊 (&gt; 90%) 認為，測試只有商業功能需要測試與驗證 (Functional Verification Test)，而非功能性是維運團隊、或者是開發人員的任務。所以在開發過程，很多團隊 (&gt;80%) 的做法是：</p><blockquote><p>測試環境的部屬都是透過 Pipeline (e.g., Jenkins, Gitlab CI) 部署</p></blockquote><p>而 Jenkins 的 Job 是由開發 or 維運團隊負責，換言之測試者完全沒這方面的能力或者主控權。或者部署 DB Schema 權限都在 Dev 手上，最後問題就是 Dev 聲音很大，QA 沒聲音。測試環境的 Baseline 紊亂，或者沒有 Baseline。Baseline 就可以以從無到有建置的標準方法。</p><p>恩，這件事對我來說是不可思議的，而我這樣的想法，對很多人來講是不可思議的。所以導致大部分測試工作 在一般人心裡會覺得取代性很高、沒有價值。</p><h2 id="系統性測試"><a href="#系統性測試" class="headerlink" title="系統性測試"></a>系統性測試</h2><p>很多問題，不管是商業需求的問題、還是系統架構面的問題，都是可以再上線前探索的。聽過很多人會說，很多問題要上線後才能知道，或者模擬。實際的問題在於規劃不清楚，上線後錯誤的資料造成 <code>連鎖效應</code> (SRE CH22) 導致。這段只要 Unit Test、整合測試、系統測試有執行，是有辦法找的。而線上問題，要可以搬回線下驗證，特別是 Priority 不高，但是 Severity 很高的問題，這種情境有沒有？有，很多，特別是產品上線 <code>兩年後</code> 會爆多，簡單講：重要不急的問題。</p><p>測試是產品開發出來後，第一個完整的使用者，特別是這年代所謂的功能是要：Web/APP + Backend 才算功能，IoT 還要加 Devices 共三方。</p><blockquote><p>更多系統測試參閱：<a href="/2018/03/18/SQA/Gossip-System-Testing/">輕鬆聊：系統測試 (SVT) 的三兩事</a></p></blockquote><h2 id="專業之死"><a href="#專業之死" class="headerlink" title="專業之死"></a>專業之死</h2><p>另外這年代強調團隊，弱化個別職能，很多人會說：這就找 Dev 來一起弄就好，QA 幹嘛搞這個。問題就來了，沒 Sense 的 Dev，不會把架構弄好，不會設計 <code>Config</code> or 做 <code>Artifact</code>，做出緊耦合、強依賴的 Pipeline，最後只會讓整個服務卡死在 Dev 手上。而 QA 開的 Defect 不是只有商業功能的問題，還包含 Config 設計不良、架構沒彈性、效能不佳 … 等。Ops 呢？根本不用插手，前面就爛了。</p><h2 id="小節"><a href="#小節" class="headerlink" title="小節"></a>小節</h2><p>莫名其妙就寫了一大堆，重點以下：</p><ol><li>Build 之後不是 Test，而是 Provsioning -&gt; Deploy</li><li>測試種類很多，他們有不同的策略與考量</li><li>線上重要不急的問題，要可以現下驗證以及改善</li><li><a href="/2017/02/11/AWS/Resource-Provisioning-and-DevOps/">環境建置</a> 是一個工程團隊該有的基本素養</li><li>建置環境的前提是架構要清楚</li><li>QA 開的 Defect 不只有功能的問題，還包含 Config 設計不良、架構沒彈性、效能不佳 … 等。</li></ol><blockquote><p>在地表上，除了太空船，沒有不能測的。</p></blockquote><p>因為看過太多錯誤的認知與觀念，因為某某大神照本宣科，大肆宣揚此圖，加上沒有深度的思考，錯誤的觀念在網路上廣為流傳，一錯再錯。</p><p>用 <a href="/2018/11/14/DevOps/Review-Continuous-Delivery-v2.0/">心得：持續交付 2.0</a> 的探索環來說明，我想強調 <code>部署測試</code> 的重要性。換言之，怎麼部署，不應該再八字環右邊才發現。</p><p>所以這張圖不只左環有問題，右環也有問題：Deploy 前後也不是那樣的。</p><hr><h1 id="相關文章-站內"><a href="#相關文章-站內" class="headerlink" title="相關文章 (站內)"></a>相關文章 (站內)</h1><ul><li><a href="/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/">Software Development Lifecycle</a></li><li><a href="/2017/03/18/SQA/Stages-In-Software-Testing/">Stages in Software Testing</a></li><li><a href="/2017/02/11/AWS/Resource-Provisioning-and-DevOps/">Resource Provisioning and DevOps</a></li><li><a href="/2018/03/18/SQA/How-To-Report-A-Defect-or-Bug/">如何有效的回報問題 (How to Report Problems Effectively)</a></li><li><a href="/2017/11/12/DevOps/Gossip-Automation/">自動化帶來的問題</a></li><li><a href="/2015/10/11/SQA/How-To-Be-An-SQA/">How to be an SQA?</a></li><li><a href="/2018/07/08/DevOps/Artifacts-Management/">Artifacts Management</a></li><li><a href="/2018/03/18/SQA/Gossip-System-Testing/">輕鬆聊：系統測試 (SVT) 的三兩事</a></li><li><a href="/2015/01/06/Management/協同合作系統建制與導入-以-Redmine-為例/">協同合作系統建制與導入 - 以 Redmine 為例</a></li><li><a href="/2018/11/14/DevOps/Review-Continuous-Delivery-v2.0/">心得：持續交付 2.0</a></li></ul><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ul><li><a href="https://www.slideshare.net/rickhwang/continuous-delivery-opening-102713893" target="_blank" rel="noopener">Continuous Delivery - Opening</a></li><li><a href="http://www.infoq.com/cn/articles/three-current-common-problems-about-continuous-delivery" target="_blank" rel="noopener">持续交付：当前普遍存在的三个问题与解决方案</a></li><li><a href="https://en.wikipedia.org/wiki/Release_engineering" target="_blank" rel="noopener">Release engineering</a></li><li><a href="https://semver.org" target="_blank" rel="noopener">Semantic Versioning</a></li><li><a href="https://medium.com/netflix-techblog/ami-creation-with-aminator-98d627ca37b0" target="_blank" rel="noopener">AMI Creation with Aminator</a></li><li><a href="https://www.books.com.tw/products/0010793756" target="_blank" rel="noopener">專業之死：為何反知識會成為社會主流，我們又該如何應對由此而生的危機？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整理 2018/12/07 我寫的一篇論述：DevOps 8 字環的誤區。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
    
      <category term="Continuous Delivery" scheme="http://rickhw.github.io/tags/Continuous-Delivery/"/>
    
      <category term="Continuous Integration" scheme="http://rickhw.github.io/tags/Continuous-Integration/"/>
    
      <category term="Build" scheme="http://rickhw.github.io/tags/Build/"/>
    
      <category term="Configuration" scheme="http://rickhw.github.io/tags/Configuration/"/>
    
      <category term="Version Control" scheme="http://rickhw.github.io/tags/Version-Control/"/>
    
      <category term="Artifact" scheme="http://rickhw.github.io/tags/Artifact/"/>
    
  </entry>
  
  <entry>
    <title>Eventually Consistent 與 Dynamo NWR 模型</title>
    <link href="http://rickhw.github.io/2018/12/09/Architecture/Eventually-Consistent-Dynamo-NWR/"/>
    <id>http://rickhw.github.io/2018/12/09/Architecture/Eventually-Consistent-Dynamo-NWR/</id>
    <published>2018-12-09T05:30:00.000Z</published>
    <updated>2018-12-09T06:23:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理 AWS CTO - Werner Vogels 著名的論文: <a href="https://dl.acm.org/citation.cfm?id=1435432" target="_blank" rel="noopener">Eventually Consistent</a> (ACM), (<a href="https://www.allthingsdistributed.com/2008/12/eventually_consistent.html" target="_blank" rel="noopener">Blog</a>) 重點與筆記。</p><a id="more"></a><hr><h1 id="相關名詞"><a href="#相關名詞" class="headerlink" title="相關名詞"></a>相關名詞</h1><ul><li>Client side consistency:<ul><li><code>Strong consistency</code>：強一致性</li><li><code>Weak consistency</code>：弱一致性</li><li><code>Eventually consistency</code>：最終一致性</li></ul></li><li>Server side consistency: <code>簡稱 NWR 模型</code>：<ul><li>N 代表 N 個複本 (Replica)</li><li>W 寫入至少 W 個複本才算成功</li><li>R 至少讀取 R 個備份</li><li>R 與 W 的選擇，必須是 <code>W + R &gt; N</code>，否則無法保證一致性</li></ul></li><li><code>Vector Clock</code>：向量時鐘，協調多個節點的衝突。</li><li><code>read-your-write</code>: 讀你寫的</li><li><code>write-follows-read</code>: 寫</li></ul><h2 id="Client-side-consistency"><a href="#Client-side-consistency" class="headerlink" title="Client side consistency"></a>Client side consistency</h2><p>Client Side 有四種元件：</p><ul><li>A storage system: 儲存單位，假設是個黑盒子。</li><li>Process A: 從 storage 讀寫資料</li><li>Process B &amp; C: 獨立於 Process A 的程序，同樣從 storage 讀寫資料。</li></ul><p>用戶端的一致性必須讓觀察者 (Obsever, Process A/B/C) 知道 <code>如何</code> 與 <code>何時</code> 針對 Stroage 更新物件資料。底下是的例子是 Process A 更新到物件：</p><ul><li><code>Strong consistency</code>：強一致性，更新完成之後，任何存取的子程序 (subsequenet access) 都會回傳更新得值</li><li><code>Weak consistency</code>：弱一致性，系統不保證子程序會取得最新的值。有些必要的條件必須被滿足後，才會回傳更新值。條件通常跟經過多少時間 (passing of time) 有關係</li><li><code>Eventually consistency</code>：最終一致性，系統會保證最後會取得最後更新得值，最常見的案例就是 DNS 系統。</li></ul><p>針對 <code>最終一致性模型</code>，底下是必要的考量：</p><ul><li>Causal consistency (因果一致性):</li><li>Read-your-writes consistency</li><li>Session consistency</li><li>Monotonic read consistency</li><li>Monotonic write consistency</li></ul><h2 id="Server-side-consistency"><a href="#Server-side-consistency" class="headerlink" title="Server side consistency"></a>Server side consistency</h2><p>開始描述之前，定義以下名詞：</p><ul><li><code>N</code>: 代表 N 個複本 (Replica)，資料被複製到多少實體主機，通常這個值至少是 3</li><li><code>R</code>: 代表一次成功的讀取操作中，最小的結點數，也就是要讀取多少個 Replica 才算是讀取成功。</li><li><code>W</code>: 寫入至少 W 個複本才算成功</li></ul><p>R 與 W 的選擇，這代表著：</p><ul><li><code>W + R &lt;= N</code>，讀 (W) 與寫 (R) 的數量 &lt;= 複本數 (N)：複本數剛好可以分配到所有請求，不會有讀寫一致性問題</li><li><code>W + R &gt; N</code>，讀 (W) 與寫 (R) 的數量 &gt; 複本數 (N)：複本數少於讀寫請求數量，必須處理一致性問題，也就是無法保證一致性。</li></ul><p>此概念稱為 <code>NRW 模型</code>、或者 <code>NWR 模型</code></p><hr><h1 id="NWR-與-CAP-的選擇"><a href="#NWR-與-CAP-的選擇" class="headerlink" title="NWR 與 CAP 的選擇"></a>NWR 與 CAP 的選擇</h1><p>CAP 倆倆相對，與 NWR 的關係與應用場景。</p><h2 id="AP-Available-and-Partition-tolerance"><a href="#AP-Available-and-Partition-tolerance" class="headerlink" title="AP (Available and Partition tolerance)"></a>AP (Available and Partition tolerance)</h2><p>可用性與分區容錯，亦即 <code>寫多、讀少</code>。</p><p>需要寫多讀少，也就是 <code>優化寫入效能</code>，會配置 <code>W = 1</code>，也就是寫入一個複本就算是成功，就如同單機的 RDBMS，其他非同步的複本可以慢慢抄寫。</p><h2 id="CP-Consistency-and-Partition-tolerance"><a href="#CP-Consistency-and-Partition-tolerance" class="headerlink" title="CP (Consistency and Partition tolerance)"></a>CP (Consistency and Partition tolerance)</h2><p>資料一致性與分區容錯，亦即 <code>讀多、寫少</code>。</p><p>需要讀取比較多，也就是 <code>優化讀取效能</code>，通常會配置 <code>W = N</code></p><h2 id="AC-Availability-and-Consistency"><a href="#AC-Availability-and-Consistency" class="headerlink" title="AC (Availability and Consistency)"></a>AC (Availability and Consistency)</h2><p>可用性與資料一致性，亦即 <code>讀寫平衡</code>。</p><p>不需要容錯和擴展性的時候，配置一個複本: <code>N = 1</code></p><!--## Vector Clock (向量時鐘)--><h2 id="把-CAP-交給用戶決定"><a href="#把-CAP-交給用戶決定" class="headerlink" title="把 CAP 交給用戶決定"></a>把 CAP 交給用戶決定</h2><p>NWR 模型的概念，就是把選擇權交給用戶決定，讓用戶自己決定選擇 CAP 中的哪兩個。</p><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="/2018/08/11/Architecture/CAP-Theorem/">CAP Theorem</a></li><li><a href="/2016/08/17/AWS/Study-Notes-DynamoDB/">Study Notes - DynamoDB 學習筆記</a></li><li><a href="https://www.slideshare.net/rickhwang/study-notes-eventdriven-data-management-for-microservices" target="_blank" rel="noopener">Study Notes - Event-Driven Data Management for Microservices</a></li></ul><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li>ACM: <a href="https://dl.acm.org/citation.cfm?id=1435432" target="_blank" rel="noopener">Eventually Consistent</a></li><li><a href="https://coolshell.cn/articles/10910.html" target="_blank" rel="noopener">分布式系统的事务处理</a></li><li><a href="https://blog.csdn.net/risingsun001/article/details/44564171" target="_blank" rel="noopener">Vector Clock算法的理解</a></li><li>Blog: <a href="https://www.allthingsdistributed.com/2008/12/eventually_consistent.html" target="_blank" rel="noopener">Eventually Consistent</a></li><li><a href="http://www.udpwork.com/item/4571.html" target="_blank" rel="noopener">Amazon Dynamo – 纠结的设计</a></li><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#ConsistencyModel" target="_blank" rel="noopener">Amazon S3 Data Consistency Model</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理 AWS CTO - Werner Vogels 著名的論文: &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=1435432&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eventually Consistent&lt;/a&gt; (ACM), (&lt;a href=&quot;https://www.allthingsdistributed.com/2008/12/eventually_consistent.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Blog&lt;/a&gt;) 重點與筆記。&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://rickhw.github.io/categories/Architecture/"/>
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/categories/Architecture/Distributed-Systems/"/>
    
    
      <category term="DynamoDB" scheme="http://rickhw.github.io/tags/DynamoDB/"/>
    
      <category term="CAP" scheme="http://rickhw.github.io/tags/CAP/"/>
    
      <category term="NWR" scheme="http://rickhw.github.io/tags/NWR/"/>
    
      <category term="Vector Clock" scheme="http://rickhw.github.io/tags/Vector-Clock/"/>
    
      <category term="Eventually Consistent" scheme="http://rickhw.github.io/tags/Eventually-Consistent/"/>
    
  </entry>
  
  <entry>
    <title>AWS reInvent 2018 News</title>
    <link href="http://rickhw.github.io/2018/12/02/AWS/News_AWS-reInvent-2018/"/>
    <id>http://rickhw.github.io/2018/12/02/AWS/News_AWS-reInvent-2018/</id>
    <published>2018-12-02T03:27:00.000Z</published>
    <updated>2018-12-03T14:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理 AWS re:Invent 2018 發佈的新東西！</p><a id="more"></a><h1 id="New-Services"><a href="#New-Services" class="headerlink" title="New Services"></a>New Services</h1><h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><ul><li>WebSocket support for API Gateway!!!</li><li><a href="https://aws.amazon.com/blogs/aws/new-aws-toolkits-for-pycharm-intellij-preview-and-visual-studio-code-preview/" target="_blank" rel="noopener">New – AWS Toolkits for PyCharm, IntelliJ (Preview), and Visual Studio Code (Preview)</a></li><li><a href="https://aws.amazon.com/blogs/aws/amazon-forecast-time-series-forecasting-made-easy/" target="_blank" rel="noopener">Amazon Forecast – Time Series Forecasting Made Easy</a></li><li>AWS Control Tower</li><li>AWS Security Hub</li><li>AWS Lake Formation</li><li>Amazon Timestream (Series DB), Preview</li></ul><h2 id="GA"><a href="#GA" class="headerlink" title="GA"></a>GA</h2><ul><li>Amazon Managed Streaming Kafka (MSK)</li><li><a href="https://aws.amazon.com/blogs/aws/new-aws-well-architected-tool-review-workloads-against-best-practices/" target="_blank" rel="noopener">New – AWS Well-Architected Tool – Review Workloads Against Best Practices</a></li><li><a href="https://aws.amazon.com/blogs/aws/aws-cloud-map-easily-create-and-maintain-custom-maps-of-your-applications/" target="_blank" rel="noopener">AWS Cloud Map: Easily create and maintain custom maps of your applications</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-aws-license-manager-manage-software-licenses-and-enforce-licensing-rules/" target="_blank" rel="noopener">New AWS License Manager – Manage Software Licenses and Enforce Licensing Rules</a></li><li><a href="https://aws.amazon.com/qldb/" target="_blank" rel="noopener">Amazon Quantum Ledger Database (QLDB)</a></li><li>Amazon Managed Blockchain</li><li>Amazon Textract (OCR as a Service)</li><li>Compute<ul><li><a href="https://aws.amazon.com/blogs/aws/firecracker-lightweight-virtualization-for-serverless-computing/" target="_blank" rel="noopener">Firecracker – Lightweight Virtualization for Serverless Computing</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-ec2-instances-a1-powered-by-arm-based-aws-graviton-processors/" target="_blank" rel="noopener">New – EC2 Instances (A1) Powered by Arm-Based AWS Graviton Processors</a></li></ul></li><li>Machine Learning<ul><li><a href="https://aws.amazon.com/blogs/aws/amazon-sagemaker-neo-train-your-machine-learning-models-once-run-them-anywhere/" target="_blank" rel="noopener">Amazon SageMaker Neo – Train Your Machine Learning Models Once, Run Them Anywhere</a></li><li><a href="https://aws.amazon.com/blogs/aws/amazon-personalize-real-time-personalization-and-recommendation-for-everyone/" target="_blank" rel="noopener">Amazon Personalize – Real-Time Personalization and Recommendation for Everyone</a></li><li><a href="https://aws.amazon.com/blogs/aws/amazon-sagemaker-rl-managed-reinforcement-learning-with-amazon-sagemaker/" target="_blank" rel="noopener">Amazon SageMaker RL – Managed Reinforcement Learning with Amazon SageMaker</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-machine-learning-algorithms-and-model-packages-now-available-in-aws-marketplace/" target="_blank" rel="noopener">NEW – Machine Learning algorithms and model packages now available in AWS Marketplace</a></li><li><a href="https://aws.amazon.com/blogs/aws/amazon-elastic-inference-gpu-powered-deep-learning-inference-acceleration/" target="_blank" rel="noopener">Amazon Elastic Inference – GPU-Powered Deep Learning Inference Acceleration</a></li><li><a href="https://aws.amazon.com/blogs/aws/amazon-comprehend-medical-natural-language-processing-for-healthcare-customers/" target="_blank" rel="noopener">Amazon Comprehend Medical – Natural Language Processing for Healthcare Customers</a></li></ul></li><li>Storage<ul><li><a href="https://aws.amazon.com/blogs/aws/new-amazon-fsx-for-lustre/" target="_blank" rel="noopener">New – Amazon FSx for Lustre</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-amazon-fsx-for-windows-file-server-fast-fully-managed-and-secure/" target="_blank" rel="noopener">New – Amazon FSx for Windows File Server – Fast, Fully Managed, and Secure</a></li></ul></li><li>Development Kits<ul><li><a href="https://aws.amazon.com/blogs/aws/new-amazon-kinesis-data-analytics-for-java/" target="_blank" rel="noopener">New – Amazon Kinesis Data Analytics for Java</a></li></ul></li><li>Others<ul><li><a href="https://aws.amazon.com/blogs/aws/new-aws-marketplace-makes-it-easier-to-govern-software-procurement-with-private-marketplace/" target="_blank" rel="noopener">NEW – AWS Marketplace makes it easier to govern software procurement with Private Marketplace</a></li><li><a href="https://aws.amazon.com/blogs/aws/aws-ground-station-ingest-and-process-data-from-orbiting-satellites/" target="_blank" rel="noopener">AWS Ground Station – Ingest and Process Data from Orbiting Satellites</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-aws-resource-access-manager-cross-account-resource-sharing/" target="_blank" rel="noopener">New AWS Resource Access Manager – Cross-Account Resource Sharing</a></li></ul></li></ul><h1 id="New-Features"><a href="#New-Features" class="headerlink" title="New Features"></a>New Features</h1><h2 id="Compute"><a href="#Compute" class="headerlink" title="Compute"></a>Compute</h2><ul><li>Lambda Layer</li><li>Ruby support for lambda</li><li>ALB Support for Lambda !!!!!</li><li><a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-use-any-programming-language-and-share-common-components/" target="_blank" rel="noopener">New for AWS Lambda – Use Any Programming Language and Share Common Components</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-compute-database-messaging-analytics-and-machine-learning-integration-for-aws-step-functions/" target="_blank" rel="noopener">New – Compute, Database, Messaging, Analytics, and Machine Learning Integration for AWS Step Functions</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-hibernate-your-ec2-instances/" target="_blank" rel="noopener">New – Hibernate Your EC2 Instances</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-c5n-instances-with-100-gbps-networking/" target="_blank" rel="noopener">New C5n Instances with 100 Gbps Networking</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-predictive-scaling-for-ec2-powered-by-machine-learning/" target="_blank" rel="noopener">New – Predictive Scaling for EC2, Powered by Machine Learning</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-ec2-auto-scaling-groups-with-multiple-instance-types-purchase-options/" target="_blank" rel="noopener">New – EC2 Auto Scaling Groups With Multiple Instance Types &amp; Purchase Options</a></li></ul><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><ul><li><a href="https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing/" target="_blank" rel="noopener">Amazon DynamoDB On-Demand – No Capacity Planning and Pay-Per-Request Pricing</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-amazon-dynamodb-transactions/" target="_blank" rel="noopener">New – Amazon DynamoDB Transactions</a></li></ul><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><ul><li><a href="https://aws.amazon.com/blogs/aws/new-automatic-cost-optimization-for-amazon-s3-via-intelligent-tiering/" target="_blank" rel="noopener">New – Automatic Cost Optimization for Amazon S3 via Intelligent Tiering</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-aws-transfer-for-sftp-fully-managed-sftp-service-for-amazon-s3/" target="_blank" rel="noopener">New – AWS Transfer for SFTP – Fully Managed SFTP Service for Amazon S3</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-aws-datasync-automated-and-accelerated-data-transfer/" target="_blank" rel="noopener">New – AWS DataSync – Automated and Accelerated Data Transfer</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-amazon-route-53-resolver-for-hybrid-clouds/" target="_blank" rel="noopener">New – Amazon Route 53 Resolver for Hybrid Clouds</a></li><li><a href="https://aws.amazon.com/blogs/aws/amazon-s3-block-public-access-another-layer-of-protection-for-your-accounts-and-buckets/" target="_blank" rel="noopener">Amazon S3 Block Public Access – Another Layer of Protection for Your Accounts and Buckets</a></li><li>Glacier Deep Archive </li></ul><h2 id="Security-Identity-Compiance"><a href="#Security-Identity-Compiance" class="headerlink" title="Security, Identity, Compiance"></a>Security, Identity, Compiance</h2><ul><li><a href="https://aws.amazon.com/blogs/aws/aws-robomaker-develop-test-deploy-and-manage-intelligent-robotics-apps/" target="_blank" rel="noopener">AWS RoboMaker – Develop, Test, Deploy, and Manage Intelligent Robotics Apps</a></li></ul><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><ul><li><a href="https://aws.amazon.com/blogs/aws/new-use-an-aws-transit-gateway-to-simplify-your-network-architecture/" target="_blank" rel="noopener">New – Use an AWS Transit Gateway to Simplify Your Network Architecture</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-aws-global-accelerator-for-availability-and-performance/" target="_blank" rel="noopener">New – AWS Global Accelerator for Availability and Performance</a></li></ul><h2 id="Management"><a href="#Management" class="headerlink" title="Management"></a>Management</h2><ul><li><a href="https://aws.amazon.com/blogs/aws/new-amazon-cloudwatch-logs-insights-fast-interactive-log-analytics/" target="_blank" rel="noopener">New – Amazon CloudWatch Logs Insights – Fast, Interactive Log Analytics</a></li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li><a href="https://aws.amazon.com/blogs/aws/new-aws-elemental-mediaconnect-for-ingestion-and-distribution-of-video-in-the-cloud/" target="_blank" rel="noopener">New – AWS Elemental MediaConnect for ingestion and distribution of video in the cloud.</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理 AWS re:Invent 2018 發佈的新東西！&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://rickhw.github.io/categories/AWS/"/>
    
    
      <category term="re:Invent" scheme="http://rickhw.github.io/tags/re-Invent/"/>
    
  </entry>
  
  <entry>
    <title>IPv6 基本概念</title>
    <link href="http://rickhw.github.io/2018/11/29/ComputerScience/IPv6/"/>
    <id>http://rickhw.github.io/2018/11/29/ComputerScience/IPv6/</id>
    <published>2018-11-29T02:30:00.000Z</published>
    <updated>2018-12-04T14:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理 IPv6 的基本概念。2016 AWS VPC <a href="/2016/12/31/AWS/Support_IPv6-in-VPC/">支援 IPv6</a> 之後，就沒在研究相關課題，只大概做過一些資料。</p><a id="more"></a><!--## IPv6 的特徵* 數量很多，號稱地球上每粒沙子都可以有 IP* 因應 IPv4 數量不夠用的技術 NAT 不再需要。--><!-- # 技術資訊 --><h2 id="比較-IPv4-與-IPv6"><a href="#比較-IPv4-與-IPv6" class="headerlink" title="比較 IPv4 與 IPv6"></a>比較 IPv4 與 IPv6</h2><p>整理 IPv4 與 IPv6 基本概念、表示方式。</p><ul><li>IPv4:<ul><li>1 Bytes * 4 = 4 Bytes / 32 bit<ul><li>每單位: <code>1 Bytes</code> = <code>8 bit</code></li><li>單位數: 4 個</li><li>總長度: 單位 * 單位數 = 8 bit * 4 = <code>32 bit</code></li></ul></li><li>Format: <code>4.3.2.1</code><ul><li>數字表示單位編號</li><li>每個單位用 <code>.</code> 做分隔</li><li>每個單位都一定要表示, 不可省略</li><li>IPv4 一個單位用 1 Byte</li></ul></li><li>Range: [0-255].[0-255].[0-255].[0-255]<ul><li>用十進位表示</li></ul></li><li>CIDR Mask 表示式：最大總數 <code>/32</code></li><li><a href="https://tools.ietf.org/html/rfc1918" target="_blank" rel="noopener">RFC1918</a>, <a href="https://tools.ietf.org/html/rfc1519" target="_blank" rel="noopener">RFC1519</a></li></ul></li><li>IPv6:<ul><li>2 Bytes * 8 = 16 Bytes<ul><li>每單位: 2 Bytes = 16 bit (IPv4 兩倍)</li><li>單位數: 8 個 (IPv4 兩倍)</li><li>總長度: 16 bit * 8 = <code>128 bit</code></li></ul></li><li>Format: <code>8:7:6:5:4:3:2:1</code><ul><li>數字表示單位編號</li><li>用 <code>:</code> 隔開</li><li>IPv6 一個單位 2 Bytes</li></ul></li><li>CIDR Mask 表示式：最大總數 <code>/128</code> (16*8)</li><li>Range: [ffff]:[ffff]:[ffff]:[ffff]:[ffff]:[ffff]:[ffff]:[ffff]<ul><li>用十六進位表示</li><li>共有八個區間</li></ul></li><li>Private Network: <a href="https://tools.ietf.org/html/rfc2460" target="_blank" rel="noopener">RFC2460</a>, 稱為 <code>Unique Local Area</code></li></ul></li></ul><h2 id="表示式-Expression"><a href="#表示式-Expression" class="headerlink" title="表示式 (Expression)"></a>表示式 (Expression)</h2><ul><li><code>本機 (localhost)</code>：用 <code>::1</code> 表示，類似 IPv4 <code>127.0.0.1</code>，完整則是：<ul><li><code>0000:0000:0000:0000:0000:0000:0000:0001</code></li><li>長度有八個單位</li></ul></li><li><code>省略</code>: 如果區間是 <code>0</code>，則可以用 <code>::</code> 表示，但是八個區間只能省略一個單位 (待確認)，舉例：<ul><li>完整位址：<code>2001:B030:0000:0000:0001:0000:0000:0001</code></li><li>省略一：<code>2001:B030::0001:0000:0000:0001</code> –&gt; 省略第 6 個單位</li><li>省略二：<code>2001:B030:0000:0000:0001::1</code> –&gt; 省略第 2 個單位</li><li>錯誤：<code>2001:B030::1::1</code> –&gt; 同時省略兩個單位?? (要確認)</li></ul></li></ul><!--https://www.techbang.com/posts/10966-ipv6-ready-growth-of-128bits-die-company-mis-computer-king-97-special-report-5?page=2https://www.jannet.hk/zh-Hant/post/IP-Address-Version-6-IPv6/Link-LocalUnique-local--><!--## Link-Local AddressIPv6 保留前置位元，作為特殊用途，類似於 IPv4 的 Class 切分概念。IPv6 的前面 10bit：`1111 1110 10` 稱為 `Link-Local Address`，表示成十六進位就是 `FE80::/10`https://www.lijyyh.com/2011/11/ipv6_16.html--><!--## IPv6 vs IPv4* Space Size：128bit vs 32bit* NAT (Network Address Translation): IPv6 很多* CIDR (Classless Inter-Domain Routing):* [NAT64][a4]:--><!--## IPv4 to IPv6 轉換* Google DNS: `8.8.8.8`  * 完整位址：`0000:0000:0000:0000:0000:ffff:0808:0808`  * 省略一：`::ffff:808:808`--><!--## TCP--><!--## Private Network - Unique Local Area (RFC4193)`1111 1107``fc00::/7`--><!--## 相關機制* DNS:* NAT:* NAT-PT（將 IPv4和IPv6協定轉換）--><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>工具</th><th>IPv4</th><th>IPv6</th></tr></thead><tbody><tr><td> ICMP</td><td>ping</td><td>ping6</td></tr><tr><td> DNS</td><td>nslookup, dig</td><td>nslookup, dig</td></tr></tbody></table><ul><li>traceroute</li><li>ifconfig / ipconfig</li><li>ping6</li><li>ip6tables -L</li><li>nslookup</li><li>wget</li><li>curl</li><li><a href="http://ipv6-test.com/" target="_blank" rel="noopener">http://ipv6-test.com/</a></li><li><a href="https://test-ipv6.com/" target="_blank" rel="noopener">https://test-ipv6.com/</a></li><li><a href="https://ipinfo.com/" target="_blank" rel="noopener">https://ipinfo.com/</a></li><li>免費 IPv6 DNS: <a href="http://ubddns.org/" target="_blank" rel="noopener">http://ubddns.org/</a></li></ul><!-- http://benjr.tw/17326 --><!--ip -6 route showroute -A inet6// tcp dump IPV6tcpdump -i eth0 -vv ip6// ping localhost# Windowsping -6 ::1# linuxping6 ::1// ping6ping6 3ffe:501:ffff:100::100// Google Primary DNSping6 2001:4860:4860::8888// Google Secondary DNSping6 2001:4860:4860::8844// wgetwget -6 http://[3ffe:501:ffff:100::100]/test// curlcurl -g -6 http://[3ffe:501:ffff:100::100]/--><!--## FAQQ1: IPv4 的 `0.0.0.0/0`，在 IPv6 怎麼表達？> 等於 `::/0`--><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="/2016/12/31/AWS/Support_IPv6-in-VPC/">Support IPv6 in VPC</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://tools.ietf.org/html/rfc2460" target="_blank" rel="noopener">RFC2460</a></li><li><a href="https://zh.wikipedia.org/zh-tw/IPv6" target="_blank" rel="noopener">IPv6</a></li><li><a href="https://zh.wikipedia.org/zh-tw/NAT64" target="_blank" rel="noopener">NAT64</a></li><li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-migrate-ipv6.html" target="_blank" rel="noopener">Migrating to IPv6</a></li><li><a href="https://aws.amazon.com/blogs/aws/new-ipv6-support-for-ec2-instances-in-virtual-private-clouds/" target="_blank" rel="noopener">IPv6 Support for EC2 Instances in Virtual Private Clouds</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理 IPv6 的基本概念。2016 AWS VPC &lt;a href=&quot;/2016/12/31/AWS/Support_IPv6-in-VPC/&quot;&gt;支援 IPv6&lt;/a&gt; 之後，就沒在研究相關課題，只大概做過一些資料。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Science" scheme="http://rickhw.github.io/categories/Computer-Science/"/>
    
    
      <category term="IPv6" scheme="http://rickhw.github.io/tags/IPv6/"/>
    
      <category term="Networking" scheme="http://rickhw.github.io/tags/Networking/"/>
    
      <category term="IPv4" scheme="http://rickhw.github.io/tags/IPv4/"/>
    
  </entry>
  
  <entry>
    <title>Products Naming for AWS</title>
    <link href="http://rickhw.github.io/2018/11/18/AWS/Products-Naming-for-AWS/"/>
    <id>http://rickhw.github.io/2018/11/18/AWS/Products-Naming-for-AWS/</id>
    <published>2018-11-18T11:35:00.000Z</published>
    <updated>2018-11-18T11:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>我心裡一直有這樣問題：</p><p>AWS 有些產品用 Amazon 開頭（像 Amazon EC2、Amazon API Gayeway、Amazon CloudWatch），有些則是用 AWS 開頭（像是 AWS CloudFormation、AWS Lambda、AWS IoT），如下圖：</p><p><img src="/images/AWS/Product-Naming-for-AWS.png" alt=""></p><p>底下整理我對於命名前置詞命名的猜測。</p><a id="more"></a><h2 id="猜測"><a href="#猜測" class="headerlink" title="猜測"></a>猜測</h2><p>用架構角度來看，分成兩種：</p><ul><li><code>核心基礎架構服務</code>: Core Infrastructure Services</li><li><code>產品服務</code>: Product Services</li></ul><p><code>核心基礎服務</code> 用 <code>Amazon</code> 開頭，像是 <code>Amazon SQS</code>、<code>Amazon S3</code>、<code>Amazon EC2</code>、<code>Amazon VPC</code>、<code>Amazon DynamoDB</code>、<code>Amazon CloudFront</code>、Amazon API Gateway …，這些整個 Cloud 的最最最核心，也是最重要的架構，用這些基礎架構服務可以組出其他任何新的產品服務。</p><p>例如 AWS 歷史最悠久的前三個服務 SQS、S3、EC2。從這些服務的特性，可以推測再變成 Service 給使用者之前，在 Amazon 內部已經使用一段時間，最後變成服務化、產品化。通常這些基礎架構服務只要爛掉、出問題，影響都是災難性的、毀滅性的，所以他們的要求會異常的高。因為這些服務承載的產品服務的基礎。</p><p>用 AWS 開頭，像是 AWS Lambda、AWS Batch、AWS CloudFormation … 這些屬於基於基礎架構服務做出來的產品服務，也就是基於基礎架構服務之上，堆疊出來的產品。這種產品的特性就是給更終端的使用者，他的訴求在於快、簡單。與基礎架構服務不一樣的事，從使用上來講，可以無腦使用，但是實際上要高效能使用他們，還是要回去懂基礎服務</p><blockquote><p><a href="https://read.acloud.guru/dear-aws-we-need-to-talk-about-service-naming-d33ea68027d8" target="_blank" rel="noopener">有人說 AWS 的命名很亂的問題</a>，恩，我是覺得還好。我不認同把名稱取得太一般，但是要有適度的規範以及慣例，例如 Apple 產品線命名算是容易懂的。</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>不過 AWS 跟 Apple 的 TA 不一樣，前者是技術宅，後者是一班人。技術宅通常都討厭命名，通常也不太在乎命名，所以要他們去記這些名字是很痛苦的。像有個產品叫做 Athena (雅典娜) 我每次都要說這是 AWS 的 BigQuery … 技術宅能理解的是形容詞、類比，而不是一個沒聽過的怪名詞。。。</p><p>不過，雅典娜應該聽過吧？！勝豆士 啊。。。</p><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="https://read.acloud.guru/dear-aws-we-need-to-talk-about-service-naming-d33ea68027d8" target="_blank" rel="noopener">Dear AWS, we need to talk about your service names</a></li><li><a href="http://rickmidi.blogspot.com/2011/05/blog-post.html" target="_blank" rel="noopener">如何選擇適合的數位設備 - 以吉他綜合效果器為例</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我心裡一直有這樣問題：&lt;/p&gt;
&lt;p&gt;AWS 有些產品用 Amazon 開頭（像 Amazon EC2、Amazon API Gayeway、Amazon CloudWatch），有些則是用 AWS 開頭（像是 AWS CloudFormation、AWS Lambda、AWS IoT），如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/AWS/Product-Naming-for-AWS.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;底下整理我對於命名前置詞命名的猜測。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://rickhw.github.io/categories/AWS/"/>
    
    
      <category term="AWS CLI" scheme="http://rickhw.github.io/tags/AWS-CLI/"/>
    
      <category term="Security Groups" scheme="http://rickhw.github.io/tags/Security-Groups/"/>
    
      <category term="Operations" scheme="http://rickhw.github.io/tags/Operations/"/>
    
      <category term="Ops as Code" scheme="http://rickhw.github.io/tags/Ops-as-Code/"/>
    
  </entry>
  
  <entry>
    <title>心得：持續交付 2.0</title>
    <link href="http://rickhw.github.io/2018/11/14/DevOps/Review-Continuous-Delivery-v2.0/"/>
    <id>http://rickhw.github.io/2018/11/14/DevOps/Review-Continuous-Delivery-v2.0/</id>
    <published>2018-11-14T14:30:00.000Z</published>
    <updated>2018-12-16T02:16:26.232Z</updated>
    
    <content type="html"><![CDATA[<p>今年 (2018) 三月，我在公司內完成長達半年的 <a href="/2018/08/03/DevOps/An-Introduction-to-SRE/">SRE (Site Reliability Engieering)</a> 讀書會，快結束時就在盤算下一本候選書，希望激盪團隊更多想法。那時候首選就是當代軟體工程的經典之作：<code>持續交付 (Continuous Delivery)</code>。</p><p>在讀書會開始不久，有次跟朋友聊到持續部署想法，當時我提到因為時空背景的關係，這幾年各種新的概念與技術快速發展，特別是雲端架構應用、微服務與分散式架構的實踐概念，彷彿不斷的在提醒大家，<code>持續部署</code> 應該有不同的想法與實踐。同時 DevOps 與敏捷開發 (Agile Development) 概念鋪天蓋地的出現，大家意識到 <code>霧卡世界（VUCA)</code> 正在驅動整個軟體產業，除了持續部署，持續交付商業價值將面對更大的挑戰！</p><blockquote><p>戰爭之前，不管做了多少參謀作業，戰爭第一聲槍響的時候，所有計畫都會隨之改變。</p><p>– 美國名將 <code>麥克阿瑟</code></p></blockquote><p>雖然世界變化之快，常常讓人迷失，但變化越快，越要靜下心思考。正當我在思考，是否將這些資訊做通盤整理，彙整成更有意義的文字時，十一月七日早上，是立冬之日，Ruddy 老師在我桌上放了一本書，作者是人稱喬幫主的喬梁老師大作，書名：<code>持續交付 2.0</code>。當時的我心裡想：『嗯，我想要的，應該都在這裡面了。』</p><p><img src="/images/DevOps/CDv20/20181107-CDv20.jpg" alt=""></p><a id="more"></a><hr><h1 id="心得與摘要"><a href="#心得與摘要" class="headerlink" title="心得與摘要"></a>心得與摘要</h1><p>喬老師的這本大作看起來不厚，但是內容非常扎實。我只摘錄幾個有共鳴的章節，做心得與摘要。</p><h2 id="持續交付-2-0"><a href="#持續交付-2-0" class="headerlink" title="持續交付 2.0"></a>持續交付 2.0</h2><p>這本書集合了現代軟體開發方法與協作管理之大成，書本一開始整理了軟體工程發展的模式，從瀑布開發、敏捷開發、DevOps 運動，然後整理 Jez Humble、Devid Farley 的經典之作 <code>持續交付 1.0</code> (底下簡稱 <code>CDv1.0</code>) 與 <code>持續交付 2.0</code> (底下簡稱 <code>CDv2.0</code>) 的差異，其中特別解釋了 <code>價值探索環</code>，也就是經典的 <code>８字環</code> 探討兩個層面：</p><ul><li><code>探索環</code>：八字環左邊的圈，包含了 提問、錨定、共創、精練</li><li><code>驗證環</code>：八字環右邊的圈，包含了 建構、運行、監測、決策</li></ul><p>CDv2.0 延續了 CDv1.0 概念，同時也加入了很多面對 VUCA 的思維，我簡單用程式碼來表示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置管理、持續整合、測試策略、部署流水線</span></span><br><span class="line"><span class="comment"> * 部署與發佈、基礎設施與環境、依賴管理、版本控管</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDv10</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可持續地、快速發布軟體服務</span></span><br><span class="line">    <span class="keyword">boolean</span> rapidDeploy = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 最小化可行產品</span></span><br><span class="line">    <span class="keyword">boolean</span> enableMVP = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDv20</span> <span class="keyword">extends</span> <span class="title">CDv10</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 四個核心原則</span></span><br><span class="line">    <span class="keyword">boolean</span> 減持少做 = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> 持續分解問題 = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> 快速反饋 = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> 持續改進並衡量 = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    var teams = &#123; <span class="string">"業務"</span>, <span class="string">"產品"</span>, <span class="string">"開發"</span>, <span class="string">"測試"</span>, <span class="string">"維運"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    constructor(bizGoal) &#123;</span><br><span class="line">        eventLoop(bizGoal)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基礎設施</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">infra</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 軟體架構</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">architecture</span><span class="params">(<span class="keyword">default</span>=microservices)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 組織機制</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">organize</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CDv2.0 除了交付軟體技術面的課題，更強調了交付價值的概念，用我個人在教吉他時，經常遇到的問題做小結：</p><blockquote><p>學樂器有兩個層次：<a href="http://rickmidi.blogspot.com/2008/09/blog-post.html" target="_blank" rel="noopener">怎麼彈、彈什麼？</a>。<code>怎麼彈</code> 是演奏技術問題，包含演奏技巧、和弦、音階、節奏等基本功，是理性思維；<code>彈什麼</code> 是情感表達問題，如何表達出音樂性，包含音樂層次、敘事張力、文化風格、抽象概念等，屬於感性呈現。</p><p>持續部署是 <code>怎麼交付</code>，屬於工程問題、執行面問題；持續交付則是 <code>交付什麼</code>，屬於商業價值、企業文化層次。</p></blockquote><hr><h2 id="軟體系統架構"><a href="#軟體系統架構" class="headerlink" title="軟體系統架構"></a>軟體系統架構</h2><p>第五章的標題：<code>持續交付的軟件系統架構</code>，這標題正好是我在公司內部推廣的概念：看見系統架構的全貌，包含開發，測試、正式環境的架構與考量。</p><blockquote><p>專案之初，首重看見全貌；持續交付首要看見架構全貌。</p></blockquote><p>軟體服務經常因為隨著時間的前進，系統架構會做改變與調整，漸漸的，很少人能夠清楚地掌握全貌。這間接造成後續維運的風險增加、成本不可控、測試階段可測性大減，同時無法全面掌控架構，也讓持續部署寸步難行，最終導致的就是無法快速的持續交付，不管是交付到新的測試環境、還是新的業務需求，影響的將是整個企業的發展與生存機會。</p><p>我在 DevOpsDays Taipei 2018 分享了 <a href="/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/">緊急事件處理的探討</a>，其中也提及如何溝通系統架構的方法，如何定義架構與團隊之間的關係。另一篇文章：<a href="/2018/03/20/DevOps/First-Step-To-CICD/">導入 CI/CD 的第一步</a>，也特別強調架構的重要性。過往帶領測試團隊時，持續部署到測試環境是每天必做的，能做的不只是功能環境的驗證，也包含非功能的驗證。強調持續部署與交付到測試環境的重要性，能夠快速部署，代表著部署流水線有著順暢的定義，系統架構有清楚的關係定義。所以在持續部署階段，掌握系統架構更是基本功。</p><p>基本功不代表簡單、容易，實際上代表的是重要，要越早做越好的。不管是微服務架構、微核架構還是單體架構，實際上都跟 <code>物件導向</code> 與 <code>設計模式</code> 有著巧合的關聯性。我在探討架構規範時，就針對 <code>服務定義</code>、<code>服務依賴</code>、<code>角色可視性</code>、<code>基礎架構</code> 做了清楚的定義，最後架構都會跟組織有著直接關係，也就是 <code>康威定律 (Conway&#39;s Law)</code> ：描述了組織溝通的方式與對象。</p><p>如何調整架構，讓持續部署與交付能夠更快，更清楚，這也是現代團隊都要面對的問題，因為他間接會影響整個組織溝通的效率與成本。特別是現代架構走向 <code>分散式系統</code> 已經是一種必然的趨勢。</p><hr><h2 id="交付流水線"><a href="#交付流水線" class="headerlink" title="交付流水線"></a>交付流水線</h2><p>流水線 (Pipeline) 承接軟體開發過程中每次的交棒，其中包含了整個開發團隊從功能開發、產品功能測試 (Product Functional Test)、維運功能測試 (Ops Functional Test)、使用者接受測試 (UAT)，整串的流程中，技術面包含很多面向，像是：</p><ul><li><a href="/2017/02/11/AWS/Resource-Provisioning-and-DevOps/">環境建置 (Provisioning)</a><ul><li>基礎建置：Infra as Code</li><li>開發環境：開發人員本地端的環境，現代通常是以容器 (Container) 加上容器編排器 (Container Orchestration)</li><li>功能驗證環境：資源最小化、功能完整性最高、成本最低。麻雀雖小五臟俱全，容器也是首選技術。</li><li>維運功能驗證環境：一般稱非功能性環境，以前我稱為 SVT、RT、PT … 詳細參見：<a href="/2017/03/18/SQA/Stages-In-Software-Testing/">Stages in Software Testing</a></li></ul></li><li>持續整合 (CI)：<ul><li>單元測試 (Unit Test)</li><li><a href="/2018/07/08/DevOps/Artifacts-Management/">產出物管理 (Artifact Managemenet)</a>：Build, Packing, Dockerfile, Version Control… 等.</li><li>程式品質碼驗證</li></ul></li><li>持續部署 (CD)：依據使用者角色（Tester or SRE) 的需求，選擇待部署的版本、配置、環境，執行部署</li></ul><p>簡單羅列一些概念，這些在喬老師的 CDv2.0 也都有類似的整理與想法。</p><p>除了 CI/CD 相關的關鍵技術，團隊協作的紀律與共識也是重要的。其中特別是環境與配置管理部分，這關係到整個團隊協作的流暢度與溝通品質。所以整個持續交付的流水線至關重要。</p><blockquote><p>部署流水線掌握了軟體開發團隊的節奏，就像音樂一樣，音符在穩定的節拍與律動上，詮釋著樂章上每個精彩的音符與呼吸。</p></blockquote><p>如果說整個開發團隊本身也是一種維運 (Ops)，那麼部署流水線就是軟體開發團隊的維運！他的節奏順暢與否，關係著交付價值的速度與品質。</p><!--## 產出物 (Artifact)從開始使用軟體的第一天開始，到後來開始寫程式，如何把寫好的東西交給別人，一直是一件重要的任務。交付的形式很多種，古早的交付 Ship CD (燒錄到光碟片)、交付韌體 (firmware) 到工廠燒錄量產、交付後端服務的部署 (deployment)、前端的 apk / ipa / webpack ... 等方法，交付流水線的過程 `產出物 (Artifact)` 一直是扮演著重要的樞紐。從傳統的壓縮檔，到現在交付的管理 maven, npm, nuget, docker image ... 不管是怎樣的技術與方法，其實在開發過程中就要這樣交給流水線後面的團隊執行任務。產出物讓後續的持續交付流水線可以獨立運作，不需要重新編譯、打包原始碼，而是專注在如何部署到環境、系統架構如何調整成符合的任務需求、如何調整配置 (Config)。在交付流水線中，開發團隊交給一下一個團隊就是測試，下一個則是維運，下一個層次則是多個商業需求。交付就是移植，能夠持續交付的形式與速度，間接的影響後續的測試，不管是手動還是自動。交付給測試、正式環境，除了這兩種常見的交付，另外就是交付商業價值，也就是商業要橫向擴展的時候，交付的正式環境可能不會只有一個，而是會有多個環境。--><!--## 測試是持續交付的第一戰場## 監控與回饋## DevOps--><!--## 摘要 持續交付 2.0* Part 1  * 持續交付 2.0  * 探索價值環  * 快速驗證環  * 持續交付 2.0 的組織文化* Part 2  * 持續交付的軟體系統架構  * 業務需求協作管理  * 部署流水線原則與工具設計  * 利於集成的分支策略* Part 3  * 持續集成（持續整合）  * 自動化測試策略與方法  * 軟件配置管理  * 低風險發佈* Part 4  * 監測與決策  * 大型互聯網團隊的 FT 化  * 小團隊的逆襲之旅  * 研發推動的 DevOps--><hr><h2 id="持續交付的團隊"><a href="#持續交付的團隊" class="headerlink" title="持續交付的團隊"></a>持續交付的團隊</h2><p>在計算機程式語言裡，底下這段程式碼：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = a + b;</span><br></pre></td></tr></table></figure><p>加號 (+) 稱為運算子 (Operator)，意思是把 a, b 這兩個符號的內容，用加法做運算。而等號 (=) 則是指定 (assigement) 運算，將 a + b 的結果指定給 x.</p><p>軟體開發過程，加號與等號類似於內部的 Operating，也就是維運，這個讓團隊之間協作的維運方法，可以稱為持續交付。</p><p>通常講 <code>開發團隊</code> 可能的組成有：產品 (PM)、開發 (Dev)、測試 (Test)、維運 (Ops)。依照這樣單位的組成，交付的形式有底下幾種：</p><ul><li>產品、開發、測試三個單位的交付：產品開發團隊 (不含維運)</li><li>開發、測試、維運的持續交付：開發團隊的 Dev, QA, and Ops，也就是 <a href="https://en.wikipedia.org/wiki/DevOps" target="_blank" rel="noopener">Wikipedia</a> 說明的交集。</li></ul><p>同樣用程式碼來呈現上述的 <code>價值</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value1 = 產品() + 開發() + 測試();</span><br><span class="line"><span class="keyword">int</span> value2 = 開發() + 測試() + 維運();</span><br></pre></td></tr></table></figure><p>但這兩個 values 真的有價值？我覺得這是狹義的開發團隊，把鏡頭稍微 Zoom Out 一點點，看到整個企業，重新定義 <code>產品開發團隊</code>：</p><ul><li>產品開發團隊 (Dev)：產品 ＋ 開發 ＋ 測試</li><li>企業營運團隊 (Ops)：行銷 ＋ 業務 ＋ 維運 ＋ IT ＋ 人資 ＋ 財務 ＋ 法務 ….</li></ul><blockquote><p>整個企業團隊的持續交付 = 產品開發團隊（Dev) + 企業營運團隊 (Ops)</p></blockquote><p>Ops 回饋到 Dev，然後 Ops 會變成開發，Dev 會變成營運，透過回饋機制，由品質建立數量，由數量產生速度，產生倍數的價值。</p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>從上一個世紀阿波羅登陸月球計畫開始之後，MIT 教授 <a href="https://zh.wikipedia.org/zh-tw/%E7%8E%9B%E6%A0%BC%E4%B8%BD%E7%89%B9%C2%B7%E6%B1%89%E5%AF%86%E5%B0%94%E9%A1%BF" target="_blank" rel="noopener">Margaret Hamilton</a> 開始推廣 <code>軟體工程</code> 一詞開始，『交付』在軟體開發團隊裡不是什麼新觀念，到了廿一世紀的今天，隨著行動應用、物聯網的發展，到大數據與機器學習，原本大週期性的交付、不穩定且斷斷續續的交付，因為敏捷開發與 DevOps 的登入，人們才認知到軟體服務因該是有節奏的交付。持續交付 1.0 告訴大家工程方法，影響了廿一世紀的軟體工程；持續交付 2.0 繼承了上一個版本，不只談工程，也談文化，更是眾家之大成。</p><p><code>持續面對改變</code> 是敏捷開發的基本精神與原則，<code>交付價值</code> 則是面對霧卡世界必須思考的。隨著時間的右移，技術不斷推成出新，能夠生存的企業唯一不變的法則是：</p><blockquote><p>用 <code>持續</code> 且穩定的技術與團隊 (節奏)，<code>交付</code> 有商業價值的軟體與服務 (音符)。</p></blockquote><p>天下武功、唯快不破，但是唯有嚴謹的系統架構，有紀律與規矩，才能面對外在瞬息萬變的世界。持續交付 2.0 是本適合企業高管、經理人、團隊一起閱讀討論，也將是下一個軟體工程的經典高牆。</p><p>… 2018/11/11, 寫於雙十一 台北 松山</p><!--優秀的樂手必要的兩個途徑，持續練習、正確的練習。優秀的軟體團隊必要的途徑，持續部署、以業務為目標。十一月七日，台灣雙十一活動也開跑了。### 關鍵字* CI, Continuous Delivery* DevOps, Agile* Architecture, Distributed System, Microservices* Infra as Code (IaC)* Containerization* Conway's Law* Pipeline, Artifacts* SRE--><h2 id="相關書籍"><a href="#相關書籍" class="headerlink" title="相關書籍"></a>相關書籍</h2><ul><li>Continuous Delivery - Jez Humble, David Farley</li><li>Building Microservices - Sam Newman</li><li><a href="https://landing.google.com/sre/books/" target="_blank" rel="noopener">Site Reliability Engineering</a></li><li>Effective DevOp - Jennifer Davis, Ryn Daniels</li><li>第五項修練：學習型組織的藝術與實務 - 彼得·聖吉（Peter M. Senge</li><li>Google軟體測試之道：進行 Google 級的軟體測試</li><li>Design Patterns - GoF</li><li>Designing Distributed Systems - Burns, Brendan</li></ul><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/">Software Development Lifecycle</a></li><li><a href="/2018/03/20/DevOps/First-Step-To-CICD/">導入 CI/CD 的第一步</a></li><li><a href="/2018/04/01/DevOps/How-To-Make-CICD-Quality/">怎樣的 CI/CD 才夠 Quality?</a></li><li><a href="/2018/07/08/DevOps/Artifacts-Management/">Artifacts Management</a></li><li><a href="/2017/02/11/AWS/Resource-Provisioning-and-DevOps/">Resource Provisioning and DevOps</a></li><li><a href="/2017/03/18/SQA/Stages-In-Software-Testing/">Stages in Software Testing</a></li><li><a href="/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/">演講：從緊急事件 談 SRE 應變能力的培養</a></li><li><a href="/2018/03/29/About/2018-Serverless-All-Star/">演講：Ops as Code using Serverless</a></li><li><a href="/2018/08/03/DevOps/An-Introduction-to-SRE/">推薦：Site Reliability Engineering</a></li><li><a href="/2018/12/15/DevOps/TheProblem-In-DevOps-8-Cycle/">DevOps 8 字環的誤區：左環問題</a></li></ul><!--## 參考資料* [雙 11 打趴台灣電商平台！PChome、蝦皮、momo 全掛，帶來哪些商業啟示？][e1][e1]: https://buzzorange.com/techorange/2018/11/12/double-11-in-taiwan/https://www.continuousdelivery20.com/-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年 (2018) 三月，我在公司內完成長達半年的 &lt;a href=&quot;/2018/08/03/DevOps/An-Introduction-to-SRE/&quot;&gt;SRE (Site Reliability Engieering)&lt;/a&gt; 讀書會，快結束時就在盤算下一本候選書，希望激盪團隊更多想法。那時候首選就是當代軟體工程的經典之作：&lt;code&gt;持續交付 (Continuous Delivery)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在讀書會開始不久，有次跟朋友聊到持續部署想法，當時我提到因為時空背景的關係，這幾年各種新的概念與技術快速發展，特別是雲端架構應用、微服務與分散式架構的實踐概念，彷彿不斷的在提醒大家，&lt;code&gt;持續部署&lt;/code&gt; 應該有不同的想法與實踐。同時 DevOps 與敏捷開發 (Agile Development) 概念鋪天蓋地的出現，大家意識到 &lt;code&gt;霧卡世界（VUCA)&lt;/code&gt; 正在驅動整個軟體產業，除了持續部署，持續交付商業價值將面對更大的挑戰！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;戰爭之前，不管做了多少參謀作業，戰爭第一聲槍響的時候，所有計畫都會隨之改變。&lt;/p&gt;
&lt;p&gt;– 美國名將 &lt;code&gt;麥克阿瑟&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;雖然世界變化之快，常常讓人迷失，但變化越快，越要靜下心思考。正當我在思考，是否將這些資訊做通盤整理，彙整成更有意義的文字時，十一月七日早上，是立冬之日，Ruddy 老師在我桌上放了一本書，作者是人稱喬幫主的喬梁老師大作，書名：&lt;code&gt;持續交付 2.0&lt;/code&gt;。當時的我心裡想：『嗯，我想要的，應該都在這裡面了。』&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/DevOps/CDv20/20181107-CDv20.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
    
      <category term="Microservices" scheme="http://rickhw.github.io/tags/Microservices/"/>
    
      <category term="Continuous Delivery" scheme="http://rickhw.github.io/tags/Continuous-Delivery/"/>
    
      <category term="Continuous Deployment" scheme="http://rickhw.github.io/tags/Continuous-Deployment/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Distributed Consensus" scheme="http://rickhw.github.io/tags/Distributed-Consensus/"/>
    
      <category term="Conway&#39;s Law" scheme="http://rickhw.github.io/tags/Conway-s-Law/"/>
    
      <category term="Continuous Integration" scheme="http://rickhw.github.io/tags/Continuous-Integration/"/>
    
      <category term="Configuration" scheme="http://rickhw.github.io/tags/Configuration/"/>
    
      <category term="Version Control" scheme="http://rickhw.github.io/tags/Version-Control/"/>
    
      <category term="Artifact Management" scheme="http://rickhw.github.io/tags/Artifact-Management/"/>
    
  </entry>
  
  <entry>
    <title>Chaos Engineering (混沌工程)</title>
    <link href="http://rickhw.github.io/2018/10/08/DevOps/Chaos-Engineering/"/>
    <id>http://rickhw.github.io/2018/10/08/DevOps/Chaos-Engineering/</id>
    <published>2018-10-08T10:53:00.000Z</published>
    <updated>2018-10-10T06:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些關於 Chaos Engineering 的資料。</p><a id="more"></a><!--# 前言- 當代架構和基礎設施通常是變動的、短暫的、不可預測的（聽起來根本是來亂的 XD)。- 災難還原 (DR) 通常執行要很久、很貴（而且本身就是個災難）- 每個 IT Team 都要做 Chaos Engineering，但是層次可能不一樣，有的專注在 OS / Networking Level，有的專注在應用層 (App)- Chaos Engineering 是一個可以探索和管理未知問題的方法，進而提升系統的韌性- 要玩 Chaos Engineering 請先做好監控、決定哪些服務是最重要的。。。否則混屯工程會變混亂工程。。。--><!--# 混沌Chaos 中文意思是 `混沌`、`混亂`--><hr><h1 id="經典好文"><a href="#經典好文" class="headerlink" title="經典好文"></a>經典好文</h1><p>底下整理一些我個人讀過的文章、演講，並摘錄一些重點。</p><hr><h3 id="Intro-to-Chaos-Engineering"><a href="#Intro-to-Chaos-Engineering" class="headerlink" title="Intro to Chaos Engineering"></a><a href="https://www.youtube.com/watch?v=qHykK5pFRW4" target="_blank" rel="noopener">Intro to Chaos Engineering</a></h3><iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/qHykK5pFRW4?showinfo=0&amp;ecver=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>By Tammy, she is</p><ul><li>Principal Site Reliability Engineer at #remlin</li><li>former <code>Senior SRE Manager</code> at Dropbox</li><li>and co-founder of <code>GirlGeekAcademy</code></li></ul><p>Published: 2018/02/06</p><hr><h3 id="Chaos-Engineering-Compaines-People-Tools-amp-Practices"><a href="#Chaos-Engineering-Compaines-People-Tools-amp-Practices" class="headerlink" title="Chaos Engineering: Compaines, People, Tools &amp; Practices"></a><a href="https://coggle.it/diagram/5a229c7860c0c20001ae6caf/t/chaos-engineering-companies%2C-people%2C-tools-practices/1960e86c369b09c4deac3227885bb073ae258e637b1b9e57be274125ac6e57b2" target="_blank" rel="noopener">Chaos Engineering: Compaines, People, Tools &amp; Practices</a></h3><p>一張很大的 mindmap (如下圖) 呈現 Chaos Engineering 相關的公司、推廣的人、工具、實踐原則 … 等資訊</p><p><img src="/images/ChaosEngineering/CHAOS_ENGINEERING_Companies_People_Tools__Practices_20181008.png" alt=""></p><hr><h3 id="Awesome-Chaos-Engineering"><a href="#Awesome-Chaos-Engineering" class="headerlink" title="Awesome Chaos Engineering"></a><a href="https://github.com/dastergon/awesome-chaos-engineering" target="_blank" rel="noopener">Awesome Chaos Engineering</a></h3><p>如標題，我只能用 Awesome 來形容！這個 github 上整理了大部分 Chaos Engineering 的經典資料，包含文化面、書本、教育、工具、論文、Blog、新聞、研討會 … 等，幾乎想得到的，都可以在這裡找到。如果想要深入了解 Chaos Engineering 到底是什麼，把這裡的文章爬過就得到了！</p><hr><h3 id="混沌工程实践经验：如何让系统在生产环境中稳定可靠"><a href="#混沌工程实践经验：如何让系统在生产环境中稳定可靠" class="headerlink" title="混沌工程实践经验：如何让系统在生产环境中稳定可靠"></a><a href="http://www.infoq.com/cn/articles/chaos-engineering-in-production" target="_blank" rel="noopener">混沌工程实践经验：如何让系统在生产环境中稳定可靠</a></h3><p>這篇文章整理提到在正式環境中面對的挑戰以及問題，特別像是 Netflix 這種公司。底下是自 Netflix 2013 QCon 很經典的圖：</p><p><img src="/images/ChaosEngineering/2013QCon-Nexflix.png" alt=""></p><p>我很喜歡文章中的這兩句話，常常拿來提醒自己：</p><ul><li>不是你選擇那一刻，是那一刻選擇你，而你唯一能選擇的就是作好準備。 (You don’t choose the moment, the moment chooses you.)</li><li>混屯工程不是製造問題，是揭露問題。 (You only choose how prepared you are when it does.)</li></ul><p>Chaos 談的很多是 <code>連鎖性</code> 問題，這點在 SRE CH22 有類似的介紹，也可以說是我在談<a href="/2018/03/18/SQA/Gossip-System-Testing/">系統測試</a> 的概念。</p><ul><li>原文：<a href="https://blog.codecentric.de/en/2018/07/chaos-engineering/" target="_blank" rel="noopener">Chaos Engineering – withstanding turbulent conditions in production</a> - 2018/07/05</li></ul><hr><h3 id="Chaos-Engineering的历史、原则以及实践"><a href="#Chaos-Engineering的历史、原则以及实践" class="headerlink" title="Chaos Engineering的历史、原则以及实践"></a><a href="http://www.infoq.com/cn/articles/chaos-engineering-the-history-principles-and-practice" target="_blank" rel="noopener">Chaos Engineering的历史、原则以及实践</a></h3><p>這篇整理了很多 Chaos Engineering 相關的資料，入門必讀。底下摘錄一些重點：</p><ul><li>混沌工程最先出现在互联网巨头公司中，这些公司拥有大规模的分布式系统，因为这些系统太过复杂，他们需要一些新的手段来测试它们。</li><li>为什么要有目的地搞破坏？就像打疫苗可以预防疾病一样，我们可以通过混沌工程来提升系统的免疫能力。我们向系统注入故障（比如延迟、CPU故障、网络黑洞），找出系统潜在的弱点。</li><li>这些试验增强了我们应对故障的能力，就像防火演习一样。通过有目的地搞破坏，可以识别出未知的问题。</li><li>Peter Deutsch提出的分布式系统八大谬论概括了程序员新手可能对分布式系统做出的错误假设：<ul><li>网络是可靠的、延迟是零、带宽是无限的、网络是安全的</li><li>拓扑结构不会变、存在管理员这样的角色、传输成本是零、网络是同质的</li></ul></li><li>混沌工程執行次序：已知、未知的排列組合<br><img src="/images/ChaosEngineering/Execute-ChaosEng.png" alt=""></li></ul><p>Published: 2018/04/08</p><hr><h3 id="Chaos-Engineering-for-the-Business"><a href="#Chaos-Engineering-for-the-Business" class="headerlink" title="Chaos Engineering for the Business"></a><a href="https://medium.com/russmiles/chaos-engineering-for-the-business-17b723f26361" target="_blank" rel="noopener">Chaos Engineering for the Business</a></h3><p>這篇整理曾商業角度來看道 Chaos Engineering 這個很技術性、很工程性的任務，他整理六個點，其中第四點是工程師一定要知道的。</p><p>底下摘錄重點：</p><ul><li>Tip №1: Don’t be afraid to drop the term</li><li>Tip №2: It’s about Confidence, not Breaking Things</li><li>Tip №3: Put Blast Radius and Learning Front and Centre</li><li>Tip №4: Not just about Infrastructure, or even just the Technical<br><img src="/images/ChaosEngineering/Chaos-with-layers.png" alt=""></li><li>Tip №5: It doesn’t have to be a big, up-front investment</li><li>Tip №6: Know the benefits, know the limitations; don’t over-promise!</li></ul><hr><h2 id="相關詞彙"><a href="#相關詞彙" class="headerlink" title="相關詞彙"></a>相關詞彙</h2><p>Chaos Engineering 的詞彙很多，底下是我在文章中常看到的，僅供參考：</p><ul><li>理論<ul><li><a href="https://zh.wikipedia.org/wiki/%E6%B7%B7%E6%B2%8C%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">Chaos theory, 混沌理論</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E4%BD%93%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">三體問題</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%B8" target="_blank" rel="noopener">量子力學</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%9D%B4%E8%9D%B6%E6%95%88%E5%BA%94" target="_blank" rel="noopener">蝴蝶效應</a></li><li>Antifragile (反脆弱): Chaos 的目的是什麼？反脆弱應該是其一。</li><li><a href="https://zh.wikipedia.org/wiki/%E9%BB%91%E5%A4%A9%E9%B5%9D%E6%95%88%E6%87%89_(%E6%9B%B8%E7%B1%8D)" target="_blank" rel="noopener">黑天鵝效應 (black swan)</a>：在一群白天鵝中出現一隻黑天鵝(black swan)，被解讀為「最不可能發生但總是發生的事」。<ul><li>所謂黑天鵝，是指看似極不可能發生的事件，它具三大特性：<code>不可預測性</code>、<code>衝擊力強大</code>、以及，<code>一旦發生之後，我們會編造出某種解釋，使它看起來不如實際上那麼隨機，而且更易於預測</code>。</li><li>Google的驚人成就就是一個黑天鵝事件；九一一也是。</li><li>為什麼要等到事情發生之後，我們才認得出黑天鵝現象呢？部分的答案是，在應該注意普遍現象時，人們長久以來卻習慣注意特定事件。我們習慣注意已經知道的事情，卻一而再再而三忽略我們所不知道的事情。</li></ul></li></ul></li><li>工程方法<ul><li>Chaos Monkey: Netflix 發明的搗亂方法</li><li>SRE: Chaos Engineering 跟 SRE 有密不可分的關係</li><li>Distributed Systems (分散式系統): 之所以會有這樣的需求，肇因於分散式系統這麼複雜的東西被大量實踐。</li><li>Microservices: 微服務是分散式系統的實踐方法之一。也是現代最流行的架構，想當然耳，他一定要面對 Chaos Engineering.</li><li>Disaster Recovery (災難還原)</li><li>GameDay: 大家來找碴的一天</li><li>resilience (韌性): 不倒翁</li><li>elasticity (彈性): 我進來啦 我又出去啦</li></ul></li></ul><!--認同意外存在的可能性，並且利用他。--><hr><h2 id="其他資訊"><a href="#其他資訊" class="headerlink" title="其他資訊"></a>其他資訊</h2><p>相關資訊很多，底下是我看過的。如果你不知道從哪開始，那就從 <a href="https://github.com/dastergon/awesome-chaos-engineering" target="_blank" rel="noopener">Awesome Chaos Engineering</a> 開始，這裡整理的算是最完整的。</p><ul><li><a href="https://github.com/Netflix/chaosmonkey" target="_blank" rel="noopener">Netflix 在 github 的 Chaos Monkey</a></li><li><a href="https://github.com/chaoseng/wg-chaoseng" target="_blank" rel="noopener">Chaos Engineering Working Group</a>: Chaos 加入 CNCF 討論群</li><li><a href="https://www.infoq.com/presentations/chaos-engineering-resilient-systems" target="_blank" rel="noopener">Chaos Engineering: Why the World Needs More Resilient Systems</a></li><li><a href="https://www.slideshare.net/hornsby/chaos-engineering-why-breaking-things-should-be-practised-93761039" target="_blank" rel="noopener">Chaos Engineering: Why Breaking Things Should Be Practised</a></li><li><a href="https://www.youtube.com/watch?v=qHykK5pFRW4" target="_blank" rel="noopener">Intro to Chaos Engineering</a></li><li><a href="http://www.infoq.com/cn/articles/chaos-engineering-the-history-principles-and-practice" target="_blank" rel="noopener">Chaos Engineering 的历史、原则以及实践</a></li><li><a href="https://www.slideshare.net/hornsby/chaos-engineering-why-breaking-things-should-be-practised-93761039" target="_blank" rel="noopener">Chaos Engineering: Why Breaking Things Should Be Practised</a></li><li><a href="https://cloudacademy.com/blog/what-is-chaos-engineering-failure-becomes-reliability/?utm_source=facebook&amp;utm_medium=social&amp;utm_campaign=blog_tyler" target="_blank" rel="noopener">What is Chaos Engineering? Failure Becomes Reliability</a></li><li><a href="https://thenewstack.io/how-chaos-engineering-can-drive-kubernetes-reliability/" target="_blank" rel="noopener">How Chaos Engineering Can Drive Kubernetes Reliability</a></li><li><a href="https://github.com/dastergon/awesome-chaos-engineering" target="_blank" rel="noopener">Awesome Chaos Engineering</a>: A curated list of awesome Chaos Engineering resources.</li><li><a href="https://www.youtube.com/watch?v=rgfww8tLM0A" target="_blank" rel="noopener">AWS re:Invent 2017 - Nora Jones Describes Why We Need More Chaos - Chaos Engineering, That Is</a></li><li><a href="https://www.infoq.com/presentations/netflix-chaos-microservices" target="_blank" rel="noopener">Mastering Chaos - A Netflix Guide to Microservices</a></li><li><a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noopener">Resilience4j</a></li><li>書<ul><li><a href="http://www.oreilly.com/webops-perf/free/chaos-engineering.csp" target="_blank" rel="noopener">Chaos Engineering - Building Confidence in System Behavior through Experiments</a></li></ul></li></ul><!--## 相關議題* [【键客行】如何应对不可知的未来](https://www.youtube.com/watch?v=LQGJZNok8SE) - 《黑天鹅》《反脆弱》《随机漫步的傻瓜》-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一些關於 Chaos Engineering 的資料。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Antifragile" scheme="http://rickhw.github.io/tags/Antifragile/"/>
    
      <category term="Chaos Engineering" scheme="http://rickhw.github.io/tags/Chaos-Engineering/"/>
    
      <category term="Resilience" scheme="http://rickhw.github.io/tags/Resilience/"/>
    
      <category term="Disaster Recovery" scheme="http://rickhw.github.io/tags/Disaster-Recovery/"/>
    
  </entry>
  
  <entry>
    <title>人力招募 - 五、確認報到時程</title>
    <link href="http://rickhw.github.io/2018/10/07/Management/Hiring-Step5-Offer/"/>
    <id>http://rickhw.github.io/2018/10/07/Management/Hiring-Step5-Offer/</id>
    <published>2018-10-06T18:21:00.000Z</published>
    <updated>2018-12-22T05:35:59.396Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇 <a href="/2018/09/27/Management/Hiring-Step4-Salary/">薪資</a> 討論商討薪資背後的考量，這一篇整理薪資確認後要做的後續工作：<code>確認報到時程</code></p><a id="more"></a><h1 id="確認時間"><a href="#確認時間" class="headerlink" title="確認時間"></a>確認時間</h1><p>確認報到最關鍵的有兩點：第一個是 <a href="/2018/09/27/Management/Hiring-Step4-Salary/">薪資</a>，接下來就是 <code>時間</code>。報到程序要確認以下時間點：</p><ol><li>確認 <code>應試者</code> 收到 Offer 的時間</li><li>確認 <code>應試者</code> 回覆 Offer 最後時間</li><li>預計報到時間</li></ol><h2 id="預計收到-Offer-的時間"><a href="#預計收到-Offer-的時間" class="headerlink" title="預計收到 Offer 的時間"></a>預計收到 Offer 的時間</h2><p>首先是 <code>預計收到 Offer 的時間</code>。這屬於內部溝通與程序的問題，不管是用人主管對上層主管、用人主管對 HR、HR 對於這個人的考慮等。如果前面的溝通都有到位，那麼這剩下的應該是蓋章程序。</p><p>如果薪資數字高於一般職等，或者要用的人屬於特殊職務（像是顧問、Director/VP/CTO 級別）、或者有特殊條件（例如要遠程、外國人、身障），用人主管要跟上層主管先溝通好，討論好劇本，都確認好之後，最好先跟 HR、VP、CEO 口頭、電話報告說明，讓他們心裡有個底。</p><p>要注意的是，通常用人的簽呈都要簽到上層主管，例如簽到 VP、CTO、CEO 等，所以如果他們剛好不在辦公室，用人主管要先請 HR 協助確認，可以透過電子簽核方式確認。</p><p>這些都確認後，HR 發出正式的 <code>Offer Letter</code>，也就是一般說的 <code>聘書</code> (不管是 Email 還是掛號信)，都要跟 HR 確認已經送出。公司應該會有制式格式，內容是不能有錯的。然後最好能確認 <code>應試者</code> 已經收到。</p><p>整個招募過程，大部分都是口頭，最後確認的 <code>Offer Letter</code> 則代表法律上的承諾書，這段絕對不能有問題，否則就功虧一簣。</p><h2 id="回覆-Offer-的最後時間"><a href="#回覆-Offer-的最後時間" class="headerlink" title="回覆 Offer 的最後時間"></a>回覆 Offer 的最後時間</h2><p>第二個 <code>回覆 Offer 的最後時間</code>。用人主管心裡要有這個時間點，我的做法是直接先跟 HR 約好，註記在 Calendar 上。要預期這段時間可能發生的意外狀況，以及應變措施。</p><p>如果在預期時間之內，應試者沒有回覆 Offer 確認函，表示應試者還在猶豫，或者在原公司離職時遇到問題。如果應試者還在猶豫，表示之前在討論薪資、生涯規劃、價值觀時，沒有真的想清楚、釐清楚心裡的疑惑，或者面試官沒有跟他溝通清楚。這種狀況，用人主管必須主動採取行動，先請 HR 先進行了解、親自電話關心、甚至約他吃飯，展現誠意與熱情，協助應試者釐清他的疑慮。</p><p>如果是對於工作內容、生涯規劃有疑慮，用人主管可以用前輩、朋友身份，客觀的分享經驗、舉例如何面對這些問題，同時也讓他知道，新環境團隊、主管都會協助他成長，不用擔憂。如果是遇到離職上的問題，例如人情、慰留等屬於人資範疇，則請 HR 出面協助，藉由 HR 的專業給予推力。這時候用人主管藉由這些過程，也可以跟 HR 建立良好的協作關係。</p><p>前述狀況，還有的是突發狀況，例如應試者家人突然住院、出車禍、應試者剛好有安排旅遊行程 … 。這時候，一定一定要站在對方立場，給予最大的信任與協助。如果是意外事故，一定要去醫院探視，給予關心與支持。</p><p>另外最難處理的就是：他拿到其他更吸引他的 Offer，像是薪資更好、產業是更想要的、交通更方便的 … 等。這種形況其實很容易遇到，特別是很多新創是打烏賊戰的搶人戰術，例如直接薪資高 20-50%、甚至多 100%、200%，然後要應試者隔週馬上 Onboard … 類似這樣的，這時候用人主管唯一剩下的武器是：動之以情。</p><blockquote><p>三國時代劉備愛才而三顧茅廬，招納軍師諸葛亮，留下千古佳話，也為劉備帶來一堅強臂膀。如果他真的是人才，這時候身為用人主管的你，必須起愛才之心，放下身段，不管過去你的戰績有多麽的輝煌，戰術有多麽彪悍。得英才良將，才能幫你打天下！</p></blockquote><p>如果在這個階段最後的結果是：他打算去另外一家。不管怎樣，站在朋友以及前輩的角度支持他。千萬不要酸言酸語，轉身要漂亮。未來或許在其他場合會再碰面，讓彼此在心裡留下好的映像。</p><h2 id="預計報到時間"><a href="#預計報到時間" class="headerlink" title="預計報到時間"></a>預計報到時間</h2><p>第三個是 <code>預計報到時間</code>。</p><p>這時間通常會由應試者提出來。要注意的是有些人會想要一些時間休息，例如離職後一個月再報到。這時候用人主管要自我評估任務的時間與時程、資源的迫切性、後續相關的教育訓練安排 … 等。通常我會建議讓應試者有充分休息再來。</p><p>如果第二點的意外狀況有發生，要重新考慮報到的時間。</p><p>報到的時間要跟團隊討論，特別是有一起參與面試的成員。報道後的相關訓練工作、如何融入團隊 … 等。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>為山九仞，只剩這一哩路。千萬不要因為薪資談妥了，報到時間談好了，人就會乖乖的來上班，意外狀況總會發生在意料不到的時刻。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募 (Hiring)</a></li><li><a href="/2018/08/28/Management/Hiring-Step0-Initial/">人力招募 - 零、準備篇：確認需求、條件、定位、市場狀況</a></li><li><a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">人力招募 - 一、萬事起頭難：面試名單從哪來？</a></li><li><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">人力招募 - 二、見面談：招募第一關 面試</a></li><li><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">人力招募 - 三、深度對談：價值觀</a></li><li><a href="/2018/09/27/Management/Hiring-Step4-Salary/">人力招募 - 四、客觀談論：薪資</a></li><li><a href="/2018/10/07/Management/Hiring-Step5-Offer/">人力招募 - 五、最後確認：報到時程</a></li><li><a href="/2018/10/26/Management/Hiring-Step6-Onboard/">人力招募 - 六、到職後：訓練、目標、評核</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇 &lt;a href=&quot;/2018/09/27/Management/Hiring-Step4-Salary/&quot;&gt;薪資&lt;/a&gt; 討論商討薪資背後的考量，這一篇整理薪資確認後要做的後續工作：&lt;code&gt;確認報到時程&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="經營管理" scheme="http://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="用人之道" scheme="http://rickhw.github.io/tags/%E7%94%A8%E4%BA%BA%E4%B9%8B%E9%81%93/"/>
    
      <category term="Hiring" scheme="http://rickhw.github.io/tags/Hiring/"/>
    
  </entry>
  
  <entry>
    <title>人力招募 - 四、客觀談論：薪資</title>
    <link href="http://rickhw.github.io/2018/09/27/Management/Hiring-Step4-Salary/"/>
    <id>http://rickhw.github.io/2018/09/27/Management/Hiring-Step4-Salary/</id>
    <published>2018-09-26T18:21:00.000Z</published>
    <updated>2018-12-22T05:35:50.756Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇簡單整理了招募的 <a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">第三篇：價值觀</a>，這一篇繼續整理很多人很在意的：<code>薪資</code>。</p><p>盡量用客觀角度來討論這件事情，但這是不容易的。</p><a id="more"></a><h1 id="預期與期待"><a href="#預期與期待" class="headerlink" title="預期與期待"></a>預期與期待</h1><p>薪資的面相大概有這三個：</p><ul><li>市場行情 (客觀)</li><li>預期薪資 (資方)</li><li>期待薪資 (勞方)</li></ul><p>先針對 <code>預期</code> 與 <code>期待</code> 兩個做排列組合，會有以下三種：</p><h2 id="期待-預期"><a href="#期待-預期" class="headerlink" title="期待 = 預期"></a>期待 = 預期</h2><p>這叫 <code>兩情相悅，皆大歡喜</code>，雙方對於薪資都有一致的看法，但對於用人主管來講，這是最期待的。不過實際上很少這樣的，通常是下一個 Case。</p><h2 id="期待-gt-預期"><a href="#期待-gt-預期" class="headerlink" title="期待 &gt; 預期"></a>期待 &gt; 預期</h2><p>其實這是最常遇到的狀況，因為往往很難找到 100% 符合條件的人，往往必須在時間與空間條件之下，做取捨。從幾個面向來看待這樣的比較：<code>用人主管</code>、<code>企業</code>、<code>面試者</code>、<code>市場</code>。</p><h3 id="用人主管的角度"><a href="#用人主管的角度" class="headerlink" title="用人主管的角度"></a>用人主管的角度</h3><p>先從用人主管的角度來談：<code>期待 &gt; 預期</code>，也就是面試者想要的薪資數字，超過用人主管判斷的數字。</p><p>這表示用人主管覺得 Candidate 進來後，短時間（例如：半年以內）的貢獻會低於期待。換言之，如果在面試過程中，<code>技能、經驗、專業</code> <sup><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">參見一面</a></sup> 跟已經在職的人比較起來，可能無法短時間有產能，直接做出直接貢獻，或者是自主學習能力無法跟上團隊步法，這樣都算是低於期待的；或者相關經驗短時間之內無法面對任務需求，需要另外安排人力協作。這時候，如果用人主管急需用人，可能會請 HR 協商看看，否則就是放棄。換言之，之前的時間成本全部會浪費，所以如果一面就發現薪資跟期待有落差，通常會提早結束，避免後續的時間成本。</p><p>如果薪資期待過高，但卻是 <code>可造之材（有潛力）</code>、<code>資質佳</code>、<code>價值觀</code>、<code>有想法</code>，通常會改以 <code>協商</code> 或 <code>投資</code> 的角度切入。</p><p>協商是試著跟 Candidate 理性分析面試過程的狀況，給予建議，建立合作互信的關係。通常這樣的人，穩定表現之後，如果有 Mentor (導師) 協助，很快會漸入佳境，表現也會往上爬，相對的調薪幅度會很快。因為是有潛力的可造之材，到哪都是能發會長才、穩定成長。除了用人主管的想法，要考慮的是，面試者是否有對於取捨的價值觀，以及其他背景條件（像是家裏經濟困難、意外事件等）。這樣的 Case，用人主管心裡會有一把尺，知道公司現在投資在這個人身上，要協助他未來的成長與學習，讓他能夠在團隊與組織裡發光發熱，為他創造一個舞台。</p><p>對於企業來說，通常這樣的角色稱之為 <code>投資</code>，這也是很多 Startup 招募用人的手段用：<code>砸錢、拉高市場行情</code>。Startup 在初期階段，目的是找到的都是火力強大的傭兵，但如果沒有謹慎的過濾，或者面試者太過會包裝，往往會造成破壞行情的薪資數字。</p><p>這幾年雲端、大數據、人工智慧、區塊鏈在流行的狀況之下，加上一些熱錢在市場滾動來回，造成這些相關產業薪資水準大亂鬥的情況，出現很多破壞行情的數字，例如年資不到一年，也沒有做過很大系統的應徵者，開價百萬年薪（新台幣），只因為做過區塊鏈、學過一些 ML Pattern，但連個基本的程式迴圈都寫不太出來，能夠真的貢獻什麼東西卻不知所以然。</p><h3 id="面試者的角度"><a href="#面試者的角度" class="headerlink" title="面試者的角度"></a>面試者的角度</h3><p>面試者提出期待數字時，如果接到 HR 或者主管來電 <code>討價還價</code>，這時候要做一些判斷與思考。底下是我的看法，提供參考。</p><p>先想想為什麼會來討價還價：</p><ul><li>只是單純殺價？你判斷的出來？</li><li>來電可以說出理由說服你？你有被說服？</li><li>你自己夠強大？所以能開出高價？</li></ul><p>其實不管是剛出社會，還是工作一段時間，面試之前，要做幾件事情：</p><ul><li>好好了解自己，誠心地問問自己倒底想要變成怎樣的人？過怎樣的生活？三年後？五年後？十年後？</li><li>自己擁有的（經驗、技術、經驗、專業）對於 JD 上寫的條件，是小於預期、符合預期、還是超過預期？這是談薪資的基本籌碼。<ul><li>進入後是去做事？還是去教人？還是去學習？</li><li>如果是新鮮人，可以打聽一下市場行情，對於數字要有概念。</li></ul></li><li>要好好看看這家公司的資料，包含產品、經營理念、未來方向、相關技術、規模 …. 等。</li><li>要達成上述，還缺什麼？怎麼做到？需要哪一些協助？公司可以提供什麼資源？</li></ul><p>這些面試過程，發現這些東西如果跟自己想要的很接近，發現主管的理念是可以接受的，公司價值觀是和自己一樣的，那麼公司會往正向走，主管會協助你成長。那麼不管成功與否，這都會是值得的，用底下這段話來想：</p><blockquote><p>前進不必遺憾，若是美好，叫做精彩；若是糟糕，叫做經歷！</p></blockquote><p>但這些的前提是：你要認同這家公司的價值與目標、認同主管的想法。而這家公司與主管是有誠信的（這也是面試者要有的判斷力）</p><p>如果這些都認同，那麼可以試著這樣做：</p><ul><li>問問 HR 或者跟面試官討論落差的原因，如果得到的回覆是合理正向的，那麼或許可以先蹲後跳。如果很明顯的是在凹人，拒絕可以不用客氣。</li><li>告訴面試官對自己未來的計畫與對公司的期待，例如計畫三個月後考上某證照，期待一年後調薪 20%</li><li>你也可以告訴面試官說，用具體的目標計劃回應面試官，讓對方覺得你是可造之材。</li></ul><p>這些問題，如果 HR or 面試主管願意跟你討論，這或許是個良好的開始，未來才有機會為自己爭取該有的權利。如果資方採取的是單向措施，不給問，那麼就不要考慮了。</p><p>回到這段一開始提到的，當 HR 跟你談價碼的時候，要想想看自己的籌碼在哪？</p><h2 id="期待-lt-預期"><a href="#期待-lt-預期" class="headerlink" title="期待 &lt; 預期"></a>期待 &lt; 預期</h2><p>這種 Case 不多，可能是剛出社會的新鮮人會比較有。對於一個良心企業，不應該出現這種事情。</p><h2 id="市場行情"><a href="#市場行情" class="headerlink" title="市場行情"></a>市場行情</h2><p>市場行情是個現實的東西，是用人主管、企業主談薪資過程都要面對的問題。一些大企業 HR 會有這類的計算公式，從年齡、學歷、年資、工作背景、企業的分數、潛力、市場行情 …. 等，然後計算出面試者應該落在的範圍，然後給定薪資水準。</p><p>但薪資行情其實怎麼談都無法客觀，有人說技術可以買、流程可以買、制度可以買、人可以買、產品可以買、公司可以買，但是我常用密碼學的概念來講：只要是時間買不到的價值，就是黃金。你無法買到一個 42 億年解不開演算法，買得到就價值連城。</p><p>所以需要花超過 <code>三年</code> 學習累積的技術、流程、制度、經驗，對我來講就是有價值得。為什麼是三年？因為三年剛好是一個新創事業邁入發展中階段的過程，可以進入這階段，代表企業有機會擴大、往上發展，代表需要扎實的技術跟底才能打造出來。另外三年其實也是職場移轉的關鍵年，很多人會在這一年開始蠢蠢欲動，嘗試改變、走出去。</p><h2 id="Offer-確認"><a href="#Offer-確認" class="headerlink" title="Offer 確認"></a>Offer 確認</h2><p>一般大公司 HR 會有一套公式化談法，所以通常用人主管只要給予薪資範圍、預期職等，然後面試的分數，後續就會交給 HR 去談。</p><p>應試者開的價碼很高，主管很想用這個人，通常用人主管會主動跟 HR 討論，爭取機會。雙方談好後，再請 HR 後續接手與應試者協商討論。</p><p>當然有時候用人主管會被 HR 打槍，只能給到一定的範圍後就無法談了，只能透過 HR 跟應試者討論了。</p><p>新創公司的 HR 可能就沒有那麼好的計算工具，或者制度尚未建立，通常會盡力協助用人主管與應試者溝通，甚至請用人主管直接與應試者討論（電話、Email、私下吃飯），透過展現誠意，力邀加入。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>薪資，是很主觀的東西。但為了客觀，常常需要有一些類比。把人貼標籤是很糾結的，跟玩三國誌一樣，直接標上武力、智力、體力、政治力 … 差不多就是那樣，然後必須不帶感情，在短短的面試過程中，貼標籤更是困難。</p><p>人確定了，薪資確定了，下一篇整理的是：<a href="/2018/10/07/Management/Hiring-Step5-Offer/">第五篇、報到時程</a></p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募 (Hiring)</a></li><li><a href="/2018/08/28/Management/Hiring-Step0-Initial/">人力招募 - 零、準備篇：確認需求、條件、定位、市場狀況</a></li><li><a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">人力招募 - 一、萬事起頭難：面試名單從哪來？</a></li><li><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">人力招募 - 二、見面談：招募第一關 面試</a></li><li><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">人力招募 - 三、深度對談：價值觀</a></li><li><a href="/2018/09/27/Management/Hiring-Step4-Salary/">人力招募 - 四、客觀談論：薪資</a></li><li><a href="/2018/10/07/Management/Hiring-Step5-Offer/">人力招募 - 五、最後確認：報到時程</a></li><li><a href="/2018/10/26/Management/Hiring-Step6-Onboard/">人力招募 - 六、到職後：訓練、目標、評核</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇簡單整理了招募的 &lt;a href=&quot;/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/&quot;&gt;第三篇：價值觀&lt;/a&gt;，這一篇繼續整理很多人很在意的：&lt;code&gt;薪資&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;盡量用客觀角度來討論這件事情，但這是不容易的。&lt;/p&gt;
    
    </summary>
    
      <category term="經營管理" scheme="http://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="用人之道" scheme="http://rickhw.github.io/tags/%E7%94%A8%E4%BA%BA%E4%B9%8B%E9%81%93/"/>
    
      <category term="Hiring" scheme="http://rickhw.github.io/tags/Hiring/"/>
    
  </entry>
  
  <entry>
    <title>事件管理與康威定律</title>
    <link href="http://rickhw.github.io/2018/09/23/DevOps/Incident-Management-And-Conways-Law/"/>
    <id>http://rickhw.github.io/2018/09/23/DevOps/Incident-Management-And-Conways-Law/</id>
    <published>2018-09-23T04:43:00.000Z</published>
    <updated>2018-10-09T08:50:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>補充在 <a href="/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/">DevOpsDay</a> 演講中，為啥在會特別強調 SRE 是面對落地的架構，而不是設計架構？這段內容本來是放在 Slide 要講的，後來拿掉了。我用 <code>樂團總譜</code>、<code>練團溝通</code> 來比喻 <code>架構圖呈現</code>、<code>團隊溝通</code>，其實要表達的是 <code>康威定律</code>：</p><blockquote><p>系統架構與組織有著一定的關係，同時這關係會帶來團隊溝通成本問題。</p></blockquote><a id="more"></a><h2 id="總譜、落地的架構"><a href="#總譜、落地的架構" class="headerlink" title="總譜、落地的架構"></a>總譜、落地的架構</h2><p>恩，基本的想法是這樣：很多人換一個工作，進到一家新公司之後，『通常（頻率副詞，80%）』公司都已經有一個既有的系統在線上跑，這系統為公司帶來獲利與營收，系統一定是已經落地（不然你薪水哪來？），通常立即性的需求不是『設計』，而是 <code>了解現況</code>，然後既有架構之上，進行穩定且持續的改善 。</p><p>這個情境，基本上適合大多數的人，因為有能力設計架構的架構師不多，從頭開始設計的機會更少。通常面對已經上線的人（SRE or Team）是機率更高的，所以理解 <code>已經落地的架構</code> 這件事是必然的。因為：</p><blockquote><p>很多時候是連現況的了解，都很不清楚，是要怎麼救火？</p></blockquote><p>換一個領域來比喻：音樂與總譜 (也是我演講中本來要提的)</p><p>大部分的樂手，都在練別人寫好的歌，練歌要有樂譜，樂譜可以用買的，買不到要自己想辦法 <a href="http://rickmidi.blogspot.com/2008/07/blog-post_14.html" target="_blank" rel="noopener">採譜 (transcribe)</a>。照譜練是基本的，不管是啥樂手。一般的表演者 (樂手 + 歌手) 都是照著已經成形的歌曲彈奏、演奏、演唱，換言之，<code>樂譜</code> (詞 + 曲 + 編曲) 就是表演者已經確立的資訊。總之：</p><blockquote><p>一定要有譜（一定要有架構圖）</p></blockquote><p>對樂團的樂手來講，不管是鍵盤、吉他、Bass、鼓手、Vocal、和聲、弦樂、銅管 …. <a href="http://rickmidi.blogspot.com/2011/01/blog-post.html" target="_blank" rel="noopener">樂團總譜</a> 就是大家溝通的介面。而這裡的 #總譜 對應到系統就是 #架構圖。總譜是已知、落地的資訊，所有人都以這為主，系統架構是已經在線上跑、on Production，大家在溝通商業需求時，腦袋裡要有這張圖。</p><p>總譜 的舉例，本來是在演講的內容之一，後來怕大家聽不懂，先拿掉了，基本上是從 <a href="/2018/01/07/DevOps/Emergency-Response/">2</a> 延伸出來的想法。因為看過太多雞同鴨講的討論，這現象在練團過程中，有著一模一樣的現象，常常是在浪費時間。</p><h2 id="即興、逆向工程"><a href="#即興、逆向工程" class="headerlink" title="即興、逆向工程"></a>即興、逆向工程</h2><p>有能力的樂手，會依照歌曲架構，做即興，英文術語叫 JAM、Improvisation。在音樂中，如果樂團要即興演奏，通常要有基本的架構，在音樂中稱為 #曲式 (Form，這是一門課)，常用的曲式是藍調 12 小節、8 小節，爵士樂中的 32 小節形式。曲式除了長度，也包含和弦進行結構。如果即興出來的句子對應到商業需求，那麼想要敏捷地面對需求，要有穩固的架構與溝通介面。</p><p>一般做系統需要有類似音樂即興的概念？恩，說實話：會，因為遇到臨時的任務，是完全搞不清楚狀況的，大部分的資訊是不清楚的。在這樣的前提之下，不管是協助，還是救火，除了基本的技能之外，逆向工程、抽象化思考的就很重要。透過瞭解狀況，然後推演可能的問題，可能的架構，從現象中找到蛛絲馬跡，解決問題。</p><p>音樂上，如果沒聽過的歌，我狀況好的時候，可以靠經驗、或者推演，預測歌曲接下來的和弦進行、甚至是歌曲旋律的走向。即使是第一次聽的歌，也可以即時跟著歌曲彈。當然，這是因為我有一定曲式的資料庫在腦袋裡，以及對於樂器的掌握度。</p><p>對於系統，有時候會來一個完全沒看過，也沒經手過的，要做判斷、給建議。這時候除了對於技術的掌握，逆向工程與想像力的推演就很重要了。（當然還有唬爛能力 XD）</p><h2 id="創作、設計"><a href="#創作、設計" class="headerlink" title="創作、設計"></a>創作、設計</h2><p>樂手的學習是透過樂譜，從模仿中學習，然後寫歌、編曲、創作。工程師也是，不管是 SRE、QA、Developer ，了解 #已經落地的架構，都是基本功。#了解大量案例後的設計 才更具意義。除非是天生神力。。。 (這種人不多，大多也不會來上班)</p><p>系統架構的設計仰賴上線後實務的經驗，對商業需求的了解，對問題的判斷。新設計可能是沒包袱的，但實務更多是在既有的架構上作設計，所以了解既有的是很重要的。#看見架構的全貌 對我來講只是基本的而已。</p><p>了解很多已經落地架構之後，回到設計面，更有機會避免這些過往的經驗，設計出更好的架構。當然，要設計架構，基礎的技術能力還是要掌握的。對應到音樂，要寫歌、編曲，至少掌握一種樂器演奏技術、了解其他樂器的特性，這是只是基本的，但前提一定是聽過、彈過、練過很多首歌。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul><li>練歌：要有總譜、樂譜；要改善探索問題，要了解架構</li><li>沒有譜，第一次聽的歌，沒有架構圖面對系統：要推演、逆向思考，基本技能（樂器駕馭能力、基礎系統能力）</li><li>創作與設計：創作從模仿開始，模仿的前提要了解。</li></ul><p>恩，整理演講中，因為時間關係，沒有講清楚的東西。</p><h1 id="延伸閱讀-站內"><a href="#延伸閱讀-站內" class="headerlink" title="延伸閱讀 (站內)"></a>延伸閱讀 (站內)</h1><ul><li><a href="/2018/05/27/DevOps/Emergency-Response-on-Stage/">跨領域的緊急應變 - SRV 斷弦事件</a></li><li><a href="/2018/01/07/DevOps/Emergency-Response/">緊急應變 (Emergency Response)</a></li><li><a href="/2014/12/10/Management/%E6%BA%9D%E9%80%9A-%E6%88%90%E6%9C%AC/">溝通 = 成本</a></li><li><a href="/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/">演講：從緊急事件 談 SRE 應變能力的培養</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;補充在 &lt;a href=&quot;/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/&quot;&gt;DevOpsDay&lt;/a&gt; 演講中，為啥在會特別強調 SRE 是面對落地的架構，而不是設計架構？這段內容本來是放在 Slide 要講的，後來拿掉了。我用 &lt;code&gt;樂團總譜&lt;/code&gt;、&lt;code&gt;練團溝通&lt;/code&gt; 來比喻 &lt;code&gt;架構圖呈現&lt;/code&gt;、&lt;code&gt;團隊溝通&lt;/code&gt;，其實要表達的是 &lt;code&gt;康威定律&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系統架構與組織有著一定的關係，同時這關係會帶來團隊溝通成本問題。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="Conway&#39;s Law" scheme="http://rickhw.github.io/tags/Conway-s-Law/"/>
    
      <category term="Emergency Response" scheme="http://rickhw.github.io/tags/Emergency-Response/"/>
    
  </entry>
  
  <entry>
    <title>人力招募 - 三、深度對話：價值觀</title>
    <link href="http://rickhw.github.io/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/"/>
    <id>http://rickhw.github.io/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/</id>
    <published>2018-09-21T19:21:00.000Z</published>
    <updated>2018-12-22T05:35:44.154Z</updated>
    
    <content type="html"><![CDATA[<p>接續上一篇 <a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">招募第一關 面試</a>，這篇整理的是第二次面試 (以下簡稱二面)。二面不見得每個公司都有，有些可能會在一面就一次談完。依照面試的職位、職等、企業類型會有所不同，創業公司通常會直接跟 VP、CTO、CEO … 等階層聊，大型企業可能只到 Director，如果是高階通常都會到 CEO 或者 Co-founder。</p><p>一面最重要的是確認技能，二面確認價值觀。</p><a id="more"></a><h2 id="目的：價值觀"><a href="#目的：價值觀" class="headerlink" title="目的：價值觀"></a>目的：價值觀</h2><p>如果一面主要是確認技能能否滿足任務，二面就是要確認 <code>價值觀</code> 是否與企業契合，更抽象的說：是否符合 <code>企業文化</code>。這不是說一面不用了解價值觀，而是在二面要更加深入了解。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%83%B9%E5%80%BC%E8%A7%80" target="_blank" rel="noopener">價值觀</a> 依照 Wiki 的解釋如下：</p><blockquote><p>價值觀（Values）是一種處理事情判斷對錯、做選擇時取捨的標準。有益的事物才有正價值。對有益或有害的事物評判的標準就是一個人的價值觀。</p></blockquote><p>價值觀影響態度，態度影響行為。當對事物有一致的價值觀時，對於如何面對事物，比較容易達成共識，或者 <code>當責 (Accountiabily)</code>。</p><p><code>企業文化</code> 有三個基本構成：<code>價值觀 (Values)</code>、<code>使命 (Mission)</code>、<code>願景 (Vision)</code>。價值觀是基底，再來是使命，最後是願景，其中價值觀最重要。用金字塔來說，他是最底層。如果說企業財報的數字表現生存的 <code>硬技能</code>，那的企業文化就是面對改變的 <code>軟技能</code>。</p><p>價值觀是從家庭環境開始塑造，人成長到一定年紀後，因為價值觀導致的態度和行為都很難改變。價值觀分成核心價值，或者稱為 <code>核心原則</code>。價值觀可以從以下例子看出：</p><blockquote><p>撿到 100 跟 100 萬的行為，如果行為是一致的，稱為價值觀。</p></blockquote><p>所以二面的目的找到適合的價值觀就變成主要的，但是在這前提之下，企業自身要確立所要的價值觀是什麼？</p><h2 id="如何從問題中，了解價值觀？"><a href="#如何從問題中，了解價值觀？" class="headerlink" title="如何從問題中，了解價值觀？"></a>如何從問題中，了解價值觀？</h2><p>價值觀的概念有很多詞彙，像是：</p><blockquote><p>成就、尊重、認同、踏實、誠信、當責、責任、專業、影響、積極、樂觀、愛、幸福、信仰、信任、果斷 … <sup><a href="https://www.managertoday.com.tw/articles/view/52622" target="_blank" rel="noopener">出處</a></sup></p></blockquote><p>問題的目的在於找到企業重視的核心價值觀，與 Candidate 是否契合。這前提是企業已經有很清楚的價值觀定義，換言之就是企業文化。底下的例子是我常會問的，答案也不是最標準的。</p><ul><li>如果你是老闆，你覺得你願意花多少錢請自己？</li></ul><blockquote><p>對於 <code>付出</code> 與 <code>收穫</code> 的對價關係。有付出才會有收穫的，一定是先付出，才會有收穫。努力唸書才會上台大，絕對不是上了台大才開始努力唸書。</p></blockquote><ul><li>你覺得怎樣的行為才是認真負責？</li></ul><blockquote><p>當責：使命必達，有頭有尾。</p></blockquote><ul><li>什麼是資深、專業、大師？</li></ul><blockquote><p>請參見： <a href="/2015/08/22/Management/Senior-Software-Developer/">Senior Software Developer</a>、<a href="/2017/07/01/Management/Developer-or-Engineer/">Developer, or Engineer</a></p></blockquote><ul><li>想像中理想的工作是什麼？</li></ul><blockquote><p>踏實的價值觀：了解是否有過自己的目標，如何具體化以及落實。工作可以換成其他項目，像是夢想之類的。</p></blockquote><!--## 向上溝通如果二面不是用人主管談，那麼要注意的是把一面的結果呈現讓二面的面試者了解。要注意的是：* 技能的--><!--當然除了二面，也有可能會有三、四、五面，是因人而異的。--><h2 id="下一篇"><a href="#下一篇" class="headerlink" title="下一篇"></a>下一篇</h2><p>下一篇討論的是 <a href="/2018/09/27/Management/Hiring-Step4-Salary/">薪資</a>，這也是很多人想要知道的。從用人主管，或者資方的角度，如何討論薪資這件事情。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募 (Hiring)</a></li><li><a href="/2018/08/28/Management/Hiring-Step0-Initial/">人力招募 - 零、準備篇：確認需求、條件、定位、市場狀況</a></li><li><a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">人力招募 - 一、萬事起頭難：面試名單從哪來？</a></li><li><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">人力招募 - 二、見面談：招募第一關 面試</a></li><li><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">人力招募 - 三、深度對談：價值觀</a></li><li><a href="/2018/09/27/Management/Hiring-Step4-Salary/">人力招募 - 四、客觀談論：薪資</a></li><li><a href="/2018/10/07/Management/Hiring-Step5-Offer/">人力招募 - 五、最後確認：報到時程</a></li><li><a href="/2018/10/26/Management/Hiring-Step6-Onboard/">人力招募 - 六、到職後：訓練、目標、評核</a></li></ul><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li>Wikipedia <a href="https://zh.wikipedia.org/wiki/%E5%83%B9%E5%80%BC%E8%A7%80" target="_blank" rel="noopener">價值觀</a></li><li>經理人：<a href="https://www.managertoday.com.tw/articles/view/52622" target="_blank" rel="noopener">什麼才是你人生中最重要的事？一張「價值觀清單」，重新認識自己</a></li><li><a href="https://wiki.mbalib.com/zh-tw/%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC" target="_blank" rel="noopener">核心價值</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接續上一篇 &lt;a href=&quot;/2018/09/18/Management/Hiring-Step2-Interview-Skills/&quot;&gt;招募第一關 面試&lt;/a&gt;，這篇整理的是第二次面試 (以下簡稱二面)。二面不見得每個公司都有，有些可能會在一面就一次談完。依照面試的職位、職等、企業類型會有所不同，創業公司通常會直接跟 VP、CTO、CEO … 等階層聊，大型企業可能只到 Director，如果是高階通常都會到 CEO 或者 Co-founder。&lt;/p&gt;
&lt;p&gt;一面最重要的是確認技能，二面確認價值觀。&lt;/p&gt;
    
    </summary>
    
      <category term="經營管理" scheme="http://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="用人之道" scheme="http://rickhw.github.io/tags/%E7%94%A8%E4%BA%BA%E4%B9%8B%E9%81%93/"/>
    
      <category term="Hiring" scheme="http://rickhw.github.io/tags/Hiring/"/>
    
      <category term="Interview" scheme="http://rickhw.github.io/tags/Interview/"/>
    
      <category term="企業文化" scheme="http://rickhw.github.io/tags/%E4%BC%81%E6%A5%AD%E6%96%87%E5%8C%96/"/>
    
      <category term="價值觀" scheme="http://rickhw.github.io/tags/%E5%83%B9%E5%80%BC%E8%A7%80/"/>
    
  </entry>
  
  <entry>
    <title>人力招募 - 二、見面談：招募第一關 面試</title>
    <link href="http://rickhw.github.io/2018/09/18/Management/Hiring-Step2-Interview-Skills/"/>
    <id>http://rickhw.github.io/2018/09/18/Management/Hiring-Step2-Interview-Skills/</id>
    <published>2018-09-18T05:22:00.000Z</published>
    <updated>2018-12-22T05:35:33.757Z</updated>
    
    <content type="html"><![CDATA[<p>接續上一篇 <a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">萬事起頭難：面試名單從哪來？</a>，這篇整理的是面試篇。</p><p>面試是很多管理者（特別不習慣面對人的技術管理者）要學習的重要課程，也可能是第一個面對公司內部、客戶以外的人：從社會來的任意一個陌生人。</p><p>面試的目的在於找到 <code>適合的人</code>，要清楚以下本質：</p><ul><li>面試是用人手段，透過面試了解是否適任，了解彼此，為彼此找到適合方向</li><li>面試是雙向的，面試官在面試別人，面試者也在面試這家公司</li><li>用人不只是技能，還有價值觀，反過來也是考驗企業文化是否對到面試者的頻率</li><li>面試只是其中一種篩選方法，吃飯喝茶、喇低賽、三顧茅廬也是面試。</li></ul><p>底下整理面試方要準備的工作。</p><a id="more"></a><hr><h1 id="面試前的準備工作"><a href="#面試前的準備工作" class="headerlink" title="面試前的準備工作"></a>面試前的準備工作</h1><p>面試前要準備很多事情，包含流程、問題的設計、評量的方法、薪資 … 等。必須跟上層主管、HR有充分溝通與確認，甚至是平行管理者可以有交流討論。</p><h2 id="流程設計"><a href="#流程設計" class="headerlink" title="流程設計"></a>流程設計</h2><p>每家公司有不同面試流程，有不同的時間。大部分台灣的面試時間都很短，普遍都在半天之內，有些則是固定一小時。有些大型外商，面試流程很長，通常是兩三天起跳。加上交通時間，一場面試跑完大概要一個禮拜。</p><p>不管是一小時，還是好幾天，面試的目的就是要了解 Candidate 是否適合這個職務。</p><p>面試流程設計有其目的性，主要目的有以下：</p><ul><li>硬技能：確認技能是否符合需求，底下為軟體工程師的驗證面向：<ul><li>基本程式語言的駕馭能力、開發流程</li><li>資料結構、演算法</li><li>作業系統、網路、計算機結構</li></ul></li><li>軟技能：是否適合團隊<ul><li>團隊協作</li><li>溝通表達</li></ul></li><li>人格特質：是否能長久合作<ul><li>價值觀</li><li>態度</li><li>企圖心</li></ul></li></ul><!--* 職涯  * 了解想換工作的動機  * 人格特質是否能融入企業  * 了解彼此的界線--><h2 id="鑑別與評核方式"><a href="#鑑別與評核方式" class="headerlink" title="鑑別與評核方式"></a>鑑別與評核方式</h2><p><a href="/2016/08/20/AWS/AWS-Certified-Developer/">AWS Certified Developer 準備心得</a> 一文中最後段落提到一些概念，也是用來作 <code>能力</code> 足夠與否的參考點：</p><ul><li><code>技能 (Skills)</code>：具備駕馭的技術能力<ul><li>基本功：<a href="http://sijinjoseph.com/programmer-competency-matrix/" target="_blank" rel="noopener">Programmer Competency Matrix</a> 是不錯的參考。</li><li>實踐功力：例如會 Java, PHP, AWS, K8s … 等。</li><li>難易度從養成技能的時間判斷，例如學好 OS 運作，需要長時間累積，但指令只要搜尋或者 <code>man</code> 就有。</li></ul></li><li><code>經驗 (Experience)</code>：<ul><li>曾經的經驗與環境，像在 IBM, TrendMicro, KKBox, Facebook 待過幾年，或者什麼角色幾年</li><li>具體的經驗數字，例如每天維護處理 100TB 的資料搜尋引擎，一共使用 200 個資料節點</li></ul></li><li><code>專業 (Prefessional)</code>：解決問題的能力，像是：<ul><li>導入微服務架構解偶現有系統，為公司跨國帶來更彈性基礎</li><li>導入敏捷開發，讓開發與協作更加順暢</li><li>解決 c10k 效能問題</li><li>能寫出 <a href="/2018/05/03/AWS/Study-Notes-API-Gateway-Rate-Limit-and-Throttling/">Rate Limit 演算法</a>，並且用在適當情境</li></ul></li></ul><p>這三點用來參考能力的參考點，也許不是最好，但卻很實際。能力跟 Performance （產能）有直接關係，屬於硬實力。</p><p>軟實力呢？大概就是團隊合作、溝通、教育訓練、影響力、文字駕御 … 等項目。有機會另外寫專文說明。</p><h2 id="問題的設計"><a href="#問題的設計" class="headerlink" title="問題的設計"></a>問題的設計</h2><p>問問題要有技巧，<code>STAR</code> 是最常見的方式，套路是這樣：</p><ul><li><code>Situation (背景)</code>：其實就是我常說的環境，什麼樣的環境之下，會做出怎樣的行動。</li><li><code>Task (工作任務)</code>：主要的目標任務</li><li><code>Action (實際行動)</code>：如何完成任務的實際行動</li><li><code>Result (關注結果)</code>：結果到底是好、不好，成功或者失敗等。</li></ul><p>問題的設計通常可以依據這樣的套路。</p><p>例如，應試者履歷上只寫 <code>完成某一個專案</code>，但是這段工作時間有一定的長度，那麼可以試著這樣追問：</p><ul><li>背景：跟哪一些人合作？這個專案的 TA？怎樣的市場？團隊的工作模式？</li><li>任務：你在前述中是扮演怎樣的角色？根哪一些人協作？使用了哪一些技術</li><li>行動：執行的方法、遇過怎樣的問題？映像最深刻的？讓你最感到興奮的？</li><li>結果：後來這個專案上線了嗎？有怎樣的結果？做了怎樣的改善或者調整？你學到了什麼？</li></ul><p>這個只是一個常用的套路，使用要看應試者本身的表達狀況。有些應試者本身擅長表達，容易有類似的呈述結構，面試官容易了解他的狀況。但有些則不太會表的，往往是做了很多，但卻不知道怎麼組織自己的任務，這時候可以適時用這樣的問法問出一些東西。</p><p>問題設計的背後，要清楚想知道的，重點在於瞭解應試者是否符合條件，特別是跟態度、價值觀、潛力、人格特質有關的。</p><h2 id="技能驗證"><a href="#技能驗證" class="headerlink" title="技能驗證"></a>技能驗證</h2><p>技能驗證是技術人必要的關卡，目的是確認技能能夠滿足任務的需求。技術能力滿足的狀況分幾種：</p><ul><li><code>火力</code>：<ul><li>通常是 <code>資深</code> 或是 <code>專家</code>，這種人可遇不可求。只要給予武器，他可以馬上上戰場，甚至他可以直接指揮小組作戰，佈局、攻守、改善武器火力、優化後勤</li><li>面對新技術，他能很快找到資源，快速掌握技術核心概念，從抽象到實作能力具備，同時可以把這樣的能力擴散到團隊</li></ul></li><li><code>即戰力</code>：通常只要給武器，就可以馬上上戰場，滿足任務的需求。</li><li><code>淺戰力</code>：需要短時間 (1Q 以內) 就可以上戰場</li><li><code>無戰力</code>：從頭開始訓練的人，無戰力分成兩種<ul><li><code>有潛力</code>：通常是基本能力足夠的人，像是有扎實的計算機基礎科學，經過訓練，很快可以轉為 <code>淺戰力</code>。</li><li><code>堪用</code>：雖然沒有潛力，但是現場需要人手，可以協助，通常是助理的角色，一段時間後可以轉為 <code>淺戰力</code>。</li></ul></li></ul><blockquote><p>這篇：<a href="/2015/08/22/Management/Senior-Software-Developer/">Senior Software Developer</a>，是我過去對於 <code>資深</code>、<code>專業</code>、<code>大師</code> 的看法整理。</p></blockquote><p>技能驗證一定要確認幾個點：</p><ol><li>真的寫過程式：這一定要親自確認過，不要以為很好笑、或很疑惑，因為真的有這樣的人矇混過了。</li><li>寫程式的紀律、習慣：基本語法掌握度、排版、Coding Convention、工具 (IDE)</li><li>如何確認需求與團隊溝通</li><li>如何找資料、參考、照抄</li><li>寫程式的功力，像是演算法、程式技巧、OO、數學</li></ol><p>對，寫程式的功力是最後一點。很多時候，看到寫程式連該要有的 <code>排版都沒做好</code>，會讓人看都不想看。</p><blockquote><p>程式寫好後，被改動的機會變少了，但閱讀的機會變多了。紀律很重要。</p></blockquote><p>不管是 Live Coding or Offline Coding 都是要確認前面提到的五個點。</p><h3 id="技術驗證：Live-Coding"><a href="#技術驗證：Live-Coding" class="headerlink" title="技術驗證：Live Coding"></a>技術驗證：Live Coding</h3><p>面試當天在現場進行考試。現場考試方式通常不是白板題，就是上機考。題目的難易度，取決於時間。事前可以定義面試流程的時間分配，從時間分配題目的難度與深度。題目的設計要注意：</p><blockquote><p>不是要難倒面試者，而是要了解面試者的程度。</p></blockquote><p>要難倒面試者很容易，隨便出個演算法就搞定了，但沒有意義。</p><p>我個人偏好上機考，可以直接看出一個人寫程式的習慣，如何面對問題，有沒有 UT 的習慣，寫程式的思路，對於開發環境的要求 … 等。</p><h3 id="技術驗證：Offline-Coding"><a href="#技術驗證：Offline-Coding" class="headerlink" title="技術驗證：Offline Coding"></a>技術驗證：Offline Coding</h3><p>驗證的方法分成客觀、主觀的方法，客觀的就是考試，這兩個 <a href="https://leetcode.com" target="_blank" rel="noopener">LeetCode</a>, <a href="https://www.codility.com/" target="_blank" rel="noopener">Codility</a> 是業界很多公司會用的線上測驗系統。主要考資料結構與演算法、邏輯、基本英文閱讀等。</p><p>這類工具已經有很方便的確認方式，只要預算允許，是可以使用的。</p><p>我也曾經設計類似題目，請面試者在家自行開發，題目是我學生時代寫過的東西，我那時候想兩天，寫兩小時。那時候大概是 1999 年，我剛寫程式 2 年。也因此這題目我認為算是簡單的，有興趣嗎？ <a href="https://rickhw.github.io/exam/ansi_reader/main.html">點這裡</a> 試看看。</p><h2 id="團隊面試"><a href="#團隊面試" class="headerlink" title="團隊面試"></a>團隊面試</h2><p>面試不是只有跟用人主管，而是跟團隊。</p><p>這個想法我從 <a href="/2015/01/06/Management/協同合作系統建制與導入-以-Redmine-為例/">上一個工作</a> 開始就這樣操作，因為真正一起協作的不是管理者，而是團隊的成員。管理者只是在旁邊給予協助與教育的角色。所以一直以來，我都會希望，讓團隊主要的成員，一起參與面試的過程，通常是資深的成員。</p><p>在這過程，也讓資深的成員培養他們對於 <code>面試</code> 概念的建立，思考 <code>如何面對人</code> 這件事情。因為 <code>資深</code> 代表著有機會往上爬，有機會做管理工作。創造機會讓他們一起學習，管理者也可以從他們的反饋，從而修正面試相關的工作項目。</p><hr><h1 id="面試當天"><a href="#面試當天" class="headerlink" title="面試當天"></a>面試當天</h1><h2 id="面試當天的準備"><a href="#面試當天的準備" class="headerlink" title="面試當天的準備"></a>面試當天的準備</h2><ul><li>詳細閱讀面試者的資料，針對資料準備可能的提問與方向</li><li>確認要問的問題，以及問題背後的目的</li><li>確認面試地點、時間、相關的面試團隊</li></ul><h2 id="面試當下的情境"><a href="#面試當下的情境" class="headerlink" title="面試當下的情境"></a>面試當下的情境</h2><p>盡可能讓面試者表現出 <code>真我 (True Color)</code>，也就是真實的自己，盡可能讓他可以在面試官面前侃侃而談。目的是能夠在短短的時間之內了解這個人是否真的適合我們，也在了解他面對壓力的時候的態度。讓面試者放鬆的方法很重要，通常見面會聊聊輕鬆的話題，像是：</p><ul><li>怎麼過來面試的？從哪裡來？來到公司要多久？</li><li>今天請假？還是目前待業？（有些履歷上不會寫）</li></ul><p>這類的問題，通常跟新同事、或者同事碰面會聊的話題。</p><h2 id="面試可能發生的問題"><a href="#面試可能發生的問題" class="headerlink" title="面試可能發生的問題"></a>面試可能發生的問題</h2><p>為了讓面試順利，要留意以下可能的問題以及如何應對：</p><ul><li>面試者：<ul><li>遲到、早到</li><li>不願意測驗</li><li>自介一直說停不下來，或說兩句就沒了</li><li>剛衝浪完，一身都是沙子</li><li>才談兩分鐘就發現不適合怎麼繼續？</li></ul></li><li>面試官：<ul><li>遲到</li><li>沒有會議室</li><li>臨時有事，像是重要會議</li></ul></li><li>環境問題<ul><li>沒電腦可以考試</li><li>冷氣不夠冷</li><li>忘了準備水</li><li>下大雨</li></ul></li></ul><h2 id="紀錄面試過程"><a href="#紀錄面試過程" class="headerlink" title="紀錄面試過程"></a>紀錄面試過程</h2><p>面試過程會問問題，應試者會答覆問題。這些過程在事後跟上及、或者自己事後回想的時候，需要有參考資料。</p><!--## 面試問題Q: 是否要創造讓面試者放鬆的環境？> 以前我的答案是要的。因為面試目的是要找到適合的人，但有些人因為--><h2 id="Candidate-經常會問的問題"><a href="#Candidate-經常會問的問題" class="headerlink" title="Candidate 經常會問的問題"></a>Candidate 經常會問的問題</h2><p>現在有很多 Head Hunter 會教人如何面試，如何反問用人主管問題、反問企業 … 甚至有書 (<a href="https://www.tenlong.com.tw/products/9789864767199" target="_blank" rel="noopener">提升程式設計師的面試力</a>)、<a href="https://www.cakeresume.com/resources/top-10-developer-programmer-job-interview-questions-2018" target="_blank" rel="noopener">網站</a> 專門在討論。</p><ul><li>此職缺產生的原因為何？相關的成員有多少人？</li><li>貴公司面試流程為何？預估時間？</li><li>能否提供此職缺的待遇範圍及結構</li><li>你上次出國是什麼時候？</li><li>你們常加班嗎？為什麼？</li><li>公司福利？上下班時間</li><li>拿出某一個鄉民的 comment 請你說說看法？</li></ul><h1 id="面試後續"><a href="#面試後續" class="headerlink" title="面試後續"></a>面試後續</h1><p>如果想用這個人，後續有幾件事要持續的：</p><ul><li>Candidate<ul><li>他期待的薪資範圍與未來</li><li>他可能的 Offer</li><li>市場的行情</li></ul></li><li>內部溝通<ul><li>對上溝通</li><li>對下溝通</li><li>對 HR 溝通</li></ul></li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>面試只是用人的手段方法，實際上重點在於找到適合的人。</p><p><code>適合</code> 很抽象，具體的說：</p><ul><li>短期：能分擔團隊的任務</li><li>中期：能貢獻提供火力</li><li>長期：為公司帶來價值</li></ul><p>所以廣結善緣，多一些連結，就會多一些機會。</p><p>第一次通常是要確認 <code>技能</code> 能否滿足任務需求，如果企業要長期發展，那 <code>價值觀</code> 可能會是更重要的。下一篇聊的是：<a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">深度對談 價值觀</a>。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募 (Hiring)</a></li><li><a href="/2018/08/28/Management/Hiring-Step0-Initial/">人力招募 - 零、準備篇：確認需求、條件、定位、市場狀況</a></li><li><a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">人力招募 - 一、萬事起頭難：面試名單從哪來？</a></li><li><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">人力招募 - 二、見面談：招募第一關 面試</a></li><li><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">人力招募 - 三、深度對談：價值觀</a></li><li><a href="/2018/09/27/Management/Hiring-Step4-Salary/">人力招募 - 四、客觀談論：薪資</a></li><li><a href="/2018/10/07/Management/Hiring-Step5-Offer/">人力招募 - 五、最後確認：報到時程</a></li><li><a href="/2018/10/26/Management/Hiring-Step6-Onboard/">人力招募 - 六、到職後：訓練、目標、評核</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接續上一篇 &lt;a href=&quot;/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/&quot;&gt;萬事起頭難：面試名單從哪來？&lt;/a&gt;，這篇整理的是面試篇。&lt;/p&gt;
&lt;p&gt;面試是很多管理者（特別不習慣面對人的技術管理者）要學習的重要課程，也可能是第一個面對公司內部、客戶以外的人：從社會來的任意一個陌生人。&lt;/p&gt;
&lt;p&gt;面試的目的在於找到 &lt;code&gt;適合的人&lt;/code&gt;，要清楚以下本質：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面試是用人手段，透過面試了解是否適任，了解彼此，為彼此找到適合方向&lt;/li&gt;
&lt;li&gt;面試是雙向的，面試官在面試別人，面試者也在面試這家公司&lt;/li&gt;
&lt;li&gt;用人不只是技能，還有價值觀，反過來也是考驗企業文化是否對到面試者的頻率&lt;/li&gt;
&lt;li&gt;面試只是其中一種篩選方法，吃飯喝茶、喇低賽、三顧茅廬也是面試。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;底下整理面試方要準備的工作。&lt;/p&gt;
    
    </summary>
    
      <category term="經營管理" scheme="http://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="用人之道" scheme="http://rickhw.github.io/tags/%E7%94%A8%E4%BA%BA%E4%B9%8B%E9%81%93/"/>
    
      <category term="Hiring" scheme="http://rickhw.github.io/tags/Hiring/"/>
    
      <category term="Interview" scheme="http://rickhw.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>演講：從緊急事件 談 SRE 應變能力的培養</title>
    <link href="http://rickhw.github.io/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/"/>
    <id>http://rickhw.github.io/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/</id>
    <published>2018-09-12T04:43:00.000Z</published>
    <updated>2018-12-15T06:20:52.301Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://devopsdays.tw/" target="_blank" rel="noopener">DevOpsDay Taipei 2018</a> 兩天半的盛會，今天總算順利落幕。今天我分享了過去工作上，面對緊急事件的心得與歷程，同時彙整了 SRE 的重點，分享了這個在大會中，相對特殊的主題。不同於兩個月前的 <a href="/2018/07/18/About/20180718-API-Gateway/">AWS Summit</a>，這次我不談技術、也不談高大上的數據、也不用新潮的用語，而只談如何面對 <code>緊急異常</code> 這件事，同時也分享了如何培養應變能力的方法與思路。</p><a id="more"></a><h1 id="簡報與摘要"><a href="#簡報與摘要" class="headerlink" title="簡報與摘要"></a>簡報與摘要</h1><p>以下是今天分享的 Slide：</p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/3Ue1DO8deKnftq" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/rickhwang/sre-devopsdays-taipei-2018" title="從緊急事件 談 SRE 應變能力的培養 - DevOpsDays Taipei 2018" target="_blank">從緊急事件 談 SRE 應變能力的培養 - DevOpsDays Taipei 2018</a> </strong> from <strong><a href="https://www.slideshare.net/rickhwang" target="_blank">Rick Hwang</a></strong> </div></p><p>演講想表達的概念很簡單：</p><ul><li>看見全貌：看到前、中、後</li><li>了解架構的重要性、鼓勵探索 &gt; SOP<ul><li>SOP 要有，但思考與探索更重要</li><li>唯有思考，才能真的學到東西，才能見招拆招</li></ul></li><li>溝通、溝通、溝通</li><li>標準化、標準化、標準化</li></ul><blockquote><p>這次演講，有很高的成分再強調 <a href="/2014/12/10/Management/%E6%BA%9D%E9%80%9A-%E6%88%90%E6%9C%AC/">溝通成本</a> 這件事情，因為過去的經驗就發現這是個很嚴重的問題，換到現在公司後，這個問題同樣一再重演，讓我再次覺得，有必要一再的強調。溝通用技術來講就是 <code>協議</code>，像是 <code>TCP/IP</code> ，好的協議，會造就好的運作模式，好的溝通品質會造就資訊有效的傳遞，知識傳遞更精準、更加流暢，企業才不會被絆住。</p></blockquote><p>底下是 Slide 最後總結，給讀者做參考：</p><h2 id="全貌與主旨"><a href="#全貌與主旨" class="headerlink" title="全貌與主旨"></a>全貌與主旨</h2><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/A-00.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/A-01.png" alt=""></p><p>站內相關文章：</p><ul><li><a href="/2018/08/03/DevOps/An-Introduction-to-SRE/">推薦：Site Reliability Engineering (SRE, 網站可靠性工程)</a></li><li>演講：<a href="/2017/06/21/AWS/Stategies-System-Monitor_and_CloudWatch/">淺談系統監控與 CloudWatch 的應用</a></li><li>演講：<a href="/2018/05/26/About/201805-Monitoring-Tools-CloudWatch/">Monitoring Tools 大亂鬥 - AWS CloudWatch</a></li><li>演講：<a href="/2018/03/29/About/2018-Serverless-All-Star/">Serverless All-Star - Ops as Code using Serverless</a></li></ul><h2 id="Part-I-事件當下的應變"><a href="#Part-I-事件當下的應變" class="headerlink" title="Part I 事件當下的應變"></a>Part I 事件當下的應變</h2><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P1-01-01.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P1-01-00.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P1-01-02.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P1-02-01.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P1-02-02.png" alt=""></p><p>站內相關文章：</p><ul><li><a href="/2018/05/27/DevOps/Emergency-Response-on-Stage/">跨領域的緊急應變 - SRV 斷弦事件</a></li><li><a href="/2018/01/07/DevOps/Emergency-Response/">緊急應變 (Emergency Response)</a></li><li><a href="/2017/12/02/DevOps/Spirit-In-SysOps/">系統維運的精神</a></li></ul><h2 id="Part-II-應變能力培養"><a href="#Part-II-應變能力培養" class="headerlink" title="Part II 應變能力培養"></a>Part II 應變能力培養</h2><h3 id="Part-II-架構"><a href="#Part-II-架構" class="headerlink" title="Part II 架構"></a>Part II 架構</h3><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-01-00.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-01-01.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-01-02.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-01-03.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-01-end.png" alt=""></p><h3 id="Part-II-探索"><a href="#Part-II-探索" class="headerlink" title="Part II 探索"></a>Part II 探索</h3><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-02-00.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-02-01.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-02-02.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-02-03.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-02-04.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-02-05.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-02-06.png" alt=""></p><h3 id="Part-II-管理"><a href="#Part-II-管理" class="headerlink" title="Part II 管理"></a>Part II 管理</h3><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-03-00.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-03-01.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-03-02.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-03-03.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-03-04.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/P2-03-end.png" alt=""></p><p>站內相關文章：</p><ul><li><a href="/2014/12/10/Management/%E6%BA%9D%E9%80%9A-%E6%88%90%E6%9C%AC/">溝通 = 成本</a></li><li><a href="/2018/06/18/Architecture/Distributed-Message-Systems/">Distributed Message Systems</a></li><li><a href="/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/">分散式一致性與共識演算法</a></li><li><a href="/2018/06/18/Architecture/Gossip-in-Distributed-Systems/">聊聊分散式系統</a></li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/Z-01.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/Z-02.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/Z-03.png" alt=""><br><img src="/images/SRE/Emergency-IncidentManagementWithSRE/Z-04.png" alt=""></p><h2 id="Q-and-A"><a href="#Q-and-A" class="headerlink" title="Q and A"></a>Q and A</h2><ul><li>SOP 不重要？</li></ul><blockquote><p>不是不重要，而是 <code>思考</code> 過會比照這做更重要。如果能夠自行探索出來，會更好。因為事件當下，很多時候，不是靠 SOP 能解決問題，特別是沒有遇過的。另外就是要培養 <code>逆性工程</code> 思維，這是本來在 Agenda 裡的另外主題，未來有機會再補吧～</p><p>音樂圈有個笑話：把譜放在 <code>吉他手</code> 前面，他什麼都彈不出來了；把譜從 <code>鍵盤手</code> 前面拿走，他什麼都彈不出來了。。。照樣照句：把 SOP 從 Ops 前面拿走，他什麼都做不了了；把 IDE 從 Developer 前關掉，他什麼都做不了了。</p><p>Ops 只會照 SOP，Developer 只會寫 Code 不懂思考。。。樂譜某種程度代表 SOP，只要照著彈就好。架構則代表音樂框架，即興則代表著逆向思考與基本功的熟練度。</p></blockquote><ul><li>SRE 台灣好不好找？</li></ul><blockquote><p>我的觀察，企業開始有需求，但是市場上人力不多。跟其他朋友聊的想法只能這樣：自己培養，條件就是會寫 Code。另外是很多企業主管其實還搞不清楚 SRE vs MIS vs SE 的差異，很多職缺的描述都只是把 MIS 換成 SRE，但沒考慮到 SRE 跟傳統 MIS 的差異與他的條件。</p></blockquote><ul><li>怎麼訓練新人上線處理事件？</li></ul><blockquote><p>如果資深的人已經可以掌握狀況，那就把處理的機會讓給資淺的人，一定要下水游泳，才能真的學到游泳。</p></blockquote><hr><h2 id="原先預定的-Agenda"><a href="#原先預定的-Agenda" class="headerlink" title="原先預定的 Agenda"></a>原先預定的 Agenda</h2><p>投影片做兩天，構思兩週，資料蒐集花了兩個月。點都想好了，剩下的就是怎麼把故事講得精彩。底下是本來寫的 Agenda，因為可以提的東西真的很多，但是時間還是有限，最後就一直砍、一直砍，底下是原本預計的 Agenda:</p><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/Agenda.png" alt=""></p><p>其實只有完成 50%，跟 AWS 一樣就上了 XDD<br>有機會再來補齊吧 XDD</p><h2 id="結論-1"><a href="#結論-1" class="headerlink" title="結論"></a>結論</h2><p>最後還是要感謝這次主辦的單位：DevOps Taiwan、Hashicorp User Group Taiwan、台灣敏捷社群、iTHome，舉辦這樣優良的活動，再次推動台灣產業的升級！我也在這次活動中又認識更多新朋友，有了更多的交流，活動最難得的就是與這些朋友一起激盪的想法！未來有機會再碰面！</p><blockquote><p>By the way，事前一直在思考，要不要放音樂，最後想想還是衝了！下次就把吉他代上去吧 XDD<br><a href="https://hackmd.io/c/DevOpsDays2018/%2FaY_fQBJ_SG2U8QxD4bXw7w" target="_blank" rel="noopener">DevOpsDays Taipei 2018 共筆</a></p></blockquote><h2 id="聽眾的回饋"><a href="#聽眾的回饋" class="headerlink" title="聽眾的回饋"></a>聽眾的回饋</h2><p>2018/10/18 收到主辦單位整理的資料，內容是聽眾的回饋，截圖如下：</p><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/audience-feedback.jpg" alt=""></p><p>回饋內容如下 (截圖)：</p><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/audience-feedback2.png" alt=""></p><p>有正面、有批評，不管怎樣，都謝謝大家回饋給我，其中缺點我也知道，有機會的話我再調整，總之，謝謝大家來聽我分享！</p><hr><h1 id="延伸閱讀-站內"><a href="#延伸閱讀-站內" class="headerlink" title="延伸閱讀 (站內)"></a>延伸閱讀 (站內)</h1><ul><li><a href="/2018/05/27/DevOps/Emergency-Response-on-Stage/">跨領域的緊急應變 - SRV 斷弦事件</a></li><li><a href="/2018/01/07/DevOps/Emergency-Response/">緊急應變 (Emergency Response)</a></li><li><a href="/2017/12/02/DevOps/Spirit-In-SysOps/">系統維運的精神</a></li><li>推薦：<a href="/2018/08/03/DevOps/An-Introduction-to-SRE/">Site Reliability Engineering (SRE, 網站可靠性工程)</a></li><li>演講：<a href="/2017/06/21/AWS/Stategies-System-Monitor_and_CloudWatch/">淺談系統監控與 CloudWatch 的應用</a></li><li>演講：<a href="/2018/05/26/About/201805-Monitoring-Tools-CloudWatch/">Monitoring Tools 大亂鬥 - AWS CloudWatch</a></li><li>演講：<a href="/2018/03/29/About/2018-Serverless-All-Star/">Serverless All-Star - Ops as Code using Serverless</a></li><li><a href="/2014/12/10/Management/%E6%BA%9D%E9%80%9A-%E6%88%90%E6%9C%AC/">溝通 = 成本</a></li><li><a href="/2018/06/18/Architecture/Distributed-Message-Systems/">Distributed Message Systems</a></li><li><a href="/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/">分散式一致性與共識演算法</a></li><li><a href="/2018/06/18/Architecture/Gossip-in-Distributed-Systems/">聊聊分散式系統</a></li></ul><h2 id="SRE-相關整理"><a href="#SRE-相關整理" class="headerlink" title="SRE 相關整理"></a>SRE 相關整理</h2><ul><li><a href="https://www.slideshare.net/rickhwang/sre-ch12-effective-troubleshooting-83573925" target="_blank" rel="noopener">SRE CH12 - Effective Troubleshooting</a></li><li><a href="https://www.slideshare.net/rickhwang/sre-ch13-emergency-response" target="_blank" rel="noopener">SRE CH13 - Emergency Response</a></li></ul><h2 id="延伸相關"><a href="#延伸相關" class="headerlink" title="延伸相關"></a>延伸相關</h2><ul><li><a href="https://coolshell.cn/articles/17737.html" target="_blank" rel="noopener">AWS 的 S3 故障回顾和思考</a></li><li><a href="https://coolshell.cn/articles/17680.html" target="_blank" rel="noopener">从GITLAB误删除数据库想到的</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://devopsdays.tw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DevOpsDay Taipei 2018&lt;/a&gt; 兩天半的盛會，今天總算順利落幕。今天我分享了過去工作上，面對緊急事件的心得與歷程，同時彙整了 SRE 的重點，分享了這個在大會中，相對特殊的主題。不同於兩個月前的 &lt;a href=&quot;/2018/07/18/About/20180718-API-Gateway/&quot;&gt;AWS Summit&lt;/a&gt;，這次我不談技術、也不談高大上的數據、也不用新潮的用語，而只談如何面對 &lt;code&gt;緊急異常&lt;/code&gt; 這件事，同時也分享了如何培養應變能力的方法與思路。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="Conference" scheme="http://rickhw.github.io/tags/Conference/"/>
    
      <category term="Emergency Response" scheme="http://rickhw.github.io/tags/Emergency-Response/"/>
    
  </entry>
  
  <entry>
    <title>人力招募 - 一、萬事起頭難：面試名單從哪來？</title>
    <link href="http://rickhw.github.io/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/"/>
    <id>http://rickhw.github.io/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/</id>
    <published>2018-08-29T19:21:00.000Z</published>
    <updated>2018-12-22T05:35:09.822Z</updated>
    
    <content type="html"><![CDATA[<p>接續 <a href="/2018/08/28/Management/Hiring-Step0-Initial/">前一篇：準備篇</a> 的介紹，繼續整理招聘的心得：<code>萬事起頭難，名單從哪來？</code></p><p>一般人找工作要不是主動投履歷，要不就被動等待通知面試。從招募角度也是，用人單位的面試名單不會從天上掉下來，這些名單要不是主動找來源，要不就被動等待。不管主動、被動，都要面對以下的幾個問題：</p><ul><li>面試名單從哪來？</li><li>如何過濾、篩選名單？</li><li>為什麼面試意願不高？</li></ul><a id="more"></a><h1 id="一、撈單篇：名單從哪來？"><a href="#一、撈單篇：名單從哪來？" class="headerlink" title="一、撈單篇：名單從哪來？"></a>一、撈單篇：名單從哪來？</h1><h2 id="問題一：面試名單哪裡來？"><a href="#問題一：面試名單哪裡來？" class="headerlink" title="問題一：面試名單哪裡來？"></a>問題一：面試名單哪裡來？</h2><p>確認招聘的人力需求後，第一個要面對的問題是：<code>面試要有名單，但是這些面試名單從哪來？</code></p><p>在 <a href="/2018/08/28/Management/Hiring-Step0-Initial/">前一篇</a> 確認了招募的方向，下一步就是要先有可以面試的清單，才有辦法面試，也才有機會謀和。一般招募來源、管道不外乎以下幾大類：</p><ul><li><code>人力資源網站</code>，台灣大概有：<ul><li>老牌子：104、1111</li><li>新興、新創：Linkedin、Cakeresume、mit.jobs、yourator、facebook …</li></ul></li><li><code>Headhunter</code>：俗稱獵人頭、hunter，通常是針對中高階專業人才、中高階經理人進行媒合<ul><li>每家 Hunter 的遊戲規則不一樣，例如佣金比例、合約保固 or 有效期限，不適用的後續 … 等，業主要跟 Hunter 確認清楚遊戲規則。</li><li>Hunter 提供的 CV 大多都是包裝過的，所以篩選要更謹慎，心裡要有一把尺。</li><li>Hunter 對於職務理解的程度，決定磨合的機率。特別像是一些新興的名詞：DevOps, SRE, Data/AI/ML … 等很新穎的工作職務。</li></ul></li><li><code>親友介紹</code>：透過親友介紹，是近水樓台的方法。</li><li><code>校園招募</code>：<ul><li>招募剛畢業有潛力的年輕人，同時也會企業打造形象</li><li>透過產學合作，讓企業快速可以快速磨合。</li><li>更甚者，直接創立學校，直接從需求著手，培養企業需要的人才，企業也就有源源不斷的人力來源，減少用人時人力資源的問題。台灣最有名的例子就是台塑集團的明志工專，<a href="https://www.bnext.com.tw/article/35164/BN-ARTICLE-35164" target="_blank" rel="noopener">中國阿里集團的湖畔大學</a></li></ul></li><li><code>社群招募</code>：這幾年，各式各樣的社群活躍，公開的、私有的、免費的、付費的，都是不錯的管道<ul><li><code>活動</code>：社群也會結合研討會與企業合作，開立招募攤位，做徵才招募。</li><li>社群資金來源通常來自於募資、或者企業支持，但是太多企業支持，整個色彩會變，所以要自行判斷</li></ul></li><li><code>教訓訓練機構</code>：一些訓練機構會定期舉辦成果展，然後跟企業合作，這是個不錯的開始。</li></ul><blockquote><p><code>隱藏資訊</code>：這些來源，其實背後也隱含著人力素質的差異。會包裝自己的人、會選擇平台的，素質相對比較高，當然期待也會是一樣。但是會包裝自己的人，也可能隱藏了某些缺點與不足，甚至是過度膨脹。這些都是無法從 CV 上看出來的，也是面試過程要探索出來的。</p></blockquote><p>知道有這些來源之後，用人單位可以：<code>主動撈</code>、<code>被動等待</code>。</p><p>被動就是放在那邊等人來投，或者請其他人 (e.g., HR) 幫忙撈。如果可以跟 HR 充分溝通，讓他們知道需要的條件，會節省很多時間。被動守株待兔就是靠運氣，所以有多少人來面很難控制。除非 JD 寫得很有吸引力，像是薪資範圍很高、公司名聲很好，錢多事少離家近之類的。</p><p>主動指的是用人主管自己去撈，透過人力銀行、親友關係詢問 … 等。名單不會從天空掉下來，所以主動出擊很重要，而且更能掌握狀況。</p><h2 id="問題二：如何過濾、篩選名單？"><a href="#問題二：如何過濾、篩選名單？" class="headerlink" title="問題二：如何過濾、篩選名單？"></a>問題二：如何過濾、篩選名單？</h2><p>面試的目的是為了找到適合的人，要面對的問題有以下：</p><ul><li>什麼是適合的人？條件是什麼？</li><li>如何過濾、篩選名單，以提高謀合率？</li></ul><p>在篩選時，以下常用的篩選、過濾方式：</p><ul><li><code>關鍵字</code>：用來篩選的字、詞<ul><li>角色：backend, SRE, 維運, MIS, DevOps, Developer, Frontend</li><li>技能：node.js, java, AWS, golang</li><li>企業：想挖某些企業的優秀人才，直接用企業名稱當關鍵字搜尋，這也是很常用的方法。</li><li>Buzzwords: DevOps, SRE, Agile, Scrum …</li></ul></li><li><code>求職積極度</code>：最近更新履歷的時間、待業中</li><li><code>量化貢獻</code>：履歷中有沒有實際的貢獻，像是完成 10k concurrence 的網站。</li><li><code>個人目標</code>：主要是想要什麼？想做架構師？設計？開發？資料庫？<ul><li>個人目標如果具體且清楚，篩選會比較快。至少是有想法的。</li></ul></li></ul><h2 id="問題三：沒有面試意願怎麼辦？"><a href="#問題三：沒有面試意願怎麼辦？" class="headerlink" title="問題三：沒有面試意願怎麼辦？"></a>問題三：沒有面試意願怎麼辦？</h2><p>透過管道，透過關鍵字篩選，終於有了理想的清單，表面上的條件都符合需求，也正在找工作中，但就是不想來面試，怎麼辦？有以下幾點要思考：</p><ul><li>回過頭去看看 JD 的寫法是需要調整？<ul><li>描述是否要貼近招募的族群？讓他們沒有距離感。</li></ul></li><li>薪資在市場的行情比例</li><li>企業的福利、過往的活動照片</li><li>企業在外面面試的評價</li></ul><p>凡走過必留下痕跡，企業形象在這時候就顯得格外的重要。某某企業，因為食安事件，不只影響商譽，同時連帶影響的也包含招募。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>撈單這個過程很像是業務在拓展市場一樣，要先有名單才有機會創造業績，所以很多業務人員必須花時間在社交 (Social)，目的就是製造連結機會的面積，這是必要的，而且這些管道是需要經營關係的，像是定期聯繫、三節送禮是有其必要性的。同樣的，企業為長久的生存，招募也必須有著必要的連結，未來有人力需求，徵才時才不會沒有管道。</p><p>萬事起頭難，起頭才能成萬事。</p><blockquote><p>雖然我滿常跑社群的，但是熟識我的人應該不難察覺，我不太會在社群活動談這些，畢竟公私有別，所以有興趣私下都可以問我，但原則上，我不會在社群提招募的事。</p></blockquote><p>找到人了，約好時間地點面試了，下一篇繼續談的是：<a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">見面談：招募第一關 面試</a></p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募 (Hiring)</a></li><li><a href="/2018/08/28/Management/Hiring-Step0-Initial/">人力招募 - 零、準備篇：確認需求、條件、定位、市場狀況</a></li><li><a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">人力招募 - 一、萬事起頭難：面試名單從哪來？</a></li><li><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">人力招募 - 二、見面談：招募第一關 面試</a></li><li><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">人力招募 - 三、深度對談：價值觀</a></li><li><a href="/2018/09/27/Management/Hiring-Step4-Salary/">人力招募 - 四、客觀談論：薪資</a></li><li><a href="/2018/10/07/Management/Hiring-Step5-Offer/">人力招募 - 五、最後確認：報到時程</a></li><li><a href="/2018/10/26/Management/Hiring-Step6-Onboard/">人力招募 - 六、到職後：訓練、目標、評核</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.bnext.com.tw/article/35164/BN-ARTICLE-35164" target="_blank" rel="noopener">馬雲辦大學，創業3年以上才能入學</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接續 &lt;a href=&quot;/2018/08/28/Management/Hiring-Step0-Initial/&quot;&gt;前一篇：準備篇&lt;/a&gt; 的介紹，繼續整理招聘的心得：&lt;code&gt;萬事起頭難，名單從哪來？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一般人找工作要不是主動投履歷，要不就被動等待通知面試。從招募角度也是，用人單位的面試名單不會從天上掉下來，這些名單要不是主動找來源，要不就被動等待。不管主動、被動，都要面對以下的幾個問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面試名單從哪來？&lt;/li&gt;
&lt;li&gt;如何過濾、篩選名單？&lt;/li&gt;
&lt;li&gt;為什麼面試意願不高？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="經營管理" scheme="http://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="用人之道" scheme="http://rickhw.github.io/tags/%E7%94%A8%E4%BA%BA%E4%B9%8B%E9%81%93/"/>
    
      <category term="Hiring" scheme="http://rickhw.github.io/tags/Hiring/"/>
    
      <category term="Interview" scheme="http://rickhw.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>人力招募 - 零、準備篇：確認需求、條件、定位、市場狀況</title>
    <link href="http://rickhw.github.io/2018/08/28/Management/Hiring-Step0-Initial/"/>
    <id>http://rickhw.github.io/2018/08/28/Management/Hiring-Step0-Initial/</id>
    <published>2018-08-27T19:21:00.000Z</published>
    <updated>2018-12-22T05:34:44.386Z</updated>
    
    <content type="html"><![CDATA[<p>聊聊人力招聘的心得，起手式 <code>準備篇：確認需求、條件、定位、市場狀況</code>。</p><a id="more"></a><!--## 招募系列文章這是個從管理者角度寫的招募系列文章，當然也有包含面試者的角度出發。完整整理請參閱底下：> * [零、準備篇：確認需求、條件、定位、市場狀況][h0]> * [一、萬事起頭難：面試名單從哪來？][h1]> * [二、見面談：招募第一戰場 面試][h2]--><hr><h1 id="零、準備篇：確認需求"><a href="#零、準備篇：確認需求" class="headerlink" title="零、準備篇：確認需求"></a>零、準備篇：確認需求</h1><h2 id="確認人力需求"><a href="#確認人力需求" class="headerlink" title="確認人力需求"></a>確認人力需求</h2><p>招募前，先問這些問題：</p><ul><li>這個角色的定位是什麼？主要任務？產出如何量化？</li><li>這個角色需要的技能、人格特質，包含硬技能、軟技能</li></ul><p>更進一步的問：</p><ul><li>這樣職能在市場多？市場哪裡有這樣的人？類似的職務？職稱？</li><li>薪資水準？如何衡量的？</li><li>所需技能能否自己培養？這樣的職能能做多久？</li><li>他的職涯規劃 (Carrier Path) 是什麼？</li></ul><p>內部的共識：</p><ul><li>上層對於這個職務工作產出的認知？薪資範圍？</li><li>HR 對於這個職務的看法？</li></ul><h2 id="工作描述"><a href="#工作描述" class="headerlink" title="工作描述"></a>工作描述</h2><p>都問過這些問題之後，可以開始準備 <code>工作描述 (Job Description, JD)</code>，一般會有兩個要寫：</p><ul><li><code>任務 (Mission)</code>：工作內容與範圍，要達成的目標</li><li><code>技能 (Skills)</code>：所需要技能，分成必要、與加分</li></ul><p>任務通常是目的導向，需要較多 <code>軟技能</code>，包含實際執行任務、溝通、表達、協作、團隊合作、組織能力、自我學習 … 等；技能通常是基本能進入的門檻與條件，大多是 <code>硬技能</code>，例如要會寫某種程式語言、要能演奏什麼樂器 … 等。</p><p>技能是技術人的檢驗第一關，寫需求要注意的是：</p><ul><li>要得越多，相對應的薪資期待就會越高。</li><li>要的技能越獨特，就越難找。</li><li>技能的 <code>深、淺</code> 自己心裡要有一把尺，例如什麼叫做 <code>精通 Java</code>、<code>Cloud 專家</code>？</li><li>寫得越多，面試檢驗就會越複雜，也會被社會大眾檢驗。</li><li>寫得越多，面試題目越難設計。</li><li>寫得越清楚，越容易找到適當的人，反之亦然。</li><li>對於這些形容詞心裡的尺要很清楚：初階、技能、經驗、專業、資淺、資深、專家、大師</li></ul><p>寫 JD 的同時，心理對於這個角色的定位最好有清楚的輪廓，包含他在組織的位置、<a href="/2018/09/27/Management/Hiring-Step4-Salary/">薪資範圍</a>、未來發展性 … 等面向。</p><p>完成這些部分，可以請 HR 在 JD 描述做一些包裝，增加公司文化、產品介紹、福利 … 等。</p><blockquote><p>更多任務與技能的說明，參閱： <a href="/2018/06/13/Management/Role-And-Responsibility/">Role And Responsibility</a></p></blockquote><h2 id="英文？"><a href="#英文？" class="headerlink" title="英文？"></a>英文？</h2><p>要考慮一下 JD 是否用英文寫，好處是可以做適度的篩選，看不懂英文的人根本就不用考慮。但要面對的現實是，通常來應徵的人要求也會相對比較高，這樣的狀況，要事先跟 HR 以及上層管理者溝通好，避免因此浪費時間。</p><h2 id="公司、產品、客戶介紹"><a href="#公司、產品、客戶介紹" class="headerlink" title="公司、產品、客戶介紹"></a>公司、產品、客戶介紹</h2><p>一般 JD 只有針對角色的技能、任務做說明，招募除了這些，另外很重要的面向還有：</p><ul><li>這家公司是做什麼的？</li><li>產品是什麼？</li><li>客戶是誰？</li></ul><p>透過梳理這些，讓自己、讓面試者更能夠清楚認識彼此，找到長久合作的共同目標。</p><h2 id="曝光管道"><a href="#曝光管道" class="headerlink" title="曝光管道"></a>曝光管道</h2><p>確認前述的狀況，寫好了 JD，接下來就是 JD 放哪了？人力銀行是最常見的做法。</p><p>這幾年軟體工程師很喜歡放在 Github 上招募，主要目的是讓吸引工程師的注意，覺得公司有著工程文化的特質。</p><p>底下是幾個常見的管道：</p><ul><li><a href="https://jobs.github.com/" target="_blank" rel="noopener">https://jobs.github.com/</a></li><li><a href="https://github.com/DevOpsTW/jobs/issues" target="_blank" rel="noopener">https://github.com/DevOpsTW/jobs/issues</a></li><li><a href="https://github.com/golangtw/jobs/issues" target="_blank" rel="noopener">https://github.com/golangtw/jobs/issues</a></li><li><a href="https://github.com/f2etw/jobs/issues" target="_blank" rel="noopener">https://github.com/f2etw/jobs/issues</a></li></ul><h2 id="職等"><a href="#職等" class="headerlink" title="職等"></a>職等</h2><p>這個角色資淺、資深、專家的定義與差異，以下這些問題要想過：</p><ul><li><code>資淺</code> 至少的條件是什麼？技能？經驗？薪資範圍？職等？Title？</li><li><code>資深</code> 至少的條件是什麼？技能？經驗？薪資範圍？職等？Title？</li><li><code>專家</code> 至少的條件是什麼？技能？經驗？薪資範圍？職等？Title？</li></ul><blockquote><p>關於資深、專家、大師請參閱：<a href="/2015/08/22/Management/Senior-Software-Developer/">Senior Software Developer</a>, 也可以思考 <a href="/2017/07/01/Management/Developer-or-Engineer/">Developer, or Engineer</a> 的差異。</p></blockquote><p><code>職等</code> 每家公司定義不一樣，有些甚至屬於機密，只有人事、管理者才知道。大部分理由都是因為跟薪資有關係，薪資在台灣通常屬於機密，所以對價的相關資訊也就變能不能公開。新創事業 (Startup) 通常不會有清楚的職等、薪資範圍，也不會區分管理職或者工程職的職別，因為事業初期，求生存是主要重點，職等、薪資範圍、職別通常會在企業發展到一定階段後才會開始討論。</p><p>有些新創是依附在既有的事業體系之下 (像是併購事業、新創事業)，所以沿用既有的人事制度也是很常見的，至於制度是否合理、適用，要看新創事業的發展狀況，如果發展的好，就容易取得話語權，自然就有機會建立自己的制度，否則大多都只能仰賴既有的制度。</p><!--## 職務別勞基法工讀生 基本工資--><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>底下整理一些會遇到的問題，不管是對內、對外、對上、對下。</p><p>Q: 對內：招募資料的寫法、格式、包裝問題。</p><blockquote><p>這要跟 HR 有密切的溝通與協作，有些東西要適度包裝，像是公司的經營模式；有些東西則不要，像是工作內容、技術需求、薪資範圍，這些要越清楚越好。</p></blockquote><p>Q: 對內對外：職務名稱的定位？像是 DevOps Engineer 是什麼？SRE 是什麼？</p><blockquote><p>跟我共事過的人大概會知道，我對 <code>名詞</code> 很挑惕。所以名稱我也都會特別思考其意義，同時也會跟 HR 以及上面的人說明。</p><p>DevOps 雖然這個詞普遍是針對文化上的定義，不是職務上的，但實際執行面上來講，他是有必要的、有專業度的、有技術鏈的，換言之，不是一般開發人員可以做的。很多人會說可以從 developer 中培養，這道理反過來說也行，我也可以從 Operator 培養，但重點是，培養要時間，當要即戰力的時候，要的是專業、經驗。所以實務上 DevOps Engineer 是一個工作職務。SRE 也是。</p><p>另外盡量不要創造新名詞，因為會造成招募上的困難與矛盾，間接地作繭自縛。</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>確認人力需求、條件、進行上層溝通是招募前的準備工作，就像開發軟體的需求管理一樣，需求不清楚，接下來的方向就容易做白工。下一個聊的是 <a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">萬事起頭難：面試名單從哪來？</a></p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募 (Hiring) - 目錄</a></li><li><a href="/2018/08/28/Management/Hiring-Step0-Initial/">人力招募 - 零、準備篇：確認需求、條件、定位、市場狀況</a></li><li><a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">人力招募 - 一、萬事起頭難：面試名單從哪來？</a></li><li><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">人力招募 - 二、見面談：招募第一關 面試</a></li><li><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">人力招募 - 三、深度對談：價值觀</a></li><li><a href="/2018/09/27/Management/Hiring-Step4-Salary/">人力招募 - 四、客觀談論：薪資</a></li><li><a href="/2018/10/07/Management/Hiring-Step5-Offer/">人力招募 - 五、最後確認：報到時程</a></li><li><a href="/2018/10/26/Management/Hiring-Step6-Onboard/">人力招募 - 六、到職後：訓練、目標、評核</a></li></ul><h2 id="站內延伸"><a href="#站內延伸" class="headerlink" title="站內延伸"></a>站內延伸</h2><ul><li><a href="/2018/06/13/Management/Role-And-Responsibility/">Role And Responsibility</a></li><li><a href="/2015/08/22/Management/Senior-Software-Developer/">Senior Software Developer</a></li><li><a href="/2017/07/01/Management/Developer-or-Engineer/">Developer, or Engineer</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;聊聊人力招聘的心得，起手式 &lt;code&gt;準備篇：確認需求、條件、定位、市場狀況&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="經營管理" scheme="http://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="用人之道" scheme="http://rickhw.github.io/tags/%E7%94%A8%E4%BA%BA%E4%B9%8B%E9%81%93/"/>
    
      <category term="Hiring" scheme="http://rickhw.github.io/tags/Hiring/"/>
    
      <category term="Job Description" scheme="http://rickhw.github.io/tags/Job-Description/"/>
    
  </entry>
  
  <entry>
    <title>聊聊人力招募 (Hiring) - 目錄</title>
    <link href="http://rickhw.github.io/2018/08/20/Management/Overview-Hiring/"/>
    <id>http://rickhw.github.io/2018/08/20/Management/Overview-Hiring/</id>
    <published>2018-08-19T19:21:00.000Z</published>
    <updated>2018-12-22T13:28:06.564Z</updated>
    
    <content type="html"><![CDATA[<p>今年有很多時間都放在如何作 <code>人力招聘 (Hiring)</code>，這系列文是整個過程中的心得、想法、遇到的問題。文章是從管理者、用人主管 角度出發，談到如何從需要資源開始、如何向上溝通、與人力資源協作、面試名單從哪裡來、如何面試、如何談薪資、報到之後如何確認符合需求 … 等。</p><a id="more"></a><hr><h1 id="關於招募系列文"><a href="#關於招募系列文" class="headerlink" title="關於招募系列文"></a>關於招募系列文</h1><p>招募是個難題，整個工作跟業務有些像，從零開始：確認目標、需求、找名單、打電話、面對人、設計流程、思考如何評斷、設計技能驗證方法、談薪資、面對市場的比較、對上溝通、跟 HR 協作、任用確認、OnBoard Training、確認符合 … 是個痛苦的漫漫長路。</p><p>整理這些文章，不是要炫耀做得很有心得、或做得很好，而是這件事情不容易，挫折滿滿、充滿角力、血淋淋，因為如此，更需要好好的沈澱，好好的討論如何把它做好。</p><p>招募工讀生是招募、招募工程師是招募、招募架構師是招募，不管怎樣的角色，都應該好好面對它，把他做好，這是對工作負責，敬業的表現。</p><blockquote><p>招募只是管理工作之一，從整個員工在職的生命週期來看，頭到尾、起到訖，有招募 (hiring)，就有解雇(fire)、資遣 (lay-off)、離職 (quit) ，起訖之中的在職時間，就是訓練、考核、升等、轉任 … 等，這些都是管理者必經與面對的過程。這系列招募文是管理工作的其中一塊拼圖。</p></blockquote><p>這系列文章，將從管理者、用人主管的角度，整理整個招募過程需要面對的人事物，從頭到尾的心得筆記 (血淋淋)。如果想要做管理、想做主管、想建立團隊，這是個必經的過程，這些心得或許可以參考看看。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>招募工作通常會有以下角色：</p><ul><li>甲方<ul><li>應試者、Candidate、勞方</li></ul></li><li>乙方<ul><li>用人主管、面試官、資方</li><li>人力資源、HR</li><li>用人主管的主管</li></ul></li><li>第三方<ul><li>獵頭 (Head Hunter)</li><li>社群</li></ul></li></ul><h2 id="招募系列文章"><a href="#招募系列文章" class="headerlink" title="招募系列文章"></a>招募系列文章</h2><p>我把整個招募流程分成以下部分：</p><ul><li><a href="/2018/08/28/Management/Hiring-Step0-Initial/">零、準備篇：確認需求、條件、定位、市場狀況</a></li><li><a href="/2018/08/30/Management/Hiring-Step1-Find-the-Candidates/">一、萬事起頭難：面試名單從哪來？</a>：撈單、詢問意願、電訪</li><li><a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">二、見面談：招募第一關 面試</a>：面試流程、評核</li><li><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">三、深度對話：價值觀</a>：為什麼二面？</li><li><a href="/2018/09/27/Management/Hiring-Step4-Salary/">四、客觀談論：薪資</a>：薪資談論的考量點</li><li><a href="/2018/10/07/Management/Hiring-Step5-Offer/">五、最後確認：報到時程</a></li><li><a href="/2018/10/26/Management/Hiring-Step6-Onboard/">六、到職後：訓練、目標、評核</a></li></ul><p>這些過程，所要篩選、經歷的，很像是一個拓展市場的業務要經歷的過程，人數從多到少，逐漸篩選，是個倒三角形的形狀。</p><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="/2015/08/22/Management/Senior-Software-Developer/">Senior Software Developer</a></li><li><a href="/2018/06/13/Management/Role-And-Responsibility/">Role And Responsibility</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年有很多時間都放在如何作 &lt;code&gt;人力招聘 (Hiring)&lt;/code&gt;，這系列文是整個過程中的心得、想法、遇到的問題。文章是從管理者、用人主管 角度出發，談到如何從需要資源開始、如何向上溝通、與人力資源協作、面試名單從哪裡來、如何面試、如何談薪資、報到之後如何確認符合需求 … 等。&lt;/p&gt;
    
    </summary>
    
      <category term="經營管理" scheme="http://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="用人之道" scheme="http://rickhw.github.io/tags/%E7%94%A8%E4%BA%BA%E4%B9%8B%E9%81%93/"/>
    
      <category term="Hiring" scheme="http://rickhw.github.io/tags/Hiring/"/>
    
  </entry>
  
  <entry>
    <title>CAP Theorem</title>
    <link href="http://rickhw.github.io/2018/08/11/Architecture/CAP-Theorem/"/>
    <id>http://rickhw.github.io/2018/08/11/Architecture/CAP-Theorem/</id>
    <published>2018-08-11T14:30:00.000Z</published>
    <updated>2018-12-09T05:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理 CAP 理論的筆記。</p><a id="more"></a><h2 id="CAP-Theorem"><a href="#CAP-Theorem" class="headerlink" title="CAP Theorem"></a><a href="https://en.wikipedia.org/wiki/CAP_theorem" target="_blank" rel="noopener">CAP Theorem</a></h2><p>由 加州柏克萊分校教授 <a href="https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)" target="_blank" rel="noopener">Eric Brewer</a> 在 1999 年的論文中發表：<a href="https://users.ece.cmu.edu/~adrian/731-sp04/readings/GL-cap.pdf" target="_blank" rel="noopener">Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services</a>。論文中第一次提到 CAP 三者的關係，描述如下：</p><ul><li><code>一致性 (Consistency)</code>：每次讀取有兩個結果，一種是取得最近寫入的資料，另一種則是得到錯誤</li><li><code>可用性 (Availability)</code>：每次請求都能獲得一個 (非錯誤)回應，但不保證返回的是最新寫入的資料</li><li><code>分區容忍 (Partition tolerance)</code>：任意數量的訊息被節點間的網路丟失 (或延遲)，系統仍繼續運行。</li></ul><p>論文的結論是：分散式系統裡，CAP 三者無法同時被滿足，只能擇其二。下圖則是 w3resource 在其文件中描述 NoSQL 時提到的 CAP 的關係，與其他實作的概念：</p><p><img src="/images/Architecture/cap-theoram-image.png" alt=""><br>Source: <a href="https://www.w3resource.com/mongodb/nosql.php" target="_blank" rel="noopener">https://www.w3resource.com/mongodb/nosql.php</a></p><p>CAP 常見的排列組合：</p><ul><li>CA (consistency + availability)<ul><li>RDBMS</li><li>2PC (2 Phase Commit, 二階段提交)</li></ul></li><li>CP (consistency + partition tolerance)<ul><li>Paxos 演算法</li></ul></li><li>AP (availability + partition tolerance)<ul><li>關注的是 <code>可用性</code> 與 <code>分區容錯</code></li><li>[Dynamo][ct5]</li></ul></li></ul><p>Google I/O 2009 <a href="https://www.youtube.com/watch?v=srOgpXECblk" target="_blank" rel="noopener">Transactions Across Datacenters</a> 整理一了張很有意思的結論，如下圖：</p><p><img src="/images/Architecture/Distributed-Systems/GoogleIO2009_CAP_Practice.png" alt=""></p><hr><h1 id="延伸閱讀-站內"><a href="#延伸閱讀-站內" class="headerlink" title="延伸閱讀 (站內)"></a>延伸閱讀 (站內)</h1><ul><li><a href="/2018/06/18/Architecture/Gossip-in-Distributed-Systems/">聊聊分散式系統</a></li><li><a href="/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/">分散式一致性問題與共識演算法</a></li><li><a href="/2018/06/18/Architecture/Distributed-Message-Systems/">Distributed Message Systems</a></li></ul><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://www.pixpo.net/technology/0INvY0aG.html" target="_blank" rel="noopener">左耳朵耗子：分散式系統架構經典資料</a></li><li><a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing" target="_blank" rel="noopener">Fallacies of distributed computing</a></li><li><a href="https://www.youtube.com/watch?v=srOgpXECblk" target="_blank" rel="noopener">Google I/O 2009 - Transactions Across Datacenters</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理 CAP 理論的筆記。&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://rickhw.github.io/categories/Architecture/"/>
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/categories/Architecture/Distributed-Systems/"/>
    
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/tags/Distributed-Systems/"/>
    
      <category term="Distributed Consensus" scheme="http://rickhw.github.io/tags/Distributed-Consensus/"/>
    
      <category term="Consensus Algorithm" scheme="http://rickhw.github.io/tags/Consensus-Algorithm/"/>
    
      <category term="CAP" scheme="http://rickhw.github.io/tags/CAP/"/>
    
      <category term="ACID" scheme="http://rickhw.github.io/tags/ACID/"/>
    
      <category term="BASE" scheme="http://rickhw.github.io/tags/BASE/"/>
    
      <category term="Raft" scheme="http://rickhw.github.io/tags/Raft/"/>
    
      <category term="Paxos" scheme="http://rickhw.github.io/tags/Paxos/"/>
    
      <category term="Blockchain" scheme="http://rickhw.github.io/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>分散式一致性與共識演算法</title>
    <link href="http://rickhw.github.io/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/"/>
    <id>http://rickhw.github.io/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/</id>
    <published>2018-08-11T14:30:00.000Z</published>
    <updated>2018-12-09T05:31:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近研讀 <a href="/2018/06/18/Architecture/Gossip-in-Distributed-Systems/">分散式系統</a> 時，遇到兩個常出現的議題：</p><ol><li>分散式一致性問題 (Distributed Consistency Problems)</li><li>共識演算法 (Consensus Algorithm)</li></ol><p>整理最近瀏覽的資料。</p><a id="more"></a><hr><h1 id="核心議題：分散式一致性問題-Distributed-Consistency-Problems"><a href="#核心議題：分散式一致性問題-Distributed-Consistency-Problems" class="headerlink" title="核心議題：分散式一致性問題 (Distributed Consistency Problems)"></a>核心議題：分散式一致性問題 (Distributed Consistency Problems)</h1><p>分散式系統中，只要是資料，就一定會跟 <code>一致性 (consistency)</code> 的問題有關係。</p><h2 id="相關議題、名詞-待整理"><a href="#相關議題、名詞-待整理" class="headerlink" title="相關議題、名詞 (待整理)"></a>相關議題、名詞 (待整理)</h2><ul><li>CAP</li><li>BASE: Basically Available、Soft state、Eventual consistency</li><li>ACID: Atomic, Consistency, Isolation, Durable</li><li>Two-phase Commit (2PC): 二階段提交協議，這是種 distributed algorithm</li><li><a href="https://en.wikipedia.org/wiki/Three-phase_commit_protocol" target="_blank" rel="noopener">Three-phase Commit (3PC)</a>: 三階段提交協議，distributed algorithm</li><li>Partition、Sharding (分區、分片)</li><li>Replication (副本)</li></ul><!--## BASE* Basically Available* Soft state* Eventual consistencyBigTable, Cassandra, SimpleDB## ACID* Atomic* Consistency* Isolation* Durable## Two-phase CommitTwo-phase Commit (以下簡稱 2PC)--><h2 id="拜占庭將軍問題"><a href="#拜占庭將軍問題" class="headerlink" title="拜占庭將軍問題"></a>拜占庭將軍問題</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">拜占庭將軍問題</a> 是由 Leslie Lamport 在他最有名的論文中提出來的：<a href="https://web.archive.org/web/20170205142845/http://lamport.azurewebsites.net/pubs/byz.pdf" target="_blank" rel="noopener">The Byzantine Generals Problem</a>。</p><blockquote><p>Leslie Lamport 是美國計算機科學家，2013 年獲得圖靈獎，他也是著名排版系統 LaTeX 的開發者。</p></blockquote><p>主要描述在分散式系統中，不同的節點透過網路交換資料，達成共識，然後按照此共識進行策略行動。但有時候系統中的節點，可能因為傳送過程中的錯誤，造成全員資訊不一致，導致協作策略得到不一樣的結論，最後破壞了系統的一致性。拜占庭將軍問題被認為是容錯性問題中最難的問題類型之一。</p><p>拜占庭將軍問題大概如下：</p><blockquote><p>在中世紀，拜占庭帝國的幾位將軍帶兵共同為攻一座城市。他們必須一起進攻，或者一起撤退，否則就是災難性後果。但是每個將軍四散在各處，無法一起討論，只能透過通訊方式投票，描述自己是進攻、還是撤退。所有將軍收到其他將軍的投票後，再決定自己是進攻、還是撤退。</p><p>假設所有將軍都不會叛變，那就依照投票結果就好。但問題是，將軍中可能有叛徒。九個將軍投票，四個人進攻、四個人投撤退，一個人選擇背叛，分別告訴告訴四個人進攻、四個人撤退，結果就是同時四個進攻、四個撤退。</p></blockquote><p><code>拜占庭容錯演算法 (PBFT)</code> 是 1999 年 由 Miguel Castro 和 Barbara Liskov 提出的，實現只要叛徒不超過三分之一，忠誠的將軍們就能達成一致結果。</p><!--拜占庭將軍問題導出以下幾個分散式系統的核心理論：* CAP*--><p>相關技術：</p><ul><li>拜占庭容錯架構：FTMP、MMFCS、SIFT</li><li>拜占庭容錯演算法：PBFT</li><li>拜占庭容錯通訊 (BFT)：Q/U, HQ, …</li></ul><hr><h1 id="核心議題：共識演算法-Consensus-Algorithm"><a href="#核心議題：共識演算法-Consensus-Algorithm" class="headerlink" title="核心議題：共識演算法 (Consensus Algorithm)"></a>核心議題：共識演算法 (Consensus Algorithm)</h1><p>共識演算法是分散式系統中重要的通訊機制，像是 Service Discovery 的實作都會基於這樣的核心理論，同時他也是現今流行的區塊鏈技術的基礎。</p><h2 id="Paxos-演算法"><a href="#Paxos-演算法" class="headerlink" title="Paxos 演算法"></a>Paxos 演算法</h2><p>同樣的是由 Leslie Lamport 提出來的 <a href="https://zh.wikipedia.org/zh-tw/Paxos%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Paxos 演算法</a>，主要目的是基於消息傳遞且具有高度容錯特性的一致性演算法。Google 在分散式所服務 (Chubby lock) 使用 Paxos 演算法。Chubby lock 這個架構應用在 Bigtable 展品中。</p><h2 id="Raft-演算法"><a href="#Raft-演算法" class="headerlink" title="Raft 演算法"></a>Raft 演算法</h2><p>Stanford 大學的教授 Diego Ongaro and John Ousterhout 發表一篇論文：<a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf" target="_blank" rel="noopener">In Search of an Understandable Consensus Algorithm</a>，演算法的方法和 Paxos 效能與功能一樣，但是卻是更容易實踐的演算法。他的核心概念：</p><blockquote><p>如果在分散式系統中多個數據庫的初始狀態一致，只要之後進行的操作順序一致，就能保證之後的執行結果一致。</p></blockquote><p>從動畫中了解 <a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">Raft 演算法</a></p><!-- FLP Impossibility Result --><h2 id="共識演算法"><a href="#共識演算法" class="headerlink" title="共識演算法"></a>共識演算法</h2><p>底下整理自 <a href="https://hackernoon.com/consensuspedia-an-encyclopedia-of-29-consensus-algorithms-e9c4b4b7d08f?gi=b1de083eb98e" target="_blank" rel="noopener">ConsensusPedia: An Encyclopedia of 30 Consensus Algorithms</a> (<a href="https://itw01.com/QF8Z7EI.html" target="_blank" rel="noopener">中文</a>)，如果對區塊鏈有興趣，這些看是很有關係的。</p><ul><li>工作量證明 (PoW，Proof of Work): 比特幣, 跟 PBFT 相比，有一半的容錯率，換句話說，有 50% 以上的叛徒才行，或者破壞一半以上的網路才行。缺點是需要很大的電力成本。</li><li>權益證明 (PoS，Proof of Stake): 以太幣, 相比於 PoW 節約了大量的資源，但他會造成富者越富，窮者越窮，然後用戶會流失，新用戶也不願意加入。</li><li>延遲工作量證明 (dPoW，Delayed Proof-of-Work)</li><li>授權 PoS (DPoS，Delegated Proof-of-Stake): 維基鏈（WICC）</li><li>權威證明 (PoA，Proof-of-Authority)</li><li>權重證明 (PoWeight，Proof-of-Weight)</li><li>聲譽證明 (PoR，Proof of Reputation)</li><li>所用時間證明 (PoET，Proof of Elapsed Time)</li><li>容量證明 (PoC，Proof of Capacity)，也稱為空間證明 (PoSpace，Proof of Space)</li><li>歷史證明 (PoHistory，Proof of History)</li><li>權益流通證明 (PoSV，Proof of Stake Velocity)</li><li>重要性證明 (PoImportance，Proof of Importance)</li><li>身份證明 (PoI，Proof of Identity)</li><li>活動證明 (PoActivity，Proof Of Activity)</li><li>時間證明 (PoTime，Proof of Time)</li><li>存在證明 (PoExistence，Proof of Existence)</li><li>Ouroboros</li><li>可收回證明 (PoR，Proof of Retrievability)</li><li>拜占庭容錯 (Byzantine Fault Tolerance)</li><li>授權拜占庭容錯演算法 (dBFT，Delegated Byzantine Fault Tolerance)</li><li>RAFT</li><li>恆星共識 (Stellar Consensus)</li><li>置信度證明 (PoB，Proof of Believability)</li><li>有向無環圖 (DAG，Directed Acyclic Graphs)<ul><li>Tangle (IOTA)</li><li>Hashgraph</li><li>Holochain</li><li>Block-Lattice (Nano)</li><li>SPECTRE</li><li>ByteBall</li></ul></li></ul><h2 id="共識演算法的應用"><a href="#共識演算法的應用" class="headerlink" title="共識演算法的應用"></a>共識演算法的應用</h2><ul><li>Service Discovery: <a href="https://blog.containership.io/etcd" target="_blank" rel="noopener">etcd</a>, <a href="https://www.consul.io/docs/internals/consensus.html" target="_blank" rel="noopener">Consul</a>, ZooKeeper, Google Chubby Lock</li><li><a href="https://speakerdeck.com/elastic/consensus-and-replication-in-elasticsearch?slide=9" target="_blank" rel="noopener">Consensus and Replication in Elasticsearch</a></li><li>區塊鏈<ul><li>比特幣: PoW (Proof of Work)</li><li>以太幣: PoS (Proof of Stake)</li><li>維基鏈（WICC）: DPoS (Delegated Proof of Stake)</li></ul></li></ul><hr><h1 id="結論：生活中訊息的一致性問題"><a href="#結論：生活中訊息的一致性問題" class="headerlink" title="結論：生活中訊息的一致性問題"></a>結論：生活中訊息的一致性問題</h1><p>古代戰爭時，四處的資訊，除了用快馬，透過驛站交接傳遞，烽火台是更快的方式。透過視覺傳遞，快速的讓各地的烽火台、決策者，知道該怎麼決策，這可以說是一致性問題最古早的方式之一了。烽火台的例子是集中式的訊息一致性問題，拜占庭問題則是反過來，他是分散式一致性問題。</p><!--# 延伸閱讀 (站內)--><hr><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://www.pixpo.net/technology/0INvY0aG.html" target="_blank" rel="noopener">左耳朵耗子：分散式系統架構經典資料</a></li><li><a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing" target="_blank" rel="noopener">Fallacies of distributed computing</a></li></ul><h2 id="論文"><a href="#論文" class="headerlink" title="論文"></a>論文</h2><ul><li><a href="https://users.ece.cmu.edu/~adrian/731-sp04/readings/GL-cap.pdf" target="_blank" rel="noopener">Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services</a></li><li><a href="https://blog.csdn.net/changtao381/article/details/7480333" target="_blank" rel="noopener">CAP Confusion: Problems with Partition Tolerance</a></li><li><a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf" target="_blank" rel="noopener">In Search of an Understandable Consensus Algorithm</a></li><li><a href="https://web.archive.org/web/20170205142845/http://lamport.azurewebsites.net/pubs/byz.pdf" target="_blank" rel="noopener">The Byzantine Generals Problem</a></li><li>SRE Chapter 23: <a href="https://landing.google.com/sre/book/chapters/managing-critical-state.html" target="_blank" rel="noopener">Managing Critical State: Distributed Consensus for Reliability</a></li><li><a href="https://pdfs.semanticscholar.org/245f/63a7d9f8bedde80557047eab9940d28c4026.pdf" target="_blank" rel="noopener">Distributed programming in Argus</a> by Dr. Barbara Liskov (Turing Award)</li></ul><h2 id="演算法"><a href="#演算法" class="headerlink" title="演算法"></a>演算法</h2><ul><li><a href="https://hackernoon.com/consensuspedia-an-encyclopedia-of-29-consensus-algorithms-e9c4b4b7d08f?gi=b1de083eb98e" target="_blank" rel="noopener">ConsensusPedia: An Encyclopedia of 30 Consensus Algorithms</a></li><li><a href="https://www.samsonhoi.com/570/blockchain-pbft" target="_blank" rel="noopener">區塊鏈 Blockchain – 共識機制之實用拜占庭容錯 PBFT</a></li><li><a href="https://www.samsonhoi.com/583/blockchain-raft" target="_blank" rel="noopener">區塊鏈 Blockchain – 共識機制之 Raft</a></li><li><a href="https://raft.github.io/" target="_blank" rel="noopener">The Raft Consensus Algorithm</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近研讀 &lt;a href=&quot;/2018/06/18/Architecture/Gossip-in-Distributed-Systems/&quot;&gt;分散式系統&lt;/a&gt; 時，遇到兩個常出現的議題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分散式一致性問題 (Distributed Consistency Problems)&lt;/li&gt;
&lt;li&gt;共識演算法 (Consensus Algorithm)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整理最近瀏覽的資料。&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://rickhw.github.io/categories/Architecture/"/>
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/categories/Architecture/Distributed-Systems/"/>
    
    
      <category term="Service Discovery" scheme="http://rickhw.github.io/tags/Service-Discovery/"/>
    
      <category term="Distributed Systems" scheme="http://rickhw.github.io/tags/Distributed-Systems/"/>
    
      <category term="Distributed Consensus" scheme="http://rickhw.github.io/tags/Distributed-Consensus/"/>
    
      <category term="Consensus Algorithm" scheme="http://rickhw.github.io/tags/Consensus-Algorithm/"/>
    
      <category term="CAP" scheme="http://rickhw.github.io/tags/CAP/"/>
    
      <category term="ACID" scheme="http://rickhw.github.io/tags/ACID/"/>
    
      <category term="BASE" scheme="http://rickhw.github.io/tags/BASE/"/>
    
      <category term="Raft" scheme="http://rickhw.github.io/tags/Raft/"/>
    
      <category term="Paxos" scheme="http://rickhw.github.io/tags/Paxos/"/>
    
      <category term="Blockchain" scheme="http://rickhw.github.io/tags/Blockchain/"/>
    
      <category term="Algorithm" scheme="http://rickhw.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>推薦：Site Reliability Engineering (SRE, 網站可靠性工程)</title>
    <link href="http://rickhw.github.io/2018/08/03/DevOps/An-Introduction-to-SRE/"/>
    <id>http://rickhw.github.io/2018/08/03/DevOps/An-Introduction-to-SRE/</id>
    <published>2018-08-03T04:43:00.000Z</published>
    <updated>2018-10-09T08:50:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>SRE 全名是 <code>Site Reliability Engineering 網站可靠性工程</code>，是 Google 提倡的系統管理實踐之道、指導思想，這個名詞同時也是 <strong>軟體工程師 (Software Engineer)</strong> 的角色，可以類比於傳統的維運工程師或系統工程師，但是 SRE 是用 <code>計算機科學</code> 和 <code>軟體工程</code> 手段，實踐 <code>大型系統維運</code>、<a href="/2018/06/18/Architecture/Gossip-in-Distributed-Systems/">分散式系統</a> 的設計與開發。</p><a id="more"></a><hr><h1 id="推薦閱讀"><a href="#推薦閱讀" class="headerlink" title="推薦閱讀"></a>推薦閱讀</h1><p>這本書我個人分成以下幾個部分，讀者可以依據個人身份、角色、經驗，選擇有興趣的部分：</p><ul><li><code>一、指導原則</code>：這段是描述 SRE 時會提到的關鍵原則</li><li><code>二、事件管理</code>：該如何面對異常事件、管理、從失敗中學習</li><li><code>三、工程實踐</code>：用軟體工程來看待系統維運</li><li><code>四、管理與訓練</code>：管理者如何在團隊中實踐 SRE 的精神。</li><li><code>五、箴言</code>：書本有很多讓人省思的箴言，值得深思</li></ul><h2 id="一、指導原則"><a href="#一、指導原則" class="headerlink" title="一、指導原則"></a>一、指導原則</h2><p>這本書 Part 2 談 SRE 的指導原則，也是大部分在描述 SRE 的文章、或者職缺描述 (Job Description, JD) 時，一定會有的原則，這些原則包含了：</p><ul><li>擁抱風險、錯誤預算 (Error Budget)：重點在於激勵團隊共同承擔責任，從錯誤中學習，這點跟 DevOps 精神是一致的。</li><li>服務水準目標：討論 SLIs, SLOs, SLAs 等概念</li><li>減少瑣事：用 50% 的時間，開發自動化維運工作</li><li>監控分散式系統</li><li>自動化、簡單化：自動化可能的問題以及其必要性</li><li><a href="https://en.wikipedia.org/wiki/Release_engineering" target="_blank" rel="noopener">發行工程 (Release Engineering)</a>：可以說是對應到 <a href="https://www.tenlong.com.tw/products/9789862019627" target="_blank" rel="noopener">持續交付 (Continuous Delivery)</a> 的概念</li><li>軟體工程實踐維運工作：這也是 SRE 跟一般維運工程師、系統工程師不一樣，重點在於 <a href="/2018/03/29/About/2018-Serverless-All-Star/">Ops as Code</a> 的概念</li></ul><p>這段是認識 SRE 想法的入門心法，要如何讓團隊理解 SRE，這些章節提供了很多指導原則。</p><h2 id="二、事件管理"><a href="#二、事件管理" class="headerlink" title="二、事件管理"></a>二、事件管理</h2><p>書本 <a href="https://landing.google.com/sre/book/chapters/part3.html" target="_blank" rel="noopener">Part 3 具體實踐</a> 針對 <code>事件管理</code> 有很多著墨，我以時間點來看整理事件的 <code>前</code>、<code>中</code>、<code>後</code> ，團隊應該做什麼？下圖是我整理的想法，也是 SRE 書中提到的概念：</p><!-- ![](/images/SRE/Incident-management_20180810.jpg) --><p><img src="/images/SRE/Emergency-IncidentManagementWithSRE/A-01.png" alt=""></p><blockquote><p>詳細參閱：<a href="/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/">演講：從緊急事件 談 SRE 應變能力的培養</a>：我在 DevOpsDays Taipei 2018 分享的心得</p></blockquote><p>書本章節先後次序剛好是時間軸次序，整理如下：</p><ul><li><a href="https://landing.google.com/sre/book/chapters/being-on-call.html" target="_blank" rel="noopener">CH11 Being On-Call</a>: 從事件發生之前，如何平衡 On-call 的工作</li><li><a href="https://www.slideshare.net/rickhwang/sre-ch12-effective-troubleshooting-83573925" target="_blank" rel="noopener">CH12 Effective Troubleshooting</a>: 討論事件當下，如何有效地故障排除技巧</li><li><a href="https://www.slideshare.net/rickhwang/sre-ch13-emergency-response" target="_blank" rel="noopener">CH13 Emergency Response</a>: 整理了緊急事件處理的案例，以及面對的方法</li><li><a href="https://www.slideshare.net/rickhwang/sre-ch13-emergency-response" target="_blank" rel="noopener">CH14 Managing Incidents</a>: 討論事件管理的方法，事件當下的角色、協作、作業、程序、溝通 … 等</li><li><a href="https://landing.google.com/sre/book/chapters/postmortem-culture.html" target="_blank" rel="noopener">CH15 Postmortem Culture: Learning from Failure</a>: 如何從錯誤中學習的文化、不究責</li><li><a href="https://landing.google.com/sre/book/chapters/accelerating-sre-on-call.html" target="_blank" rel="noopener">CH28 Accelerating SREs to On-Call and Beyond</a>: 如何培養 SRE 加入 On-Call</li><li><a href="https://landing.google.com/sre/book/chapters/lessons-learned.html" target="_blank" rel="noopener">CH33 Lessons Learned from Other Industries</a>: 從不同專業背景學習</li></ul><p>異常事件處理非常仰賴紮實的軟體工程、團隊協作能力、應變管理，在各種領域都有類似的案例。特別用了其他領域的經驗，整理了類似的想法給大家參考：</p><ul><li><a href="/2018/01/07/DevOps/Emergency-Response/">緊急應變 (Emergency Response)</a>：這篇整理幾個例子，其中電影『薩利機長』是我最喜歡引用的例子。</li><li><a href="/2018/05/27/DevOps/Emergency-Response-on-Stage/">跨領域的緊急應變 - SRV 斷弦事件</a>：音樂舞台表演看異常事件的處理</li></ul><p>如果你的時間有限、如果你不是技術背景，那麼推薦閱讀這些章節！會讓你有醍醐灌頂的感覺！</p><h2 id="三、工程實踐"><a href="#三、工程實踐" class="headerlink" title="三、工程實踐"></a>三、工程實踐</h2><p>SRE 很強調用 <code>計算機科學</code>、<code>軟體工程</code> 實踐維運工作。書裡 Part 3 具體實踐有一半的章節都在談論這些屬於硬技能的工程實踐，包含了以下：</p><ul><li>前端伺服器的負載平衡、資料中心內部的附載平衡</li><li>處理系統超載 (QPS, Rate Limit)、處理連鎖反應</li><li>分散式系統：分散式一致化提高可靠性、分散式排成任務、資料處理管線、資料讀寫一致性 (<a href="https://en.wikipedia.org/wiki/CAP_theorem" target="_blank" rel="noopener">CAP theorem</a>)、<a href="/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/">分散式共識</a></li><li>可靠的進行大規模發行 (Launch Coordination Engineers, LCE)</li></ul><p>其中對於 <code>負載平衡 (Load Balancer)</code> 有很多技術、原理的著墨，特別是在 <a href="/2018/06/18/Architecture/Gossip-in-Distributed-Systems/">分散式架構</a> 盛行的年代，很多人不會注意到 <a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing" target="_blank" rel="noopener">分散式系統謬論</a>、<a href="/2018/05/03/AWS/Study-Notes-API-Gateway-Rate-Limit-and-Throttling/">Rate Limit and Throttling</a>、<a href="/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/">分散式共識</a>、<a href="/2018/06/18/Architecture/Distributed-Message-Systems/">Message Bus</a> … 等核心問題。</p><p>想要深入了解大型分散式系統是如何運作、背後的原理，想要成為架構師、規劃出能面對大流量的系統，這些章節是必讀的！</p><h2 id="四、管理與訓練"><a href="#四、管理與訓練" class="headerlink" title="四、管理與訓練"></a>四、管理與訓練</h2><p>如何把 SRE 的概念放入既有的團隊是不容易的，如果你是團隊的 Leader、技術管理階層、企業經營者、產品經理，這些章節是可以好好研究的：</p><ul><li>可靠的進行大規模發行</li><li>迅速培養 SRE 加入 on-call</li><li>SRE 與其他團隊的溝通與協作</li><li>SRE 參與模型的演進歷程</li><li>其他行業的實踐經驗</li></ul><p>DevOps 的精神強調團隊的垂直整合，而身為管理者的你，如何讓這樣的新觀念、想法落實到現場，落地到組織，讓團隊能夠自主學習，這些章節有詳細的說明。</p><h2 id="五、箴言-Slogan"><a href="#五、箴言-Slogan" class="headerlink" title="五、箴言 (Slogan)"></a>五、箴言 (Slogan)</h2><p>這本書很多章節開頭有一些意義深遠的 <strong>箴言 (Slogan)</strong>，完整請參考『<a href="/2017/12/12/DevOps/Slogan-in-SRE/">Slogan in SRE</a>』的整理。如果想要快速、簡單的了解這本書的精神與想法，快速讀過這些句子，你大概知道這本書的想法。底下整理我個人很喜歡的句子：</p><blockquote><ul><li>Hope is not a strategy. (不能將運氣當作策略)</li><li>Be warned that being an expert is more than understanding how a system is supposed to work. Expertise is gained by investigating why a system doesn’t work. (值得警惕的是，理解一個系統如何工作，並不能使人成為專家。只有靠調查系統為何不能正常工作才行。)</li><li>Things break; that’s life. (東西早晚要壞的，這就是生活。)</li><li>If you haven’t tried it, assume it’s broken. (如果你還沒開始親自測試過某件東西，那麼就假設他是壞的。)</li><li>The cost of failure is education. (學習是避免失敗的最好辦法。)</li></ul></blockquote><p>這些只是其中一小部分，而我個人最喜歡的句子：</p><blockquote><p>Things break; that’s life.</p></blockquote><p>這句話在 AWS Whitepaper 也經常提到類似的概念，像是 <a href="https://www.slideshare.net/AmazonWebServices/best-practices-for-architecting-in-the-cloud-jeff-barr/10-Design_for_Failure_with_AWS" target="_blank" rel="noopener">Design for failure</a>：不管是什麼東西，都會壞掉，設計架構時，就要思考壞了怎麼辦？同樣的， <code>Chaos Engineering</code> 也是同樣的概念。</p><p>另外一段話也是我很喜歡的：</p><blockquote><p>值得警惕的是，理解一個系統如何工作，並不能使人成為專家。只有靠調查系統為何不能正常工作才行。</p></blockquote><p>這段話呼應到我平常 <a href="/2017/12/02/About/Epiphany/">鼓勵同事的話</a>：</p><blockquote><p>沒什麼大神，雷踩多了，還活著的，就是大神。</p></blockquote><p>這是一種推坑的概念，但是延伸想法平常的開發流程，就是要多做 <a href="/2018/03/18/SQA/Gossip-System-Testing/">系統性的測試</a>。</p><hr><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>Q1: DevOps 和 SRE 有啥不一樣？</p><blockquote><p>Google 說 SRE 是 DevOps 的實踐，用程式碼表示就是：<a href="https://www.youtube.com/watch?v=uTEL8Ff1Zvk" target="_blank" rel="noopener">class SRE implements DevOps</a>。我個人的看法：DevOps 是 <code>理念原則</code>，SRE 則是 <code>實踐方法</code>。</p><p><code>DevOps</code> 現在的我是用整個 <code>企業經營</code> 的角度來看 (高大上)，也就是 Development 其實是產品開發週期，包含從需求、寫程式、測試、部署等段落，各式各樣的開發流程，不管是敏捷開發、還是我整理的 <a href="/2017/09/14/SoftwareEngineering/Software-Development-Lifecycle/">Software Development Lifecycle</a> 都是在討論這段；而 Operation 則是企業整體的營運。從業務把客戶引入之後，開始使用產品，形成營收 (Incoming)、系統維運成本、企業經營成本、最後算出的淨利、毛利 … 等。Operation 我看的是 <code>COO (營運長)</code> 的概念，Development 我看的是 <code>CPO (產品長)</code> 的概念。</p></blockquote><p>Q2: SRE 要會啥技能？</p><blockquote><p>SRE 也是軟體工程師，他除了需要具備傳統系統工程師 (System Engineer) 的技能之外，同時要具備 <code>軟體開發</code> 的能力。至少會一種 script、一種 compiling language 是基本的，了解基礎的 <code>計算機科學</code> 知識，像是 OS、Algorithm、Data Structure、Computer Architecture、Networking … 都是必要的基礎專業。</p></blockquote><p>Q3: SRE 跟傳統的 MIS、機房 OP 有什麼差異？</p><blockquote><p>SRE 的主軸任務是維持系統的穩定服務，必須用程式自動化完成這些任務。<a href="/2017/12/21/DevOps/What-is-Automation/">自動化</a> 代表著，要瞭解如何 <code>軟體工程</code> 達到目的，而不只是為了自動化而自動化。</p></blockquote><p>Q4: SRE 這本書翻譯的好嗎？</p><blockquote><p>SRE 簡、繁中文版譯者 <a href="http://www.infoq.com/cn/interviews/interview-with-sunyucong-talk-programmers-master-consciousness" target="_blank" rel="noopener">孫宇聰</a>，中國人，2007-2014 在 Google SRE Team。因為他本身就在 Google SRE 待過很長的時間，所以語意上不是問題，簡繁中文版我都有看過，閱讀上是可以接受與理解的。</p></blockquote><p>Q5: 有哪些領域和 SRE 有關係？</p><blockquote><p>這個問題有點意思，用這張圖來回答比較生動：<br><img src="/images/SRE/20180430_SRE-associated-with-dss_v3-20180804.png" alt=""><br>原文 <a href="https://www.facebook.com/groups/sre.taiwan/permalink/1018955371603700/" target="_blank" rel="noopener">點這裡</a>，歡迎來喇低賽 XD</p></blockquote><p>Q6: SRE 的概念會不會跟 <code>敏捷開發</code> 有衝突？</p><blockquote><p>這些想法不會衝突。SRE 是強調用 <code>軟體工程</code>、<code>機算機科學</code> 做維運任務。敏捷開發團隊具備高度的學習、彈性、自組織的特性，在這樣的條件之下，SRE 可以協助團隊更快速面對 <a href="/2018/06/19/Management/Face-the-Real-World/">真實的世界</a>、給予團隊建議。團隊可以因此更的快地適應，更快地面對市場的挑戰！</p><p>對我個人來講，不管是敏捷、SRE、DevOps，目的都是 <code>Getting Things Done</code>，當這樣想的時候，做事的過程，自然而然就會有更 <a href="2015/03/31/Management/Perspective-in-Your-Life/">宏觀的視野</a> 來面對。</p><p>相關文章：</p><ul><li><a href="/2018/04/05/Management/Gossip-Agile/">談談敏捷開發的看法</a></li><li><a href="/2015/01/06/Management/協同合作系統建制與導入-以-Redmine-為例/">協同合作系統建制與導入</a></li><li><a href="/2017/09/20/About/Learning-Approaches/">學習法則</a></li></ul></blockquote><p>Q7: SRE 這本書適合什麼人看？</p><blockquote><p>如同章節的介紹，這本書很適合開發團隊各種角色一起閱讀討論。非工程背景、管理職適合閱讀 Part 1、CH12-16 事件管理部分、以及最後的管理與教育訓練。工程背景則建議完整閱讀整本書。</p></blockquote><p>Q8: 哪裡有 SRE 相關資源以及討論？</p><blockquote><p>Facebook 社群 <a href="https://www.facebook.com/groups/DevOpsTaiwan/" target="_blank" rel="noopener">DevOps Taiwan</a>、<a href="https://www.facebook.com/groups/sre.taiwan/" target="_blank" rel="noopener">Site Reliability Engineering Taiwan</a> 有很多讀書會的資料，目前也正在整理 SRE 讀書會的珍貴資料，敬請期待。</p></blockquote><hr><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>知道 SRE 這個又新又潮的詞，是在 2016 年的 <a href="https://www.ithome.com.tw/news/105366" target="_blank" rel="noopener">媒體報導</a> 文章開始，那時候我已經負責系統維運工作一段時間，每天面臨各式各樣系統管理、與維運的任務，處理各式各樣系統異常、寫了 n 篇異常報告，要監控、值班、要管理團隊、要學習 Cloud 相關知識，在這些日常維運的過程，同時因為 <code>DevOps</code> 一詞在社群鋪天蓋地的湧現，各種研討會、新技術如荒洪般的衝向我。這樣的衝擊、經歷，讓我不斷的在思考底下這些問題：</p><ul><li><a href="/2017/12/02/DevOps/Spirit-In-SysOps/">維運的精神？</a></li><li><a href="/2017/11/27/DevOps/What-is-Ops/">什麼是維運？維護甚麼？運轉什麼？</a></li><li><a href="/2017/12/22/DevOps/What-is-Monitoring/">什麼是監控？量測與觀測的差異？</a></li><li>DevOps 字義上是有開發、維運，那 <a href="/2017/03/18/SQA/Stages-In-Software-Testing/">測試</a> 呢？</li></ul><p>那段人生的歲月就在這些思考中起起伏伏、跌跌撞撞中度過，而 SRE 的出現讓我有了新的方向，特別是書本前言這段讓人非常有感的話：</p><blockquote><p>軟體工程有的時候和育兒類似：雖然生育過程痛苦、艱辛，但是養育成人的過程才是真正耗費心力之處。傳統的軟體工程花費很多精力討論軟體開發的過程，而不是其後的維護過程。統計顯示，一套軟體系統的 40% ~ 90% 成本，其實是花費在建置之後，不斷維護的過程。</p><p>業界流行的一個說法：一套系統如果已經開發完成，部署在正式環境上，那麼他就是『穩定的』，不需要那麼多工程師花費精力去最佳化、維護。</p><p>我們認為這樣的說法是錯的，從這個角度來看，如果軟體工程主要專注於設計和建構軟體系統，那麼應該有另一個種職業專注於整個軟體系統的生命週期管理：從其設計一直到部署，經歷不斷改進，最後順利除役。這樣的職業必須具備非常廣泛的技能，並且和其他職業的專注點不同，Google 把這個職位稱為 <code>網站可靠性工程師 (SRE, Site Reliability Engineering)</code>。</p></blockquote><p>因為個人 Dev、<a href="/categories/軟體測試/">QA</a>、<a href="/categories/DevOps/">Ops</a> 三段完整的經歷，有一些深刻的體悟與心得，加上書本開場這段話，讓我更深刻的體悟到 Dev &amp; Ops 從來就不只是口號，而是具體且深刻的實踐，是動詞！SRE 告訴大家 Google 如何 <code>做</code>，站在巨人肩膀，讓大家有機會走得更穩、更強壯！</p><blockquote><p>本文授權 <a href="https://devopsdays.tw/" target="_blank" rel="noopener">DevOpsDays Taipei 2018</a> 及 <a href="https://www.tenlong.com.tw/events/devops4" target="_blank" rel="noopener">天瓏網路書店</a> 全文轉載</p></blockquote><hr><h2 id="最難的事"><a href="#最難的事" class="headerlink" title="最難的事"></a>最難的事</h2><p><img src="/images/SRE/CH34/P39.png" alt=""><br><img src="/images/SRE/CH34/P40.png" alt=""><br><img src="/images/SRE/CH34/P41.png" alt=""><br><img src="/images/SRE/CH34/P42.png" alt=""><br><img src="/images/SRE/CH34/P43.png" alt=""><br><img src="/images/SRE/CH34/P44.png" alt=""><br><img src="/images/SRE/CH34/P45.png" alt=""><br><img src="/images/SRE/CH34/P46.png" alt=""><br><img src="/images/SRE/CH34/P47.png" alt=""></p><hr><h1 id="相關文章-站內"><a href="#相關文章-站內" class="headerlink" title="相關文章 (站內)"></a>相關文章 (站內)</h1><h2 id="SRE-相關"><a href="#SRE-相關" class="headerlink" title="SRE 相關"></a>SRE 相關</h2><ul><li><a href="/2018/09/12/DevOps/DevOpsDaysTaipei2018-Emergency-And-Incident-Management/">演講：從緊急事件 談 SRE 應變能力的培養</a></li><li><a href="/2017/11/04/DevOps/Study-Notes-SRE-Opening-Ch1/">SRE Opening and Chapter 1</a></li><li><a href="/2018/03/11/DevOps/Conclusion-SRE/">Conclusion SRE</a></li><li><a href="/2017/12/12/DevOps/Slogan-in-SRE/">Slogan in SRE</a></li><li><a href="/2018/05/27/DevOps/Emergency-Response-on-Stage/">跨領域的緊急應變 - SRV 斷弦事件</a></li><li><a href="/2018/01/07/DevOps/Emergency-Response/">緊急應變 (Emergency Response)</a></li><li><a href="/2018/08/11/Architecture/Distributed-Consistency-and-Consensus-Algorithm/">分散式一致性問題與共識演算法</a></li></ul><h2 id="測試與自動化相關"><a href="#測試與自動化相關" class="headerlink" title="測試與自動化相關"></a>測試與自動化相關</h2><ul><li><a href="/2017/03/18/SQA/Stages-In-Software-Testing/">Stages in Software Testing</a></li><li><a href="/2018/03/18/SQA/Gossip-System-Testing/">輕鬆聊：系統測試 (SVT) 的三兩事</a></li><li><a href="/2017/11/12/DevOps/Gossip-Automation/">自動化帶來的問題</a></li><li><a href="/2017/12/21/DevOps/What-is-Automation/">What is Automation?</a></li><li><a href="/2017/08/30/DevOps/Automation-or-Process/">『自動化 XXX』的陷阱</a></li><li><a href="/2014/05/09/SQA/Problems_In-Software-Autotest/">軟體自動化測試常見的問題</a></li></ul><h2 id="維運、運維"><a href="#維運、運維" class="headerlink" title="維運、運維"></a>維運、運維</h2><ul><li><a href="/2017/12/02/DevOps/Spirit-In-SysOps/">系統維運的精神</a></li><li><a href="/2017/11/27/DevOps/What-is-Ops/">What is Ops?</a></li><li><a href="/2018/06/14/DevOps/Recap-What-is-Ops/">再談啥是維運？</a></li><li><a href="/2018/03/29/About/2018-Serverless-All-Star/">演講：Ops as Code using Serverless</a></li><li><a href="/2017/11/14/DevOps/Go-Live/">Go Live</a></li><li><a href="/2017/12/22/DevOps/What-is-Monitoring/">What is Monitoring?</a></li><li><a href="/2017/06/21/AWS/Stategies-System-Monitor_and_CloudWatch/">演講：淺談系統監控與 CloudWatch 的應用</a></li><li><a href="/2016/07/29/AWS/AWS-Certified-SysOps-Administrator/">AWS Certified SysOps Administrator - Associate 準備心得</a></li></ul><h1 id="延伸閱讀-站外"><a href="#延伸閱讀-站外" class="headerlink" title="延伸閱讀 (站外)"></a>延伸閱讀 (站外)</h1><ul><li><a href="https://yq.aliyun.com/articles/582942?utm_content=m_49385" target="_blank" rel="noopener">孙宇聪：来自 Google 的 DevOps 理念及实践</a></li><li><a href="https://www.ithome.com.tw/news/105366" target="_blank" rel="noopener">Google 儲存 SRE 團隊負責人第一手經驗大公開</a> - iTHome</li><li><a href="https://note.drx.tw/2018/07/devops-journey-devops-engineer-sre-jobs.html" target="_blank" rel="noopener">DevOps Engineer、SRE 徵才求職雜談</a> - 凍仁的筆記</li></ul><h2 id="Google-官方資料"><a href="#Google-官方資料" class="headerlink" title="Google 官方資料"></a>Google 官方資料</h2><ul><li><a href="https://www.youtube.com/watch?v=uTEL8Ff1Zvk" target="_blank" rel="noopener">What’s the Difference Between DevOps and SRE?</a></li><li><a href="https://cloudplatform.googleblog.com/2018/05/SRE-vs-DevOps-competing-standards-or-close-friends.html" target="_blank" rel="noopener">SRE vs. DevOps: competing standards or close friends?</a></li><li><a href="https://cloudplatform.googleblog.com/2018/07/sre-fundamentals-slis-slas-and-slos.html" target="_blank" rel="noopener">SRE fundamentals: SLIs, SLAs and SLOs</a></li><li><a href="https://landing.google.com/sre/interview/ben-treynor.html" target="_blank" rel="noopener">What is ‘Site Reliability Engineering’?</a></li></ul><h2 id="相關-FB-社群"><a href="#相關-FB-社群" class="headerlink" title="相關 FB 社群"></a>相關 FB 社群</h2><ul><li><a href="https://www.facebook.com/groups/DevOpsTaiwan/" target="_blank" rel="noopener">DevOps Taiwan</a></li><li><a href="https://www.facebook.com/groups/sre.taiwan/" target="_blank" rel="noopener">Site Reliability Engineering Taiwan</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SRE 全名是 &lt;code&gt;Site Reliability Engineering 網站可靠性工程&lt;/code&gt;，是 Google 提倡的系統管理實踐之道、指導思想，這個名詞同時也是 &lt;strong&gt;軟體工程師 (Software Engineer)&lt;/strong&gt; 的角色，可以類比於傳統的維運工程師或系統工程師，但是 SRE 是用 &lt;code&gt;計算機科學&lt;/code&gt; 和 &lt;code&gt;軟體工程&lt;/code&gt; 手段，實踐 &lt;code&gt;大型系統維運&lt;/code&gt;、&lt;a href=&quot;/2018/06/18/Architecture/Gossip-in-Distributed-Systems/&quot;&gt;分散式系統&lt;/a&gt; 的設計與開發。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://rickhw.github.io/categories/DevOps/"/>
    
      <category term="SRE" scheme="http://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
      <category term="SRE" scheme="http://rickhw.github.io/tags/SRE/"/>
    
      <category term="Distributed Consensus" scheme="http://rickhw.github.io/tags/Distributed-Consensus/"/>
    
      <category term="Chaos Engineering" scheme="http://rickhw.github.io/tags/Chaos-Engineering/"/>
    
      <category term="DevOpsDays" scheme="http://rickhw.github.io/tags/DevOpsDays/"/>
    
  </entry>
  
</feed>
