<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Complete Think</title>
  
  <subtitle>Thinking, Coding, and Learning.</subtitle>
  <link href="https://rickhw.github.io/atom.xml" rel="self"/>
  
  <link href="https://rickhw.github.io/"/>
  <updated>2023-07-01T23:37:15.674Z</updated>
  <id>https://rickhw.github.io/</id>
  
  <author>
    <name>Rick Hwang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>置頂 - 全站索引</title>
    <link href="https://rickhw.github.io/2035/01/21/Index/"/>
    <id>https://rickhw.github.io/2035/01/21/Index/</id>
    <published>2035-01-21T02:30:00.000Z</published>
    <updated>2023-07-01T23:37:15.674Z</updated>
    
    <content type="html"><![CDATA[<p>這篇是整個 Blog 的全站索引，如果您是第一次來這裡，可以先看看這篇索引，大概知道 Blog 的全貌：</p><ul><li>[理念] <a href="/2017/11/26/Thinking-in-Essence/">思考本質、實踐、抽象、想像力、教育</a></li><li>[目錄] <a href="/2017/07/01/Index-Management/">經營管理</a>: 整理管理經驗談、管理哲學、經營、領導、用人之道、學習方法、專案管理</li><li>[目錄] <a href="/2017/07/01/Index-Software-Engineering-In-Practice/">軟體工程實踐</a>: 包含軟體架構、開發、測試、維運等 … 實踐的心得。</li><li>[目錄] <a href="/categories/Distributed-Systems">分散式系統</a>，包含分散式系統理論、Cloud Native - <a href="/tags/Kubernetes/">Kubernetes</a>、<a href="/2016/10/01/AWS-Study-Roadmap/">AWS</a>。</li><li>[參考] <a href="/2017/07/01/Reference/Books/">參考書</a>、<a href="/2017/07/01/Reference/Tech-Terms/">資訊技術與工程專有名詞</a>、<a href="/2017/07/01/Reference/SC-Terms/">計算機科學專有名詞</a>、<a href="/2017/07/01/Reference/Mgmt-Terms/">經營管理專有名詞</a></li><li>[系列文] <a href="/tags/Bus-Memo/">公車隨筆</a>、<a href="/tags/Learning-Approaches/">寫作與閱讀系列文</a>、<a href="/tags/%E6%BA%9D%E9%80%9A/">溝通</a>、<a href="/tags/Meetings/">會議效率</a></li><li>[關於] <a href="/2017/12/29/About/About-This-Blog/">這個部落格</a>、<a href="/2017/12/29/About/About-Author/">關於作者</a>、<a href="/2017/09/20/About/Learning-Approaches/">學習法則</a>、<a href="/2014/12/27/Management/%E7%B6%93%E7%87%9F%E4%B9%8B%E9%81%93/">經營之道</a>、<a href="/2017/12/02/About/Epiphany/">一些領悟</a>、<a href="/2014/10/26/Management/Classified-Philosophy/">分類哲學</a></li><li>[站內記事]: <a href="/2035/01/21/Updated/">文章更新紀錄</a>, <a href="/2013/11/26/Stats/">點閱率統計</a></li></ul><blockquote><p>不管是程式、文章、資料、還是房間，我都會定期重新整理 &#x2F; 重構，核心概念來自於 <a href="/2014/10/26/Management/Classified-Philosophy/">分類的哲學</a></p></blockquote><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;這篇是整個 Blog 的全站索引，如果您是第一次來這裡，可以先看看這篇索引，大概知道 Blog 的全貌：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[理念] &lt;a href=&quot;/2017/11/26/Thinking-in-Essence/&quot;&gt;思考本質、實踐、抽象、想像力、教育&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[目錄] &lt;a href=&quot;/2017/07/01/Index-Management/&quot;&gt;經營管理&lt;/a&gt;: 整理管理經驗談、管理哲學、經營、領導、用人之道、學習方法、專案管理&lt;/li&gt;
&lt;li&gt;[目錄] &lt;a href=&quot;/2017/07/01/Index-Software-Engineering-In-Practice/&quot;&gt;軟體工程實踐&lt;/a&gt;: 包含軟體架構、開發、測試、維運等 … 實踐的心得。&lt;/li&gt;
&lt;li&gt;[目錄] &lt;a href=&quot;/categories/Distributed-Systems&quot;&gt;分散式系統&lt;/a&gt;，包含分散式系統理論、Cloud Native - &lt;a href=&quot;/tags/Kubernetes/&quot;&gt;Kubernetes&lt;/a&gt;、&lt;a href=&quot;/2016/10/01/AWS-Study-Roadmap/&quot;&gt;AWS&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;[參考] &lt;a href=&quot;/2017/07/01/Reference/Books/&quot;&gt;參考書&lt;/a&gt;、&lt;a href=&quot;/2017/07/01/Reference/Tech-Terms/&quot;&gt;資訊技術與工程專有名詞&lt;/a&gt;、&lt;a href=&quot;/2017/07/01/Reference/SC-Terms/&quot;&gt;計算機科學專有名詞&lt;/a&gt;、&lt;a href=&quot;/2017/07/01/Reference/Mgmt-Terms/&quot;&gt;經營管理專有名詞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[系列文] &lt;a href=&quot;/tags/Bus-Memo/&quot;&gt;公車隨筆&lt;/a&gt;、&lt;a href=&quot;/tags/Learning-Approaches/&quot;&gt;寫作與閱讀系列文&lt;/a&gt;、&lt;a href=&quot;/tags/%E6%BA%9D%E9%80%9A/&quot;&gt;溝通&lt;/a&gt;、&lt;a href=&quot;/tags/Meetings/&quot;&gt;會議效率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[關於] &lt;a href=&quot;/2017/12/29/About/About-This-Blog/&quot;&gt;這個部落格&lt;/a&gt;、&lt;a href=&quot;/2017/12/29/About/About-Author/&quot;&gt;關於作者&lt;/a&gt;、&lt;a href=&quot;/2017/09/20/About/Learning-Approaches/&quot;&gt;學習法則&lt;/a&gt;、&lt;a href=&quot;/2014/12/27/Management/%E7%B6%93%E7%87%9F%E4%B9%8B%E9%81%93/&quot;&gt;經營之道&lt;/a&gt;、&lt;a href=&quot;/2017/12/02/About/Epiphany/&quot;&gt;一些領悟&lt;/a&gt;、&lt;a href=&quot;/2014/10/26/Management/Classified-Philosophy/&quot;&gt;分類哲學&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[站內記事]: &lt;a href=&quot;/2035/01/21/Updated/&quot;&gt;文章更新紀錄&lt;/a&gt;, &lt;a href=&quot;/2013/11/26/Stats/&quot;&gt;點閱率統計&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不管是程式、文章、資料、還是房間，我都會定期重新整理 &amp;#x2F; 重構，核心概念來自於 &lt;a href=&quot;/2014/10/26/Management/Classified-Philosophy/&quot;&gt;分類的哲學&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>置頂 - 更新文章</title>
    <link href="https://rickhw.github.io/2035/01/21/Updated/"/>
    <id>https://rickhw.github.io/2035/01/21/Updated/</id>
    <published>2035-01-21T02:30:00.000Z</published>
    <updated>2023-07-01T23:37:15.675Z</updated>
    
    <content type="html"><![CDATA[<p>底下整理 Blog 更新的文章記錄，提供給想知道哪些文章有更動的朋友。</p><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">更新說明</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2023&#x2F;07&#x2F;01</td><td align="left">新增內容</td><td align="left"><a href="/2020/06/21/Management/Interview-Problems/">面試常見的問題</a></td><td align="left">新增錄影</td><td align="left">2020&#x2F;06&#x2F;21</td></tr><tr><td>2021&#x2F;08&#x2F;21</td><td align="left">更新參照</td><td align="left"><a href="/2015/08/22/Management/Senior-Software-Developer/">資深軟體工程師</a></td><td align="left">新增參考資料</td><td align="left">2015&#x2F;08&#x2F;22</td></tr><tr><td>2021&#x2F;04&#x2F;30</td><td align="left">新增資料</td><td align="left"><a href="/2019/10/30/SQA/Problems-In-Software-Testing/">關於軟體測試，一些觀察到的現象</a></td><td align="left">新增軟體測試管理工具的選擇</td><td align="left">2019&#x2F;10&#x2F;30</td></tr></tbody></table><span id="more"></span><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2021&#x2F;08&#x2F;21</td><td align="left">更新參照</td><td align="left"><a href="/2015/08/22/Management/Senior-Software-Developer/">資深軟體工程師</a></td><td align="left">2015&#x2F;08&#x2F;22</td></tr><tr><td>2021&#x2F;04&#x2F;30</td><td align="left">新增資料</td><td align="left"><a href="/2019/10/30/SQA/Problems-In-Software-Testing/">關於軟體測試，一些觀察到的現象</a></td><td align="left">2019&#x2F;10&#x2F;30</td></tr><tr><td>2021&#x2F;04&#x2F;20</td><td align="left">新增資料</td><td align="left"><a href="/2019/03/17/Management/Perspective-in-XYZT/">看見怎樣的全貌 - 軟體開發的三體問題</a></td><td align="left">2019&#x2F;03&#x2F;17</td></tr><tr><td>2021&#x2F;03&#x2F;27</td><td align="left">新增資料</td><td align="left"><a href="/2020/03/07/ComputerScience/Cryptography/">摘要密碼學與資訊安全</a></td><td align="left">2020&#x2F;03&#x2F;07</td></tr></tbody></table><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2020&#x2F;09&#x2F;13</td><td align="left">新增資料</td><td align="left"><a href="/2018/06/18/DistributedSystems/Gossip-in-Distributed-Systems/">聊聊分散式系統</a></td><td align="left">2018&#x2F;06&#x2F;18</td></tr><tr><td>2020&#x2F;09&#x2F;13</td><td align="left">增加段落</td><td align="left"><a href="https://rickhw.github.io/2018/08/11/DistributedSystems/CAP-Theorem/">CAP Theorem</a></td><td align="left">2018&#x2F;08&#x2F;11</td></tr><tr><td>2020&#x2F;08&#x2F;09</td><td align="left">調整結構</td><td align="left"><a href="/2019/03/17/Container/Install-K8s-with-Kubeadm/">K8s 學習筆記 - kubeadm 手動安裝</a></td><td align="left">2019&#x2F;03&#x2F;17</td></tr><tr><td>2020&#x2F;07&#x2F;25</td><td align="left">增加段落</td><td align="left"><a href="/2018/08/11/DistributedSystems/Distributed-Consistency-and-Consensus-Algorithm/">一致性問題與共識演算法</a></td><td align="left">2018&#x2F;08&#x2F;11</td></tr><tr><td>2020&#x2F;06&#x2F;07</td><td align="left">增加段落</td><td align="left"><a href="/2017/09/20/About/Learning-Approaches/">學習法則</a></td><td align="left">2017&#x2F;09&#x2F;20</td></tr><tr><td>2020&#x2F;05&#x2F;26</td><td align="left">重構文章</td><td align="left"><a href="/2015/08/22/Management/Senior-Software-Developer/">資深軟體工程師</a></td><td align="left">2015&#x2F;08&#x2F;22</td></tr><tr><td>2020&#x2F;05&#x2F;09</td><td align="left">文句修飾</td><td align="left"><a href="/2019/06/05/DevOps/Github-Incident-Analysis/">GitHub Post-Incident Analysis</a></td><td align="left">2019&#x2F;06&#x2F;05</td></tr><tr><td>2020&#x2F;03&#x2F;22</td><td align="left">重構文章</td><td align="left"><a href="/2019/04/04/AWS/Study-Notes-EC2-Auto-Scaling-FAQ/">Study Notes - EC2 Auto Scaling 常見問題</a></td><td align="left">2019&#x2F;04&#x2F;04</td></tr><tr><td>2020&#x2F;03&#x2F;10</td><td align="left">增加段落</td><td align="left"><a href="/2018/06/08/Management/Naming-for-Products/">你的靈魂 - 談產品名稱的命名</a></td><td align="left">2018&#x2F;06&#x2F;08</td></tr><tr><td>2020&#x2F;03&#x2F;04</td><td align="left">增加段落</td><td align="left"><a href="/2018/10/08/DevOps/Chaos-Engineering/">Chaos Engineering (混沌工程)</a></td><td align="left">2018&#x2F;10&#x2F;08</td></tr><tr><td>2020&#x2F;02&#x2F;29</td><td align="left">增加段落</td><td align="left"><a href="/2020/02/08/Container/Why-Container/">Why Container</a></td><td align="left">2020&#x2F;02&#x2F;08</td></tr><tr><td>2020&#x2F;02&#x2F;08</td><td align="left">增加段落</td><td align="left"><a href="/2016/11/27/AWS/Whitepaper-AWS-Well-Architect-Framework/">Whitepaper - AWS Well-Architected Framework</a></td><td align="left">2016&#x2F;11&#x2F;27</td></tr><tr><td>2020&#x2F;01&#x2F;08</td><td align="left">增加段落</td><td align="left"><a href="/2019/09/09/AWS/Whitepaper-Using-AWS-For-Disaster-Recovery/">Whitepaper - Using AWS for Disaster Recovery</a></td><td align="left">2019&#x2F;09&#x2F;09</td></tr><tr><td>2020&#x2F;01&#x2F;31</td><td align="left">增加資料</td><td align="left"><a href="/2018/06/14/DevOps/Recap-What-is-Ops/">再談啥是維運？</a></td><td align="left">2018&#x2F;06&#x2F;14</td></tr><tr><td>2020&#x2F;01&#x2F;02</td><td align="left">增加段落</td><td align="left"><a href="/2019/10/30/SQA/Problems-In-Software-Testing/">關於軟體測試，一些觀察到的現象</a></td><td align="left">2019&#x2F;10&#x2F;30</td></tr></tbody></table><hr><h2 id="2019-x2F-Q4"><a href="#2019-x2F-Q4" class="headerlink" title="2019&#x2F;Q4"></a>2019&#x2F;Q4</h2><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2019&#x2F;12&#x2F;15</td><td align="left">重構結構</td><td align="left"><a href="/2017/07/01/Reference/Books/">參考書</a></td><td align="left">2017&#x2F;07&#x2F;01</td></tr><tr><td>2019&#x2F;12&#x2F;13</td><td align="left">增加段落</td><td align="left"><a href="/2016/04/07/AWS/Study-Notes-S3/">Study Notes - AWS S3</a></td><td align="left">2016&#x2F;04&#x2F;07</td></tr><tr><td>2019&#x2F;11&#x2F;16</td><td align="left">重構文章</td><td align="left"><a href="/2016/11/27/AWS/Whitepaper-AWS-Well-Architect-Framework/">Whitepaper - AWS Well-Architected Framework</a></td><td align="left">2016&#x2F;11&#x2F;27</td></tr><tr><td>2019&#x2F;11&#x2F;16</td><td align="left">增加段落</td><td align="left"><a href="/2018/03/18/SQA/How-To-Report-A-Defect-or-Bug/">如何有效的回報問題</a></td><td align="left">2018&#x2F;03&#x2F;18</td></tr><tr><td>2019&#x2F;10&#x2F;16</td><td align="left">增加段落</td><td align="left"><a href="/2017/09/20/About/Learning-Approaches/">學習法則</a></td><td align="left">2017&#x2F;09&#x2F;20</td></tr><tr><td>2019&#x2F;10&#x2F;16</td><td align="left">修改段落</td><td align="left"><a href="/2017/07/15/Container/Experience-minikube/">Experience minikube</a></td><td align="left">2017&#x2F;07&#x2F;15</td></tr><tr><td>2019&#x2F;10&#x2F;14</td><td align="left">增加段落</td><td align="left"><a href="/2019/09/20/SQA/How-to-Measure-System-Capacity/">如何量測系統的容量？</a></td><td align="left">2019&#x2F;09&#x2F;20</td></tr><tr><td>2019&#x2F;10&#x2F;14</td><td align="left">增加段落</td><td align="left"><a href="/2019/04/05/About/Working-Backwards/">一個人的 Working Backwards</a></td><td align="left">2019&#x2F;04&#x2F;05</td></tr><tr><td>2019&#x2F;10&#x2F;13</td><td align="left">增加段落</td><td align="left"><a href="/2018/06/18/DistributedSystems/Gossip-in-Distributed-Systems/">聊聊分散式系統</a></td><td align="left">2018&#x2F;06&#x2F;18</td></tr><tr><td>2019&#x2F;10&#x2F;13</td><td align="left">修改段落</td><td align="left"><a href="/2016/08/17/AWS/Study-Notes-DynamoDB/">DynamoDB 學習筆記</a></td><td align="left">2016&#x2F;08&#x2F;17</td></tr><tr><td>2019&#x2F;10&#x2F;06</td><td align="left">修改段落</td><td align="left"><a href="/2019/03/17/Container/Install-K8s-with-Kubeadm/">K8s 安裝筆記 (ubuntu16.04) - kubeadm 手動</a></td><td align="left">2019&#x2F;03&#x2F;17</td></tr></tbody></table><h2 id="2019-x2F-Q3"><a href="#2019-x2F-Q3" class="headerlink" title="2019&#x2F;Q3"></a>2019&#x2F;Q3</h2><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2019&#x2F;09&#x2F;10</td><td align="left">增加段落</td><td align="left"><a href="/2018/12/16/DevOps/Hire-a-Release-Engineer/">需要專職的 Release Engineer？</a></td><td align="left">2018&#x2F;12&#x2F;16</td></tr><tr><td>2019&#x2F;09&#x2F;10</td><td align="left">增加段落</td><td align="left"><a href="/2019/01/21/Management/KM-and-Issue-Tracking/">Issue Tracking 在企業裡的價值 - KM</a></td><td align="left">2019&#x2F;01&#x2F;21</td></tr><tr><td>2019&#x2F;09&#x2F;01</td><td align="left">增加段落</td><td align="left"><a href="/2019/01/20/About/Reading/">閱讀能力的重要性</a></td><td align="left">2019&#x2F;01&#x2F;20</td></tr><tr><td>2019&#x2F;08&#x2F;31</td><td align="left">增加段落</td><td align="left"><a href="/2018/09/22/Management/Hiring-Step3-Interview-Values-Attitude/">人力招募 - 三、深度對話：價值觀</a></td><td align="left">2018&#x2F;09&#x2F;22</td></tr><tr><td>2019&#x2F;08&#x2F;20</td><td align="left">重構結構</td><td align="left"><a href="/2019/05/30/AWS/Federated-SSO-to-AWS-using-GSuite/">如何用 G Guite 整合 AWS Single Sign-On</a></td><td align="left">2019&#x2F;05&#x2F;30</td></tr></tbody></table><h2 id="2019-x2F-Q2"><a href="#2019-x2F-Q2" class="headerlink" title="2019&#x2F;Q2"></a>2019&#x2F;Q2</h2><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2019&#x2F;06&#x2F;11</td><td align="left">重構文章</td><td align="left"><a href="/2016/04/07/AWS/Study-Notes-S3/">Study Notes - AWS S3</a></td><td align="left">2016&#x2F;04&#x2F;07</td></tr><tr><td>2019&#x2F;05&#x2F;31</td><td align="left">增加段落</td><td align="left"><a href="/2014/10/26/Management/Classified-Philosophy/">分類的哲學</a></td><td align="left">2014&#x2F;10&#x2F;26</td></tr><tr><td>2019&#x2F;05&#x2F;31</td><td align="left">增加段落</td><td align="left"><a href="/2017/03/18/SQA/Stages-In-Software-Testing/">淺談軟體測試的階段與策略</a></td><td align="left">2017&#x2F;03&#x2F;18</td></tr><tr><td>2019&#x2F;04&#x2F;07</td><td align="left">重構結構</td><td align="left"><a href="/2016/02/21/AWS/Study-Notes-VPC/">Study Notes - Virtual Private Cloud (VPC)</a></td><td align="left">2016&#x2F;02&#x2F;21</td></tr><tr><td>2019&#x2F;04&#x2F;04</td><td align="left">重構結構</td><td align="left"><a href="/2017/02/04/AWS/Study-Notes-EC2-Auto-Scaling/">Study Notes - EC2 Auto Scaling</a></td><td align="left">2017&#x2F;02&#x2F;04</td></tr><tr><td>2019&#x2F;04&#x2F;04</td><td align="left">調整結構</td><td align="left"><a href="/2017/02/11/DevOps/Resource-Provisioning-and-DevOps/">Resource Provisioning and DevOps</a></td><td align="left">2017&#x2F;02&#x2F;11</td></tr></tbody></table><h2 id="2019-x2F-Q1"><a href="#2019-x2F-Q1" class="headerlink" title="2019&#x2F;Q1"></a>2019&#x2F;Q1</h2><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2019&#x2F;03&#x2F;23</td><td align="left">增加段落</td><td align="left"><a href="/2018/01/24/DistributedSystems/Overview-API-Gateway/">Overview API Gateway</a></td><td align="left">2018&#x2F;01&#x2F;24</td></tr><tr><td>2019&#x2F;01&#x2F;18</td><td align="left">增加段落</td><td align="left"><a href="/2018/07/08/DevOps/Artifacts-Management/">Artifacts Management</a></td><td align="left">2018&#x2F;07&#x2F;08</td></tr><tr><td>2019&#x2F;01&#x2F;11</td><td align="left">增加段落</td><td align="left"><a href="/2018/04/01/DevOps/How-To-Make-CICD-Quality/">怎樣的 CI&#x2F;CD 才夠 Quality?</a></td><td align="left">2018&#x2F;04&#x2F;01</td></tr><tr><td>2019&#x2F;01&#x2F;06</td><td align="left">重構結構</td><td align="left"><a href="/2017/09/20/About/Learning-Approaches/">學習法則</a></td><td align="left">2017&#x2F;09&#x2F;20</td></tr><tr><td>2019&#x2F;01&#x2F;06</td><td align="left">增加段落</td><td align="left"><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募</a></td><td align="left">2017&#x2F;02&#x2F;04</td></tr><tr><td>2019&#x2F;01&#x2F;06</td><td align="left">文句修飾</td><td align="left"><a href="/2017/11/14/DevOps/Go-Live/">Go Live</a></td><td align="left">2017&#x2F;11&#x2F;14</td></tr><tr><td>2019&#x2F;01&#x2F;05</td><td align="left">文句修飾</td><td align="left"><a href="/2018/12/16/DevOps/Hire-a-Release-Engineer/">需要專職的 Release Engineer？</a></td><td align="left">2018&#x2F;12&#x2F;16</td></tr></tbody></table><hr><h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><h2 id="2018-x2F-Q4"><a href="#2018-x2F-Q4" class="headerlink" title="2018&#x2F;Q4"></a>2018&#x2F;Q4</h2><table><thead><tr><th>更新時間</th><th align="left">更新方式</th><th align="left">文章標題</th><th align="left">發布時間</th></tr></thead><tbody><tr><td>2018&#x2F;12&#x2F;26</td><td align="left">重構系列文</td><td align="left"><a href="/2017/03/02/AWS/Study-Notes-CloudWatch/">Study Notes - CloudWatch</a></td><td align="left">2017&#x2F;03&#x2F;02</td></tr><tr><td>2018&#x2F;12&#x2F;22</td><td align="left">重構系列文</td><td align="left"><a href="/2017/03/30/AWS/Study-Notes-CloudFormation/">Study Notes - CloudFormation</a></td><td align="left">2017&#x2F;03&#x2F;30</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;底下整理 Blog 更新的文章記錄，提供給想知道哪些文章有更動的朋友。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;更新時間&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;更新方式&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;文章標題&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;更新說明&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;發布時間&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;2023&amp;#x2F;07&amp;#x2F;01&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;新增內容&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;/2020/06/21/Management/Interview-Problems/&quot;&gt;面試常見的問題&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;新增錄影&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2020&amp;#x2F;06&amp;#x2F;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&amp;#x2F;08&amp;#x2F;21&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;更新參照&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;/2015/08/22/Management/Senior-Software-Developer/&quot;&gt;資深軟體工程師&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;新增參考資料&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2015&amp;#x2F;08&amp;#x2F;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&amp;#x2F;04&amp;#x2F;30&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;新增資料&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;/2019/10/30/SQA/Problems-In-Software-Testing/&quot;&gt;關於軟體測試，一些觀察到的現象&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;新增軟體測試管理工具的選擇&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2019&amp;#x2F;10&amp;#x2F;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SaaS 關鍵設計 - Multi-Tenancy - 探討真實世界的租賃關係</title>
    <link href="https://rickhw.github.io/2023/09/11/DistributedSystems/SaaS-KeyDesign_MultiTenancy-with-Isolation-Factor/"/>
    <id>https://rickhw.github.io/2023/09/11/DistributedSystems/SaaS-KeyDesign_MultiTenancy-with-Isolation-Factor/</id>
    <published>2023-09-11T14:30:00.000Z</published>
    <updated>2023-09-17T09:05:55.212Z</updated>
    
    <content type="html"><![CDATA[<p><code>多租戶架構 (Mulit-Tenancy Architecture, 以下稱作 MTA)</code> 是 <code>SaaS (Software as a Service, 軟體及服務)</code> 設計的核心議題，也是我過去幾年工作研究的題目之一，大部分的人針對這個題目討論的多是 K8s 的 Namespace 劃分、或者資料庫的拆分方式、使用 Single or Shared &#x2F; Hybrid … 等策略。</p><p>多租戶架構背後需要討論的，除了這些技術架構的議題，更重要的是往前一步：</p><blockquote><p>SaaS 的 <code>多租戶</code> 應該怎麼定義？以及能夠解決那些問題？</p></blockquote><p>基於這些討論與實踐，最後我提出設計 MTA 的關鍵抽象概念，我把它稱為 <code>Isolation Factor (隔離因子)</code>。</p><p>這篇文章嘗試解釋與探討 <code>多租戶</code> 背景與核心議題，同時用真實世界的租賃關係，剖析設計 SaaS 時必須要知道的概念，嘗試帶出 Isolation Factor 的重要性。</p><blockquote><p>相關文章：</p><ul><li><a href="/2022/07/04/DistributedSystems/Inspired-Design-From-Eclipse/">摘要 Eclipse 設計的啟發：當代 SaaS 分散式架構的關鍵設計</a></li><li><a href="/2023/06/24/DistributedSystems/API-First_Communication-Protocol/">API 設計 - 摘要 API 通訊模式與協議</a></li><li><a href="/2021/05/14/DistributedSystems/Service-Governance/">聊聊分散式架構的服務治理</a></li></ul></blockquote><span id="more"></span><hr><h1 id="真實世界裡的租賃關係"><a href="#真實世界裡的租賃關係" class="headerlink" title="真實世界裡的租賃關係"></a>真實世界裡的租賃關係</h1><p>在真實的世界中，有幾種角色關係：</p><ul><li><code>房東 (Landlord)</code>：出租房子的人成為房東<ul><li>英文用詞：Landlord, Landlady</li><li>物件在法律上的資產擁有者，具備 <code>擁有權</code></li><li>對於物件有 <code>管理權</code> 以及 <code>使用權</code></li><li>承租合約成立區間，不具備使用權</li></ul></li><li><code>房客 (Lodger)</code>：指的是房子的承租者 (人) - 中文叫做 <code>租戶</code>、<code>房客</code>、<code>承租人</code>、或 <code>佃戶</code><ul><li>英文用詞：Lodger、Tenant</li><li>承租對象的是房東提供的 <code>承租物件</code></li><li>在雙方約定的時間範圍之內，房客 <code>具備</code> 承租物件的 <code>使用權</code></li><li>約定時間之內，非特定情境，房東 <code>不具備</code> 承租物件的使用權</li></ul></li><li><code>承租物件 (Object)</code> ：與租戶對應的房子稱為 <code>承租物件 (Object)</code>、出租處<ul><li>英文用詞：老美稱為 apartment、英國稱為 flat。</li><li>承租物件內部使用稱為使用權，物件以外稱為管理權</li><li>物件以外，在真實世界稱為公共空間、公共設施、公共區域 … etc.</li></ul></li><li><code>合約 (Rental Agreements)</code>：指房東 &#x2F; 租戶 雙方對於 承租物件 的使用權 承諾<ul><li>合約包含以下資訊：<ol><li><code>房客 (who)</code> 識別資訊，通常是個人身份、職業，目的是用來識別法律上的效益。</li><li>允許使用的 <code>時間範圍 (when)</code></li><li>對於承租物件的 <code>權利與義務 (what)</code></li><li>更多參閱 <a href="https://en.wikipedia.org/wiki/Rental_agreement">Rental agreement</a></li></ol></li><li>用詞：tenancy (租賃)，通常用在房屋、土地等不動產的</li></ul></li><li><code>承租 (Lease, v)</code>：租戶向房東簽訂使用合約，整個動作稱為 <code>承租</code></li><li><code>使用權</code>: 泛指承租者 (房客) 在合約期限內，對於承租物件的使用範圍，其中包含承租物件本身以及公共區域的使用權</li><li><code>管理權</code>: 承租物件內部與外部的管制與控制</li><li><code>擁有權 (Ownership)</code>: 泛指資產在法律上賦予的擁有權</li></ul><p>這些關係稱為 <code>租賃 (Tenancy)</code>，概念如下圖所示：</p><p><img src="/images/DistributedSystems/MultiTenancy/lodger-landlord-rental-agreement_v20230911.png"></p><p>了解基本租賃的幾個角色、關係之後，我想把主軸放在 <code>房東</code>、<code>承租物件</code>、<code>房客</code> 這三者的關係，然後套到的 SaaS 設計裡。</p><blockquote><p>註：雖然房客 (Lodger) 的英文也可以是 Tenant 這個字，但是實際上中文口語上描述 <code>租戶</code> 的時候，可以意指 <code>人 (房客)</code>、或者是 <code>承租物件 (Object)</code>，通常要看前後文判斷，本文會直接使用 Object 直接代表承租房子，避免語意錯置。</p></blockquote><h2 id="其他專有名詞"><a href="#其他專有名詞" class="headerlink" title="其他專有名詞"></a>其他專有名詞</h2><ul><li>垂直權限</li><li>水平權限</li><li>仿登入 (impersonate), 概念類似 sudo &#x2F; run as xxx</li><li>RBAC (Role-Based Access Control)</li><li>ABAC (Role-Based Access Control)</li></ul><hr><h1 id="背景探討：各種租賃組合"><a href="#背景探討：各種租賃組合" class="headerlink" title="背景探討：各種租賃組合"></a>背景探討：各種租賃組合</h1><h2 id="租賃關係的排列組合"><a href="#租賃關係的排列組合" class="headerlink" title="租賃關係的排列組合"></a>租賃關係的排列組合</h2><p><code>Multi-Tenancy</code> 這個字，中文翻譯成：<code>多租戶</code>，字面上看似容易理解，但在設計與實作時，卻很容易做出有問題的設計。接下用 <code>房東 (Landlord)</code>、<code>承租物件 (Object)</code>、以及 <code>房客 (Lodger)</code>，三者的數量關係，分別探討各種形式的租賃關係。</p><p>三個變動因子，每個變動因子都有 <code>一個</code> 或 <code>多個</code> 兩種選項，其排列組合列舉如下表：</p><p><img src="/images/DistributedSystems/MultiTenancy/Rental-Agreements-Matrix_v20230911.png"></p><p>探討過程，我會嘗試用真實世界的案例帶入，如果沒有舉例的，可能是我自己經歷不夠、想像力不足，或者是 … 排列組合根本就不合理。</p><p>首先先從 <code>多租戶</code> 這個詞的相對詞：<code>單一租戶 Single Tenant</code> 切入。</p><h2 id="Case-A-Single-Tenant"><a href="#Case-A-Single-Tenant" class="headerlink" title="Case A: Single Tenant"></a>Case A: Single Tenant</h2><p><code>Single Tenant</code> 指的是 <code>一個房東</code> 可以提供 <code>一個物件</code> 給 <code>一個房客</code> 承租 ，完成 <code>一個租賃合約</code>，這三者的關係如下圖：</p><p><img src="/images/DistributedSystems/MultiTenancy/CaseA_Single-Tenant_v20230911.png"></p><p>這三者是一對一對一的關係：</p><blockquote><p>房東：承租物件：房客 &#x3D; 1：1：1</p></blockquote><p>生活中常見的例子，像是一個大樓的 (一個) 房東，將一整棟大樓租賃給一家企業。</p><ul><li>一個房東</li><li>一棟大樓</li><li>一家企業</li></ul><h2 id="Case-B-Multiple-Tenant"><a href="#Case-B-Multiple-Tenant" class="headerlink" title="Case B: Multiple Tenant"></a>Case B: Multiple Tenant</h2><p>房東只有一個物件可以承租給房客？雖然有，但是不是普通鄉民會接觸的。</p><p>生活中更多的例子會是一個房東同時擁有多個物件可以出租，也就是 <code>一個房東</code> 可以提供 <code>多個物件</code> 給 <code>多個房客</code> 承租 ，完成 <code>多個租賃合約</code>，這三者的關係如下圖：</p><p><img src="/images/DistributedSystems/MultiTenancy/CaseB_Multiple-Tenant_v20230911.png"></p><p>這三者的關係是：</p><blockquote><p>房東：承租物件：房客 &#x3D; 1：N：N</p></blockquote><p>注意，這裡描述 <code>承租物件</code> 與 <code>房客</code> 兩者是一對一關係，也就是每一個物件，只承租給一個客戶。不是一個物件，承租給多個客戶，這種結構在最後會描述。</p><p>在真實世界的租賃中，承租物件已經具備明確的 <code>邊界 (Border)</code>，像是房屋都具備具象化的牆壁、隔間、房門等邊界，所以房內屬於私人區域、以外則公共區域，公私領域的邊界是清楚，且明確的。</p><p>而所謂的 <code>多租戶</code> 這個詞背後隱含的是：</p><blockquote><p>相對於房東而言，也就是我們都是站在房東角度在論述。</p></blockquote><p>這句話很重要，請留意思考的切入角度 (角色)，本文全文的論述其實都是房東角度。</p><h2 id="Case-C"><a href="#Case-C" class="headerlink" title="Case C"></a>Case C</h2><p>上述 <code>Case A: Single Tenant</code> 和 <code>Case B: Multiple Tenant</code> 是真實世界常見的例子，屬於正常、合理的例子。</p><p>接下來我們來探討第三個例子，其結構如下圖：</p><p><img src="/images/DistributedSystems/MultiTenancy/CaseC_Single-Landlord-Lodger_Mulitple-Objects_v20230911.png"></p><p>這三者關係是：</p><blockquote><p>房東：承租物件：房客 &#x3D; 1：N：1</p></blockquote><p>這個意思是，一個房東，擁有 N 個物件，但是都租給同一個房客，會有這樣的案例？現實生活中，也許有吧？不曉得 … 貧窮限制我的想像啊。。。。</p><h2 id="Case-D"><a href="#Case-D" class="headerlink" title="Case D"></a>Case D</h2><p>排列組合還有，繼續推演下一個狀況：</p><p><img src="/images/DistributedSystems/MultiTenancy/CaseD_Single-Landlord-Object_Multiple-Lodger_v20230911.png"></p><p>這三者關係是：</p><blockquote><p>房東：承租物件：房客 &#x3D; 1：1：N</p></blockquote><p>這個狀況的意思是：</p><blockquote><p>一個房東的其中一個物件，同時租給多個房客，背後有多個契約。</p></blockquote><p>真實案例像是青年旅館，一個大通鋪，一堆人住一個晚上。在 IT 系統裡，有點像是一家公司申請一個 AWS Account，在裡面部署一套系統，這套系統，同時租賃給多個客戶使用。</p><hr><h1 id="探討"><a href="#探討" class="headerlink" title="探討"></a>探討</h1><p>上一段整理了四個排列組合，真實世界的運作往往會比這些單一排列組合更複雜，更多的是複合式的組合。</p><p>我們就用這四個為基礎單位，探討真實世界的組合。</p><h2 id="探討一：Case-X1-x3D-Case-B-D"><a href="#探討一：Case-X1-x3D-Case-B-D" class="headerlink" title="探討一：Case X1 &#x3D; Case B + D"></a>探討一：Case X1 &#x3D; Case B + D</h2><p>上述 Case B &#x2F; D 有著很類似的概念，不過看到這裡的讀者可能腦袋也打結了 XD</p><p>重新整理這兩者的關係如下：</p><p>Case B:</p><blockquote><p>房東：承租物件：房客 &#x3D; 1：N：N</p></blockquote><p>Case D</p><blockquote><p>房東：承租物件：房客 &#x3D; 1：1：N</p></blockquote><p>把這兩個 Case 合併成 <code>Case X1</code> 如下圖：</p><p><img src="/images/DistributedSystems/MultiTenancy/CaseX1_B+D_v20230911.png"></p><p>用 AWS 的角度舉例說明，圖中的角色分別如下：</p><ul><li>Landlard: AWS</li><li>Object: AWS Account</li><li>Lodgers: AWS IAM 裡的 User</li></ul><p>這個例子，如果用過 AWS 的人應該不難理解，不過要留意的是，每個 AWS Account 裡的資源彼此是看不到彼此的，像是:</p><ul><li><code>User#A @ Object#A</code> 是無法直接跟 <code>User#A @ Object#B</code> 對話的</li><li><code>Object#B</code> 是無法得知 <code>Object#A</code> 裡有哪些 Users</li><li><code>User#A @ Object#A</code> 不等於 <code>User#A @ Object#B</code></li></ul><p>上面的描述，背後隱含的關鍵意義就是 Object 之間是 <code>隔離</code> 的，而且是強制性的隔離。</p><p>換 GCP 的例子：</p><ul><li>Landlard: GCP</li><li>Object: GCP Project</li><li>Lodgers: GCP Project IAM User</li></ul><p>這個也不難理解，同樣可以舉例出 Object 之間隔離的概念，也完全與 AWS 一致。</p><p>GCP 與 AWS 的隔離概念稱為 <code>垂直權限 (Vertical Authority)</code></p><p>繼續下一個例子是 K8s:</p><ul><li>Landlard: K8s Cluster</li><li>Object: by Namespace</li><li>Lodgers: Application or Developer</li></ul><p>K8s 開始出現一個狀況，所謂的 Namespace 只是邏輯概念切割，也就是資源之間的並不是 <code>強隔離</code>。</p><h2 id="探討二：二房東-Case-X2"><a href="#探討二：二房東-Case-X2" class="headerlink" title="探討二：二房東 Case X2"></a>探討二：二房東 Case X2</h2><p>上述 Case E 用 AWS &#x2F; GCP &#x2F; K8s 當例子，但更多時候企業在發展自己的業務狀況會是這樣：</p><p><img src="/images/DistributedSystems/MultiTenancy/CaseX2_B+B_v20230911.png"></p><p>把 <code>Object#A</code> 拆分，自己變成二房東，租一個物件，但是這個物件拆分成 N 個，每個再租給其他的使用者。</p><p>而如何把 Object#A 拆分的好與壞，就在於隔離的實作。</p><p>前面提到在真實世界的租賃中，承租物件已經具備明確的 <code>邊界 (Border)</code>，但是承租 AWS 的企業，又把這個 SaaS 承租給他們的客戶，而對於 SaaS 客戶而言，邊界應該、必須要存在，而這個邊界則需要由 SaaS 公司在架構設計時，必須自己建立一道讓客戶以為的邊界，這個邊界，在本文中稱為 <code>隔離 (Isolation)</code>。</p><h2 id="隔離的核心議題-Isolation-Factor-隔離因子"><a href="#隔離的核心議題-Isolation-Factor-隔離因子" class="headerlink" title="隔離的核心議題: Isolation Factor (隔離因子)"></a>隔離的核心議題: Isolation Factor (隔離因子)</h2><p>本質上來講，隔離是透過一種 <code>邊界 (Boundary)</code> 方式，區分租戶彼此之間的空間範圍。</p><p>房子來講，區分彼此的空間範圍就是樑柱、牆壁、門、地板、天花板 … 等；以企業內部來講，就是各種辦公室的實體隔間、以及特定角色授權；以應用程式來說，就是使用者 A 能否看到使用 B 的資料而言。依照這樣的隔離概念，底下這些都是犯規：</p><ul><li>企業大樓裡，未經授權的員工，進入機房</li><li>企業員工在 AWS 上開台機器，沒有認證授權，方便自己進出公司網域</li><li>SRE 說：我的 Gmail 看到別人的信，就要把 Gmail shutdown! –&gt; <a href="https://www.ithome.com.tw/news/105366">相關報導</a></li><li>薩爾達傳說 - 王國之淚: 看我通天術 (這嚴重犯規 XDD)<br><img src="/images/DistributedSystems/MultiTenancy/zelda-totk.jpeg"></li></ul><h3 id="實體隔離與邏輯隔離"><a href="#實體隔離與邏輯隔離" class="headerlink" title="實體隔離與邏輯隔離"></a>實體隔離與邏輯隔離</h3><p>在商業應用程式裡，隔離則因為 <code>領域 (Domains)</code> 不同，會用不同的方式，商業應用角度多半會以 <code>邏輯隔離</code> 為主。</p><p>邏輯隔離的例子，舉例常見的概念：</p><ul><li>Google 服務 (Gmail &#x2F; Gmap &#x2F; Docs …) 都是以 Gmail Account 為隔離單位</li><li>GCP 以 Project 為隔離單位</li><li>AWS 則以 Account 為單位</li><li>Chrome 這個瀏覽器則以 Profile 為隔離概念</li><li>多租戶架構的電商平台，隔離則是以 <code>店</code> 為單位，像是 91APP 是開店平台</li><li>教育平台，則是以學校為單位，像是 <a href="https://teachable.com/">Teachable</a> 這個平台<ul><li>開學校之後，每個學校都可以有自己的學生、自己的老師 .. 等角色定義</li></ul></li><li>作業系統的隔離：Linux 的系統權限 user-group-anyone 本質上就是種隔離</li><li>資料庫的隔離：Database &#x2F; Table &#x2F; Row 都是隔離概念，更甚者則是交易過程的鎖。</li></ul><p>上述的隔離，在權限系統稱為 <code>垂直權限</code>，也就是透過 <code>帳號 (通常)</code> 隔離彼此。除了垂直權限，相對則是 <code>水平權限</code>，概念如下圖：</p><p><img src="/images/DistributedSystems/MultiTenancy/SaaS-Multi-Tenancy-Permission-Design_v20230911.png"></p><p>但是當業務發展到一定程度之後，或者依照法規的需求，則很常會以期望實體隔離，也就是在實體的系統架構，就是 <code>專用 (Dedicated)</code> 資源，不與其他人共用。<br>不管是實體還是邏輯隔離，都需要一個關鍵因子來定義怎麼隔離？而這個隔離的關鍵因子我把它稱為 <code>隔離因子 (Isolation Factor)</code></p><p>前面描述的手段與方法都是為了達到隔離：</p><ul><li>權限：多租戶架構常用的方法是 <code>垂直權限</code><ul><li>相對於垂直權限，稱為 <code>水平權限</code>，實踐方式有 RBAC、ABAC</li></ul></li><li>實體隔離 (physical isolation)</li><li>邏輯隔離 (logical isolation): 虛擬化 virtualization, VPC</li></ul><h3 id="AWS-服務的隔離因子"><a href="#AWS-服務的隔離因子" class="headerlink" title="AWS 服務的隔離因子"></a>AWS 服務的隔離因子</h3><p>AWS 有很多服務，舉凡 EC2 &#x2F; S3 &#x2F; DynamoDB &#x2F; CloudFront … etc. 這些服務在 AWS 裏面都需要計算隔離方式，但是每個服務本身的屬性不一樣，在設計的時候怎麼知道每個服務的隔離因子是什麼？底下列舉設計 AWS 服務要考慮的隔離因子：</p><ul><li>EC2: Instance</li><li>S3: Bucket</li><li>DynamoDB: Table</li><li>CloudFront: Distribution</li><li>VPC 本身就是個隔離單位</li></ul><p>上述列舉的是這些服務的隔離因子例子，因為每個服務特性有所差異，要對應到 AWS Account 時，就要具體用一個單位對應隔離的想法，不然就會無法對應。</p><h2 id="隔離沒做好會怎樣？"><a href="#隔離沒做好會怎樣？" class="headerlink" title="隔離沒做好會怎樣？"></a>隔離沒做好會怎樣？</h2><p>這是隔離背後要解決的關鍵痛點，最經典的案例是下圖：</p><p><img src="/images/DistributedSystems/MultiTenancy/20160421_SRE.png"><br>Source: <a href="https://www.ithome.com.tw/news/105366">Google儲存SRE團隊負責人第一手經驗大公開</a>, by ITHome, 20160421</p><p>另一個經典案例則是 VPC 的問題，底下截圖則是中國知名技術專家 <a href="https://coolshell.me/">陳皓</a> 的部落格：</p><p><img src="/images/DistributedSystems/MultiTenancy/20200419_AliyunVPC.png"><br>Source: <a href="https://www.ithome.com.tw/news/105366">关于阿里云经典网络的问题</a>, by Coolshell, 20200419</p><p>這都是別人的問題，而我面對過的問題則是之前在電商工作時，曾經出現的問題，我把它稱為 <code>A-c-B event</code>，中文稱為 <code>A 店跨 B 店</code>。也就是 B 店的使用者，看到 A 店的資料，不管是商品資料、還是訂單資料。</p><p>這三個例子，資安角度都是 <code>垂直權限</code> 的問題，背後實際問題就是隔離的設計與實踐。</p><h2 id="跨租戶問題常見的做法"><a href="#跨租戶問題常見的做法" class="headerlink" title="跨租戶問題常見的做法"></a>跨租戶問題常見的做法</h2><p>雖然說跨租戶是不允許的，但是生活中還是有很多場景，需要跨租戶存取，例如我們信用卡掛失的時候，客服人員可以幫你調整信用卡的狀態。客服人員代替你調整信用卡的過程，就是個跨租戶操作，不管怎樣他要操作設定的時候，都要獲得你的允許，然後才能幫你調整狀態。這樣的過程，其實就是個身份暫時轉換，代理 (delegate) 執行的過程。</p><p>類似的做法，在作業系統已經都有很成熟的做法：</p><ul><li>Linux: sudo as XXX</li><li>Windows: Run as XXXX</li></ul><p>在系統實作時，專有名詞為 <code>impersonate (v)</code>，也就是 <code>User#A@Tanent#A as User#B@Tenant#B</code>，這是個需要授權程序的。</p><p>在 AWS 的設計，幾種常見的例子：</p><ul><li>當 Account#A 要存取 Account#B 得時候，可以透過 STS 取得臨時授權</li><li>當網路要相互連線時，需要透過雙方授權才能連結，像是 VPC Peering</li></ul><!--多租戶重點？在單一使用者個人電腦作業系統，Kernel Space / User Space 可以類似於這樣的概念。- Isolation for What?- Multi-tenant Application (MTA)- Multi-instance Solution (MIS)## Isolation 的層次- Application Resource (VM)- Data Isolation    - Database    - Storage    - Shared Isolation:    - ref        - https://oncodedesign.com/data-isolation-and-sharing-in-multitenant-system-part1/        - https://oncodedesign.com/data-isolation-and-sharing-in-multitenant-system-part2/        - https://oncodedesign.com/data-isolation-and-sharing-in-multitenant-system-part3/## 常見的問題底下問題是跟不同人討論過程，發現對於 Multi-tenancy 的理解上，常見的提問。### Q: Tenant#A 裡的 User#A 跟 Tenant#B 裡的 User#A 是否同一個人？--><hr><h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>下圖是一張網路梗圖：</p><p><img src="/images/DistributedSystems/MultiTenancy/Multiple-Windows.jpg"><br>Source: <a href="https://www.facebook.com/groups/it.humor.and.memes/posts/24452121121053675/">https://www.facebook.com/groups/it.humor.and.memes/posts/24452121121053675/</a></p><p>圖中在 Windows 裡裝了 VMWare，然後裡面裝了 Windows，裡面再裝 VMWare … 如此好幾層 … 這張圖表述了多租戶的核心概念，不過大家知道 VM 本身是模擬硬體，換言之實作的是實體隔離。相對於 VM 則是 Container，透過 Kernal 的特性 (cgroup, namespace … etc)，時做出隔離的概念。</p><p>而應用程式如果要做出隔離概念，則必定要面對如何定義租戶的概念，租戶本質就是為了達到隔離，用來隔離的 <code>隔離因子 (Isolation Factor)</code>，則是本文想帶出的概念。</p><p>多租戶架構因而衍生的相關議題：</p><ol><li>水平權限系統，像是 RBAC &#x2F; ABAC，也就是 AWS IAM<ul><li>衍生的則是 API 認證授權與通訊協議，相關參閱 <a href="/2023/06/24/DistributedSystems/API-First_Communication-Protocol/">API 設計 - 摘要 API 通訊模式與協議</a></li></ul></li><li>租戶與 <code>功能</code> 的訂閱市集 (Marketplace)，背後本質是個 Pub&#x2F;Sub 概念<ul><li>相關參閱 <a href="/2022/07/04/DistributedSystems/Inspired-Design-From-Eclipse/">摘要 Eclipse 設計的啟發：當代 SaaS 分散式架構的關鍵設計</a></li></ul></li><li>帳務系統：延續租戶與功能訂閱而產生的議題，也就是使用狀況 (Usage) 與帳務資訊 (Billing)</li><li>功能系統的通訊架構，相關參閱 <a href="/2022/07/04/DistributedSystems/Inspired-Design-From-Eclipse/">摘要 Eclipse 設計的啟發：當代 SaaS 分散式架構的關鍵設計</a></li></ol><!--source: https://docs.google.com/presentation/d/1tPPkhBHIdGeWC7He4782rzwIr7SFr8VCBNrT50Wjwng/edit#slide=id.p--><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="站內文章"><a href="#站內文章" class="headerlink" title="站內文章"></a>站內文章</h2><ul><li><a href="/2022/07/04/DistributedSystems/Inspired-Design-From-Eclipse/">摘要 Eclipse 設計的啟發：當代 SaaS 分散式架構的關鍵設計</a></li><li><a href="/2023/06/24/DistributedSystems/API-First_Communication-Protocol/">API 設計 - 摘要 API 通訊模式與協議</a></li><li><a href="/2021/05/14/DistributedSystems/Service-Governance/">聊聊分散式架構的服務治理</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://en.wikipedia.org/wiki/Multitenancy">Multitenancy</a></li><li><a href="https://blog.arkency.com/comparison-of-approaches-to-multitenancy-in-rails-apps/">Comparison of approaches to multitenancy in Rails apps</a></li><li><a href="https://cloud.google.com/kubernetes-engine/docs/best-practices/enterprise-multitenancy">Best practices for enterprise multi-tenancy</a> - GKE</li><li>General Design Concepts<ul><li><a href="https://learn.microsoft.com/en-us/azure/azure-sql/database/saas-tenancy-app-design-patterns?view=azuresql">Multi-tenant SaaS database tenancy patterns</a> - Azure, 20230304</li><li><a href="https://www.nagarro.com/en/blog/multi-tenant-saas-application-architecture">Architecting a typical Multi-tenant SaaS Application – All you need to know</a></li><li><a href="https://web.archive.org/web/20150221181153/http://se2.informatik.uni-wuerzburg.de/pa/uploads/papers/paper-371.pdf">Architectural Concerns in Multi-Tenant SaaS Applications</a></li><li><a href="https://www.forbes.com/sites/forbesbusinesscouncil/2019/11/20/what-is-the-saas-architecture-maturity-model/?sh=4196006c4b40">What Is The SaaS Architecture Maturity Model?</a></li></ul></li><li>K8s 相關<ul><li><a href="https://github.com/kubernetes-sigs/multi-tenancy">K8s Multi-tenancy 小組</a></li><li><a href="https://kubernetes.io/blog/2021/04/15/three-tenancy-models-for-kubernetes/">Three Tenancy Models For Kubernetes</a></li><li><a href="https://thenewstack.io/designing-a-multitenancy-kubernetes-strategy-that-fits-your-organization/">Designing a Multitenancy Kubernetes Strategy that Fits Your Organization</a></li></ul></li><li>資料庫相關<ul><li><a href="https://vladmihalcea.com/database-multitenancy/">A beginner’s guide to database multitenancy</a>, 20200917</li><li><a href="https://oncodedesign.com/data-isolation-and-sharing-in-multitenant-system-part1/">Data Isolation and Sharing in a Multitenant System - Part 1</a></li><li><a href="https://oncodedesign.com/data-isolation-and-sharing-in-multitenant-system-part1/">Data Isolation and Sharing in a Multitenant System - Part 2</a></li><li><a href="https://oncodedesign.com/data-isolation-and-sharing-in-multitenant-system-part1/">Data Isolation and Sharing in a Multitenant System - Part 3</a></li></ul></li><li>AWS<ul><li><a href="https://www.nagarro.com/en/blog/architectural-design-patterns-aws-multi-tenancy">Architectural design patterns for multi-tenancy on AWS</a></li><li><a href="https://aws.amazon.com/blogs/machine-learning/configure-amazon-forecast-for-a-multi-tenant-saas-application/">Configure Amazon Forecast for a multi-tenant SaaS application</a> - AWS Machine Learning Blog, 20210325</li><li><a href="https://aws.amazon.com/blogs/security/how-to-implement-saas-tenant-isolation-with-abac-and-aws-iam/">How to implement SaaS tenant isolation with ABAC and AWS IAM</a> - AWS Security Blog, 20210609</li><li><a href="https://aws.amazon.com/tw/blogs/storage/ten-tips-for-multi-tenant-multi-region-object-replication-in-amazon-s3/">Ten tips for multi-tenant, multi-Region object replication in Amazon S3</a> - AWS Storage Blog, 20211101</li><li><a href="https://aws.amazon.com/blogs/database/build-and-load-test-a-multi-tenant-saas-database-proxy-solution-with-amazon-rds-proxy/">Build and load test a multi-tenant SaaS database proxy solution with Amazon RDS Proxy</a> - AWS Database Blog, 20211113</li><li><a href="https://aws.amazon.com/cn/blogs/china/saas-architecture-design-on-amazon-cloud-technology-marketplace-how-to-support-multiple-products-using-a-single-account-center/">在亚马逊云科技Marketplace上的SaaS架构设计——如何支持多产品使用单一账户中心</a> - 20210813</li><li><a href="https://aws.amazon.com/blogs/apn/isolating-saas-tenants-with-dynamically-generated-iam-policies/">Isolating SaaS Tenants with Dynamically Generated IAM Policies</a> - AWS Partner Network (APN) Blog, 20200921</li><li><a href="https://theburningmonk.com/2021/03/how-to-secure-multi-tenant-applications-with-appsync-and-cognito/">How to secure multi-tenant applications with AppSync and Cognito</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;多租戶架構 (Mulit-Tenancy Architecture, 以下稱作 MTA)&lt;/code&gt; 是 &lt;code&gt;SaaS (Software as a Service, 軟體及服務)&lt;/code&gt; 設計的核心議題，也是我過去幾年工作研究的題目之一，大部分的人針對這個題目討論的多是 K8s 的 Namespace 劃分、或者資料庫的拆分方式、使用 Single or Shared &amp;#x2F; Hybrid … 等策略。&lt;/p&gt;
&lt;p&gt;多租戶架構背後需要討論的，除了這些技術架構的議題，更重要的是往前一步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SaaS 的 &lt;code&gt;多租戶&lt;/code&gt; 應該怎麼定義？以及能夠解決那些問題？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基於這些討論與實踐，最後我提出設計 MTA 的關鍵抽象概念，我把它稱為 &lt;code&gt;Isolation Factor (隔離因子)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這篇文章嘗試解釋與探討 &lt;code&gt;多租戶&lt;/code&gt; 背景與核心議題，同時用真實世界的租賃關係，剖析設計 SaaS 時必須要知道的概念，嘗試帶出 Isolation Factor 的重要性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相關文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2022/07/04/DistributedSystems/Inspired-Design-From-Eclipse/&quot;&gt;摘要 Eclipse 設計的啟發：當代 SaaS 分散式架構的關鍵設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2023/06/24/DistributedSystems/API-First_Communication-Protocol/&quot;&gt;API 設計 - 摘要 API 通訊模式與協議&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/05/14/DistributedSystems/Service-Governance/&quot;&gt;聊聊分散式架構的服務治理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Distributed Systems" scheme="https://rickhw.github.io/categories/Distributed-Systems/"/>
    
    
    <category term="Distributed Systems" scheme="https://rickhw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Design Thinking" scheme="https://rickhw.github.io/tags/Design-Thinking/"/>
    
    <category term="Multi-Tenancy" scheme="https://rickhw.github.io/tags/Multi-Tenancy/"/>
    
    <category term="SaaS" scheme="https://rickhw.github.io/tags/SaaS/"/>
    
    <category term="Isolation Factor" scheme="https://rickhw.github.io/tags/Isolation-Factor/"/>
    
    <category term="Multi-Tenancy Architecture" scheme="https://rickhw.github.io/tags/Multi-Tenancy-Architecture/"/>
    
    <category term="RBAC" scheme="https://rickhw.github.io/tags/RBAC/"/>
    
    <category term="Authorization" scheme="https://rickhw.github.io/tags/Authorization/"/>
    
  </entry>
  
  <entry>
    <title>探索職涯、複利人生 - AWS Career Exploration Day 2023</title>
    <link href="https://rickhw.github.io/2023/09/09/About/2023-AWS-Career-Exploration-Day/"/>
    <id>https://rickhw.github.io/2023/09/09/About/2023-AWS-Career-Exploration-Day/</id>
    <published>2023-09-09T13:42:30.000Z</published>
    <updated>2023-09-13T13:04:13.409Z</updated>
    
    <content type="html"><![CDATA[<p>去年 (2022) 受邀 <a href="/2022/12/21/About/2022-AWS-Career-Exploration-Day/">AWS Career Exploration Day</a> 分享職涯的想法，今年因為個人因素，無法到現場。但是在主辦單位熱情的邀約以及協助下，改用錄影的方式，延續去年分享的想法～</p><span id="more"></span><h2 id="Slide-與錄影"><a href="#Slide-與錄影" class="headerlink" title="Slide 與錄影"></a>Slide 與錄影</h2><iframe src="https://www.slideshare.net/slideshow/embed_code/key/H7csbb3oDH5PT3?startSlide=1" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;max-width: 100%;" allowfullscreen></iframe><div style="margin-bottom:5px"><strong><a href="https://www.slideshare.net/rickhwang/20230829" title="20230829 - 探索職涯，複利人生" target="_blank">20230829 - 探索職涯，複利人生</a></strong> from <strong><a href="https://www.slideshare.net/rickhwang" target="_blank">Rick Hwang</a></strong></div><p>這次不一樣的是，我自己錄影的同時，也自己嘗試剪接與後製，底下是我自己 (導演版？) 的版本：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/V5eM-Uwd9x4?si=kxKZUOnuXNPWmCU7" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><hr><h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><p>延續去年的分享，也延續我在 <a href="/2023/07/17/About/2023-SRE-Practice-and-IDP/">SRE 新書書友見面會</a> 的分享，整合了過去自己的經歷、朋友遭遇的問題，整理出以下的想法：</p><ol><li>面對職涯轉換的應對與心境</li><li>探索自己，充實自己</li><li>決策職涯，複利人生</li></ol><p><img src="/images/About/2023-AWSCareerExplorationDay/Slide1.png"><br><img src="/images/About/2023-AWSCareerExplorationDay/Slide2.png"><br><img src="/images/About/2023-AWSCareerExplorationDay/Slide3.png"><br><img src="/images/About/2023-AWSCareerExplorationDay/Slide4.png"><br><img src="/images/About/2023-AWSCareerExplorationDay/Slide5.png"></p><hr><h2 id="朋友的-Feedback"><a href="#朋友的-Feedback" class="headerlink" title="朋友的 Feedback"></a>朋友的 Feedback</h2><p>影片上架後，當天朋友的 Feedback。</p><p><img src="/images/About/2023-AWSCareerExplorationDay/feedback1_20230830.jpeg"></p><p>歡迎分享你的經驗，或者私訊我你的故事，讓更多人知道，職涯的路，並不孤單。</p><h2 id="相關文章"><a href="#相關文章" class="headerlink" title="相關文章"></a>相關文章</h2><ul><li><a href="https://youtu.be/Q4SqoDu9xns?si=DTiwEcxtWcM--tWh">[EP01] 職涯選擇：面試你的主管</a></li><li><a href="/2023/07/17/About/2023-SRE-Practice-and-IDP/">個人著作《SRE 實踐與開發平台指南》</a></li><li><a href="/2022/12/21/About/2022-AWS-Career-Exploration-Day/">AWS Career Exploration Day 2022</a></li><li><a href="/2019/08/14/About/About-Certificate/">證照有無用論？</a></li><li><a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募</a></li><li><a href="/2021/09/10/About/Self-Exploration/">職涯、探索、退休</a></li><li><a href="/2020/06/21/Management/Interview-Problems/">面試常見的問題</a></li><li><a href="/2017/09/20/About/Learning-Approaches/">學習法則</a></li><li><a href="/2016/10/01/AWS-Study-Roadmap/">AWS Study Roadmap</a></li><li><a href="/2016/08/20/AWS/AWS-Certified-Developer/">AWS Certified Developer - Associate 準備心得</a></li><li><a href="/2016/07/29/AWS/AWS-Certified-SysOps-Administrator/">AWS Certified SysOps Administrator - Associate 準備心得</a></li><li><a href="/2016/04/22/AWS/AWS-Certified-Solutions-Architect_Associate/">AWS Certified Solutions Architect - Associate 準備心得</a></li><li><a href="/2019/01/12/About/Talent-And-Effort/">天賦與努力</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;去年 (2022) 受邀 &lt;a href=&quot;/2022/12/21/About/2022-AWS-Career-Exploration-Day/&quot;&gt;AWS Career Exploration Day&lt;/a&gt; 分享職涯的想法，今年因為個人因素，無法到現場。但是在主辦單位熱情的邀約以及協助下，改用錄影的方式，延續去年分享的想法～&lt;/p&gt;</summary>
    
    
    
    <category term="About" scheme="https://rickhw.github.io/categories/About/"/>
    
    
    <category term="AWS" scheme="https://rickhw.github.io/tags/AWS/"/>
    
    <category term="Career" scheme="https://rickhw.github.io/tags/Career/"/>
    
    <category term="Certiciation" scheme="https://rickhw.github.io/tags/Certiciation/"/>
    
  </entry>
  
  <entry>
    <title>凝聚團隊共識的溝通方法</title>
    <link href="https://rickhw.github.io/2023/08/13/Management/Effective-Team-Communication/"/>
    <id>https://rickhw.github.io/2023/08/13/Management/Effective-Team-Communication/</id>
    <published>2023-08-13T01:33:00.000Z</published>
    <updated>2023-08-14T08:59:39.726Z</updated>
    
    <content type="html"><![CDATA[<p>這篇整理自今年二月跟朋友分享的內容，主要是關於溝通效率的目錄、總整理。</p><span id="more"></span><h1 id="總整理"><a href="#總整理" class="headerlink" title="總整理"></a>總整理</h1><iframe src="https://www.slideshare.net/slideshow/embed_code/key/DX860wz54CRPEC?startSlide=1" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;max-width: 100%;" allowfullscreen></iframe><div style="margin-bottom:5px"><strong><a href="https://www.slideshare.net/rickhwang/20230215-effective-team-communicationpdf" title="20230215 - 凝聚團隊共識的溝通方法 (Effective Team Communication)" target="_blank">20230215 - 凝聚團隊共識的溝通方法 (Effective Team Communication)</a></strong> from <strong><a href="https://www.slideshare.net/rickhwang" target="_blank">Rick Hwang</a></strong></div><h2 id="溝通原理"><a href="#溝通原理" class="headerlink" title="溝通原理"></a>溝通原理</h2><p><img src="/images/Communication/Effective-Team-Communication/07-purpose.png"><br><img src="/images/Communication/Effective-Team-Communication/01-principle.png"><br><img src="/images/Communication/Effective-Team-Communication/02-request.png"><br><img src="/images/Communication/Effective-Team-Communication/03-response.png"><br><img src="/images/Communication/Effective-Team-Communication/04-many-to-many.png"><br><img src="/images/Communication/Effective-Team-Communication/05-one-to-many.png"><br><img src="/images/Communication/Effective-Team-Communication/06-one-to-one.png"></p><h2 id="常見的衝突"><a href="#常見的衝突" class="headerlink" title="常見的衝突"></a>常見的衝突</h2><p><img src="/images/Communication/Effective-Team-Communication/13-talk-with.png"><br><img src="/images/Communication/Effective-Team-Communication/08-conflict.png"><br><img src="/images/Communication/Effective-Team-Communication/10-conflict-wo-listen.png"><br><img src="/images/Communication/Effective-Team-Communication/11-too-many-request.png"><br><img src="/images/Communication/Effective-Team-Communication/09-simple-point.png"></p><p><img src="/images/Communication/Effective-Team-Communication/12-quality.png"></p><h2 id="會議：最常見的溝通場合"><a href="#會議：最常見的溝通場合" class="headerlink" title="會議：最常見的溝通場合"></a>會議：最常見的溝通場合</h2><p><img src="/images/Communication/Effective-Team-Communication/14-meeting-before.png"><br><img src="/images/Communication/Effective-Team-Communication/15-meeting-ing.png"><br><img src="/images/Communication/Effective-Team-Communication/16-meeting-after.png"><br><img src="/images/Communication/Effective-Team-Communication/17-meeting-problems.png"><br><img src="/images/Communication/Effective-Team-Communication/18-effecitve-meeting.png"></p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="溝通"><a href="#溝通" class="headerlink" title="溝通"></a>溝通</h2><ul><li><a href="/2020/03/24/Management/Principles-of-Communication/">溝通的原理</a></li><li><a href="/2014/12/10/Management/%E6%BA%9D%E9%80%9A-%E6%88%90%E6%9C%AC/">溝通 &#x3D; 成本</a></li><li><a href="/2020/08/01/Management/Expression-and-Communication/">表達與溝通的差異</a></li><li><a href="/2023/07/29/Management/Team-Consensus-and-Talent-Development/">凝聚團隊共識與人才養成</a></li><li><a href="/2021/12/19/Management/Protocol-to-Communication/">團隊溝通的通訊協議</a></li><li><a href="/2023/08/13/Management/Effective-Team-Communication/">凝聚團隊共識的溝通方法</a></li><li><a href="/2018/03/18/SQA/How-To-Report-A-Defect-or-Bug/">如何有效的回報問題</a></li><li><a href="/2023/08/01/Management/PERMA/">1 on 1 聊什麼 - PERMA</a></li></ul><h2 id="會議"><a href="#會議" class="headerlink" title="會議"></a>會議</h2><ul><li><a href="/2014/11/26/Management/%E9%96%8B%E6%9C%83%E5%8E%9F%E5%89%87/">開會原則</a></li><li><a href="/2020/10/11/Management/Effective-Meetings/">一場有效的會議</a></li><li><a href="/2023/06/14/Management/Failed-Meeting/">一場失敗會議</a></li><li><a href="/2019/08/25/Management/Problems-of-Meeting/">會議的普遍現象</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;這篇整理自今年二月跟朋友分享的內容，主要是關於溝通效率的目錄、總整理。&lt;/p&gt;</summary>
    
    
    
    <category term="經營管理" scheme="https://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="溝通" scheme="https://rickhw.github.io/tags/%E6%BA%9D%E9%80%9A/"/>
    
    <category term="Meetings" scheme="https://rickhw.github.io/tags/Meetings/"/>
    
    <category term="時間管理" scheme="https://rickhw.github.io/tags/%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86/"/>
    
    <category term="會議原則" scheme="https://rickhw.github.io/tags/%E6%9C%83%E8%AD%B0%E5%8E%9F%E5%89%87/"/>
    
    <category term="會議效率" scheme="https://rickhw.github.io/tags/%E6%9C%83%E8%AD%B0%E6%95%88%E7%8E%87/"/>
    
    <category term="溝通成本" scheme="https://rickhw.github.io/tags/%E6%BA%9D%E9%80%9A%E6%88%90%E6%9C%AC/"/>
    
    <category term="工作管理" scheme="https://rickhw.github.io/tags/%E5%B7%A5%E4%BD%9C%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>1 on 1 聊什麼 - PERMA</title>
    <link href="https://rickhw.github.io/2023/08/01/Management/PERMA/"/>
    <id>https://rickhw.github.io/2023/08/01/Management/PERMA/</id>
    <published>2023-08-01T10:21:00.000Z</published>
    <updated>2023-08-04T09:51:30.379Z</updated>
    
    <content type="html"><![CDATA[<p>這篇整理自 2022&#x2F;10&#x2F;12 <code>Software Engineering at Google</code> 這本書的讀書會的 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0244LFy2CbbY2GuWzL8j1aBJqWATcvqBAsnshgdW6sVrnnwTij6EdmFcC4eKYRDrPwl">筆記與摘要</a>。</p><span id="more"></span><hr><h2 id="1-on-1-的目的？"><a href="#1-on-1-的目的？" class="headerlink" title="1 on 1 的目的？"></a>1 on 1 的目的？</h2><p>主管需要定期跟團隊同仁 1 on 1，目的除了了解同仁的工作狀況，更進一步的是了解他們遇到的困難，適度地伸出援手，協助同仁成長。</p><p>過去 1 on 1 的經驗，有兩個題目是更多同仁需要的：</p><ol><li><code>工作的方向</code>: 工作方向通常會導向 <code>職涯規劃</code>，背後動機是希望大家對於現況是否滿意，如果不滿意，那滿意是什麼？這個探索過的，大多都跟職涯方向有關係。<ul><li>對於主管而言，探索的動機是風險管理，如果這位同仁對於工作內容，有疑慮，甚至是在騎驢找馬，這些都是 1 on 1 過程可以觀察出來的。</li><li>身為主管，應該要正面面對可能正在騎驢找馬的同仁，評估如何協助他，另外就是要做好後續的準備。如果他真的有異動，那團隊任務的調度應該如何處理，更多參閱 <a href="/2019/07/09/Management/Layoff-Fired-Resiging/">管理必經之路：資遣、解僱、辭呈</a></li><li>引導職涯方向的討論，可以參閱 <a href="/2022/12/21/About/2022-AWS-Career-Exploration-Day/">AWS Career Exploration Day 2022</a> </li><li>組織人才佈局與管理策略，可以參閱 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tWjKzm9BnagRqknGrnXfzA2DbqTCq1xCcFTdZjvRtkA2pu1rLSbpvfsYGFAe9Mtdl">人才發展策略地圖 (draft)</a></li></ul></li><li><code>工作與生活的平衡</code>: <a href="/2022/10/15/Management/Problem-Behind-Question/">背後深層的問題</a> 我認為是 - <code>幸福感</code></li></ol><p>幸福感這種題目在職場上是很少被拿出來討論的，辦公室裡大多是血淋淋的廝殺，爾虞我詐，各種政治問題。但因為這些利益糾葛，卻往往讓大家忘了一個很重要的問題：</p><blockquote><p>工作的目的到底是什麼？</p></blockquote><p>不管是怎樣的目的，我覺得最終的答案應該是：</p><blockquote><p>讓自己生活更幸福</p></blockquote><p>幸福感談起來很雞湯、高大尚、甚至空泛，有時候在職場上，談這個題目可能會被誤解，或者被質疑背後的動機。</p><p>動機一定是有的，就是前面提到的風險管理，這也是主管的職責。但是基於不過問個人隱私的原則，例如個人的家庭、婚姻、感情、健康 … 等，只要不影響任務，基本上主管是沒有權利過問的，過去我個人也幾乎不會過問這些問題。但這點是矛盾的，每個人難免都會因為個人因素的形況，影響工作狀況。主管用怎樣的方法，不會讓同仁不會覺得有威脅、侵入，可以建立信任，同時又可以協助彼此，找到幸福感，至一個好主管必要的能力。</p><p>習慣用指標方法有效溝通，所以一次同事的介紹之下，接觸了被譽為 <code>正向心理學之父</code>，美國著名心理學家 <a href="https://zh.wikipedia.org/zh-tw/%E9%A9%AC%E4%B8%81%C2%B7%E8%B5%9B%E9%87%8C%E6%A0%BC%E6%9B%BC">馬丁塞利格曼</a>，提出的方法論 PERMA，讓我有了具體探索的方式。</p><p>後來我就把這個方法引入 1 on 1 的過程，底下這段是某次內部讀書會時，分享過去我怎麼 1 on 1 的紀錄。</p><h2 id="職場上的幸福感"><a href="#職場上的幸福感" class="headerlink" title="職場上的幸福感"></a>職場上的幸福感</h2><p>聊到 Engineering Manager (管人) 怎麼知道同仁工作的 <code>幸福感</code> ？我常用的方法是 <a href="https://medium.com/psychology-wonderland/perma%E5%B9%B8%E7%A6%8F%E4%BA%94%E5%85%83%E7%B4%A0-200bce958fa9">PERMA</a>，這五個字分別是以下的縮寫：</p><ol><li>Postive Emotions 正向情緒</li><li>Engagement 全心投入</li><li>Positive Relationship 正向人際關係</li><li>Meaning 生命的意義</li><li>Accomplishment 成就感</li></ol><p><img src="/images/Management/PERMA/PERMA.png"><br>詳細參閱：<a href="https://medium.com/psychology-wonderland/perma%E5%B9%B8%E7%A6%8F%E4%BA%94%E5%85%83%E7%B4%A0-200bce958fa9">PERMA幸福五元素 - 幸福也有公式，建立這些元素讓你活得更幸福</a></p><p>我會用這五個指標，加上 <code>工作</code> 與 <code>生活</code> 兩個象限，如此就有十個指標，每個指標 (bad) 1-10 (good) 分，給同仁一點時間，在白板上寫下自己過去一個月 或一季 以來的分數。如下圖是某一次跟同仁一起討論的紀錄：</p><p><img src="/images/Management/PERMA/20211029.jpg"></p><p>透過這個方法，討論彼此對於每個指標自己在工作或生活的定義或者理解，然後根據現在的狀況，討論分數為什麼是那樣，進而找到目前是幸福指數。</p><p>這個過程，主管的身份，主要會針對工作討論，這是責任、也是權利。逐項跟同仁討論分數背後的原因，例如正向情緒是七分，怎麼是這個分數？哪個事情導致評分？那五分有可能是哪個分數？這是平均值？ … 等。一個正向情緒就可以聊很多東西，看時間狀況，可以挑著聊，像是挑分數比較低的，請對方說說分數背後的故事。這個過程往往會探索出很多問題，這些問題是身為主管要協助同仁改善與提供幫助的。</p><p>工作的分數是主管需要深入了解的，個人部分就可以看同仁狀況。通常個人分數我選擇讓同仁自己保留，但如果分數很低，我大多不會直接問，而是直接說：</p><blockquote><p>有我幫的上的地方，就讓我知道</p></blockquote><p>經驗上，經過幾次工作分數的討論，大多同仁已經知道我的動機，而且知道這是加深彼此的信任。所以個人狀況比較願意跟主管討論，進而避免因為個人因素，影響工作。</p><p>這個方法其實也可以當作自己跟親友評量的工具，透過這個方法更了解彼此。</p><h2 id="全心投入"><a href="#全心投入" class="headerlink" title="全心投入"></a>全心投入</h2><p>其中個人最在乎的就是 <code>Engagement (全心投入)</code>，也就是工作有沒 <code>心流狀態</code>。例如跟同仁的討論設計，有沒真正意義上在討論設計內容，討論過程沒有頭銜、沒有年紀、沒有職級，彼此以客觀、專業的角度，交流想法。</p><p>一個人寫程式，很容易有這種交流，但是卻是單向的，只跟機器溝通，只跟工具交流。但是跟團隊討論設計的過程，大家從各自的角度，客觀地把想法說出來，然後一起激盪出一個大家都覺得 OK 的設計，這個過程，沒有頭銜、沒有組織隔閡、不是為了 KPI，只有共同目標，這點是我覺得很難得的，也是工作中最享受的部分。</p><p>在之前工作，有過很深度 <code>全心投入</code> 的感覺，還記得把產品打造出來，經歷不知道幾回合反覆驗證、找問題、討論 (包含吵架)、修正，最後東西做出來了，到工廠協助量產測試 (NPI)，確立生產測試流程、IQC，還有設計師設計的包裝彩盒。如下圖：</p><p><img src="/images/Management/PERMA/oplink-prod1.jpg"><br><img src="/images/Management/PERMA/oplink-prod2.jpg"></p><p>當拿到工廠生產出來的產品，彩盒開箱的那一刻，心情真的是難以言喻。這麼多年過去了，之後就很難再有那種全心投入，整個團隊一起努力好一件事情的感覺。</p><blockquote><p>全心投入相反的狀態就是 <a href="/2017/01/23/Management/Cost-In-Context-Switch/">Context Switch</a>.</p></blockquote><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="站內文章"><a href="#站內文章" class="headerlink" title="站內文章"></a>站內文章</h2><ul><li><a href="/2022/12/21/About/2022-AWS-Career-Exploration-Day/">AWS Career Exploration Day 2022</a></li><li><a href="/2022/10/15/Management/Problem-Behind-Question/">Problem Behind Question</a></li><li><a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tWjKzm9BnagRqknGrnXfzA2DbqTCq1xCcFTdZjvRtkA2pu1rLSbpvfsYGFAe9Mtdl">人才發展策略地圖 (draft)</a></li><li><a href="/2017/01/23/Management/Cost-In-Context-Switch/">Cost in Context Switch</a></li><li><a href="/2019/07/09/Management/Layoff-Fired-Resiging/">管理必經之路：資遣、解僱、辭呈</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://medium.com/psychology-wonderland/perma%E5%B9%B8%E7%A6%8F%E4%BA%94%E5%85%83%E7%B4%A0-200bce958fa9">PERMA幸福五元素 - 幸福也有公式，建立這些元素讓你活得更幸福</a></li><li><a href="https://podcasts.apple.com/tw/podcast/%E5%8A%89%E8%BB%92%E7%9A%84how-to%E4%BA%BA%E7%94%9F%E5%AD%B8/id1547950387?i=1000602953940">EP198｜【讀書會】心理學從此改變的那一刻 ——《Flourish 邁向圓滿》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;這篇整理自 2022&amp;#x2F;10&amp;#x2F;12 &lt;code&gt;Software Engineering at Google&lt;/code&gt; 這本書的讀書會的 &lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/pfbid0244LFy2CbbY2GuWzL8j1aBJqWATcvqBAsnshgdW6sVrnnwTij6EdmFcC4eKYRDrPwl&quot;&gt;筆記與摘要&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="經營管理" scheme="https://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="溝通" scheme="https://rickhw.github.io/tags/%E6%BA%9D%E9%80%9A/"/>
    
    <category term="Bus Memo" scheme="https://rickhw.github.io/tags/Bus-Memo/"/>
    
    <category term="主管" scheme="https://rickhw.github.io/tags/%E4%B8%BB%E7%AE%A1/"/>
    
    <category term="PERMA" scheme="https://rickhw.github.io/tags/PERMA/"/>
    
    <category term="正向心理學" scheme="https://rickhw.github.io/tags/%E6%AD%A3%E5%90%91%E5%BF%83%E7%90%86%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>凝聚團隊共識與人才養成</title>
    <link href="https://rickhw.github.io/2023/07/29/Management/Team-Consensus-and-Talent-Development/"/>
    <id>https://rickhw.github.io/2023/07/29/Management/Team-Consensus-and-Talent-Development/</id>
    <published>2023-07-29T10:21:00.000Z</published>
    <updated>2023-08-01T13:51:34.448Z</updated>
    
    <content type="html"><![CDATA[<p>這段 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0gwDFvZ2RnZvTsFoo9bHgG5Hmfhs31953kjZa5MX3aj7jfrB6AsfaootqgcYM1Td7l">筆記</a> 是 2020 年聽 podcast 寫下的心得筆記、跟朋友討論的東西。這整個過程，也是我過去 <code>凝聚團隊共識</code>、<code>人才養成</code> 的實踐方法。</p><span id="more"></span><h2 id="階段"><a href="#階段" class="headerlink" title="階段"></a>階段</h2><p>這是我在團隊裡用了一段時間、找共識的方法</p><ul><li>第一階段是 <code>暢所欲言</code>，誰有什麼想法都提出來寫下來；</li><li>第二階段是 <code>評估想法</code>，發現不同想法之間的聯繫，把他們用線連接起來；</li><li>第三階段是 <code>形成決議</code>：把討論中淘汰掉的想法都劃掉，剩下的分出 <code>主、次</code> 和 <code>執行順序</code>，然後整理一下就可以照著做了。</li></ul><p>這三個階段，其實就是從 <code>發散思維</code>，到最後 <code>集體的集中思維</code> 的過程。先發揚民主，最後形成集中的共識。</p><h2 id="起頭：萬事起頭難，暢所欲言"><a href="#起頭：萬事起頭難，暢所欲言" class="headerlink" title="起頭：萬事起頭難，暢所欲言"></a>起頭：萬事起頭難，暢所欲言</h2><p>通常要有人起頭，做個雛形或者樣子，然後要讓大家暢所欲言的討論，把想法丟出來，這段過程很重要。</p><p>我常會是把想法丟出來的人，但是跟大家發想的過程，要準備被大家圍毆，或者被整個推翻的心理準備。這個過程要放下身份、身段，讓大家可以 <code>暢所欲言</code>，然後透過這樣的激盪，把想法都放在白板上，過程用顏色區分問題、方向、現況 … 等。</p><p>而在討論過程，主軸很容易因為大家的背景、角色、經驗不一樣，主軸一直 <code>飄、亂、散</code> 是正常的，所以一開始發起的人就是要負責讓會議進行有主軸。</p><blockquote><p>這個過程，雖然是我先發起，但過程中也可以探索出下一個可以接棒自己的人才，越有想法的人，就讓他嘗試起頭。<br>相關文章：<a href="/2022/09/10/About/Difficult-and-Complicate/">問題的難與雜</a></p></blockquote><h2 id="探索潛力人才"><a href="#探索潛力人才" class="headerlink" title="探索潛力人才"></a>探索潛力人才</h2><p>下一步就是要指派一個負責人，開始整理白板討論的內容，通常他也是接下來整個任務的執行者。</p><p>這段非常非常重要，因為 <code>整理</code> 就是把想法具象化的過程，沒有這段整理的過程，討論過程激盪的想法與內容等於就浪費了。</p><p>接手的人要負責整理這些討論的內容，把發散的資訊，眾人的想法，收斂成一份大家的初版共識。</p><p>整理的過程，負責人必須重新深度思考這些討論，重新思考其中的 <code>邏輯結構</code>、<code>先後關係</code>、<code>必要與次要</code>，經過這段重新思考，這個人會變成對整件有最深刻的了解。</p><h2 id="可執行的規格與計畫"><a href="#可執行的規格與計畫" class="headerlink" title="可執行的規格與計畫"></a>可執行的規格與計畫</h2><p>下一步就是整理成有意義的文件，這份文件會是一份 Guideline、Spec 的草稿版了。這份文件也會是未來執行的起始點，文件內容包含：</p><ol><li>問題的描述</li><li>目標，得到的好處</li><li>解決方案有哪些？他們個別考慮是什麼？適合怎樣的場景？優缺點</li><li>具體 PoC 的範圍</li><li>常見的問題</li></ol><p>有了規格的具象化，下一步才是技術的實驗，也就是 PoC。依據目標與方向的 PoC 才有意義。否則很容易變成無上限的發散。</p><blockquote><p>這個過程有點類似：<a href="/2019/04/05/About/Working-Backwards/">Working Backwards</a> 的想法</p></blockquote><h2 id="透過技術評估，培養技術專家"><a href="#透過技術評估，培養技術專家" class="headerlink" title="透過技術評估，培養技術專家"></a>透過技術評估，培養技術專家</h2><p>紙上得來終覺淺，絕知此事要躬行。再多的討論與想法，沒有人動手去做，終究空談，特別是在技術圈。</p><p>所以前面提到的負責人，通常會是實際執行的人，他也會是未來對這個新任務、新技術最熟的人，這是培養技術專家的機會與跳板。</p><p>PoC 技術是要解決現場問題。所以根據規格的內容，開始評估需要的技術與 PoC，他要走過所有技術的實踐與考慮，過程就是對於新技術有駕馭能力，獨立研究新技術的方向、如何評估可行性。</p><p>現場問題往往比 PoC 的更複雜十倍。但是 PoC 是要了解是否都滿足現場的考量，我常會說：問題的 Consideration (考慮) 是什麼？這些考慮都是必要的？優先續是什麼？</p><p>評估過程，不管結果怎樣，只要確實執行，對於技術會有基礎掌握。掌握技術的目的是為了能夠解決關鍵問題，帶來效益。不管評估結果是否適合，都是毀很有收穫的。</p><blockquote><p>2018 年 K8s 剛開始流行的時候，因為團隊需求，期望 K8s 上跑 Windows Container，但我們都知道，這是不切實際的。但我們還是很認真的評估，花了兩個多月，找了 AWS EKS (那時候 EKS 還在 Beta) 一起評估，搞了很久，但有了實際的報告與預期結果。最後結果不難猜想，是不適合的 (不是不行)，但是大家都因為這個評估過程，很有收穫。</p></blockquote><p>除了技術評估，過程我也會訓練同仁 <code>表達</code> 能力，也就是 <code>把複雜的技術概念，變成普羅大眾能聽懂的人話</code>，就像是科普一樣。背後目的就是讓他試著把技術講易懂，怎樣找到適當的比喻，怎樣讓另一個人也懂的怎麼做？怎麼用？怎麼講？<code>表達</code> 技巧也是訓練的關鍵之一。懂技術，會用技術，但是無法讓別人知道，等於不懂。</p><blockquote><p>沒有時間學習技術的管理者，也可以在這個過程，間接學到這些新技術，至少不會完全跟不上，相關參閱 <a href="/2019/03/30/Management/How-do-Manager-Keep-Learning/">管理者如何持續學習技術？</a>, <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tWjKzm9BnagRqknGrnXfzA2DbqTCq1xCcFTdZjvRtkA2pu1rLSbpvfsYGFAe9Mtdl">人才發展策略地圖 (draft)</a></p></blockquote><h2 id="下一步：執行與落地"><a href="#下一步：執行與落地" class="headerlink" title="下一步：執行與落地"></a>下一步：執行與落地</h2><p>透過評估，滿足了所有情境，下一步才是導入。導入就是真的拿去用，解決問題，產生價值。</p><p>用之前，我通常會希望有規則，也就是 <code>使用前請閱讀公開說明書的概念</code>。</p><p><code>能</code> 是一件事，<code>用</code> 另一件事。評估與 PoC 確定的是 <code>能</code> 的問題，<code>用</code> 是要用 <code>制度、規範</code> 解決。</p><p>制度規範就是規矩，沒有規矩，怎麼能方圓？系統要長大，線性增加，靠的是規矩、制度、章法。</p><blockquote><p>更多參閱： <a href="/2019/11/19/Management/Objectives-Key-Results-Executions/">有效定義目標與執行、落地</a></p></blockquote><h2 id="Q-怎麼讓來開會的人有暢所欲言？"><a href="#Q-怎麼讓來開會的人有暢所欲言？" class="headerlink" title="Q: 怎麼讓來開會的人有暢所欲言？"></a>Q: 怎麼讓來開會的人有暢所欲言？</h2><p>我也不是很清楚算不算做到，但心裡有一些平常在做的，幾點我的套路：</p><ol><li><code>以身作則</code>：我常說會議要準時，不要遲到，如果大家發現 Rick 無故遲到，請不用客氣ㄉㄧㄤ下去。<ul><li>除了會議，其他也是。看起來沒啥關係，只是想表達紀律，原則。</li></ul></li><li><code>承認自己能力有限</code>：讓大家知道，我們是一個 Team ，各有各的專長，遇到問題是可以一起分擔的。一個人能力很有限，但一個團隊可以很強大。</li><li><code>前中後的節奏</code>：<ul><li>討論前，主動丟出想法</li><li>討論中，一切都從白板開始，一開始就具象表達。</li><li>表達的時候，盡量用生活化的例子，或者用自己當例子，或者用現場的人當作故事角色，把大家串再一起。</li><li>用自己當例子是暴露自己的弱點，好惡，讓大家帶著輕鬆進入主題。</li></ul></li><li>平常營造討論的風氣，訓練大家表達的方法（我很強調這點）。<ul><li>討論的結果要可以具象化 (文件)、結構化 (還是文件)、之後可以依循 (又是文件)。</li></ul></li><li>大家對於討論有具體的內容，有一致的表達方法，下一個 run 就會有更具體的討論，加上前面 3) 建立的連線，4) 的具體內容 2) 弱化權力角色，1) 有紀律的團隊 … 也更容易暢所欲言… ?</li></ol><blockquote><p>更多參閱： <a href="/2020/08/01/Management/Expression-and-Communication/">表達與溝通的差異</a>、<a href="/2019/04/03/Management/Write-Document/">再談『為什麼寫文件？』</a></p></blockquote><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="/2019/04/05/About/Working-Backwards/">一個人的 Working Backwards</a></li><li><a href="/2019/03/30/Management/How-do-Manager-Keep-Learning/">管理者如何持續學習技術？</a></li><li><a href="/2021/12/19/Management/Protocol-to-Communication/">團隊溝通的通訊協議</a></li><li><a href="/2019/11/19/Management/Objectives-Key-Results-Executions/">有效定義目標與執行、落地</a></li><li><a href="/2020/08/01/Management/Expression-and-Communication/">表達與溝通的差異</a></li><li><a href="/2019/04/03/Management/Write-Document/">再談『為什麼寫文件？』</a></li><li><a href="/2022/09/10/About/Difficult-and-Complicate/">問題的難與雜</a></li><li><a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tWjKzm9BnagRqknGrnXfzA2DbqTCq1xCcFTdZjvRtkA2pu1rLSbpvfsYGFAe9Mtdl">人才發展策略地圖 (draft)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;這段 &lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/pfbid0gwDFvZ2RnZvTsFoo9bHgG5Hmfhs31953kjZa5MX3aj7jfrB6AsfaootqgcYM1Td7l&quot;&gt;筆記&lt;/a&gt; 是 2020 年聽 podcast 寫下的心得筆記、跟朋友討論的東西。這整個過程，也是我過去 &lt;code&gt;凝聚團隊共識&lt;/code&gt;、&lt;code&gt;人才養成&lt;/code&gt; 的實踐方法。&lt;/p&gt;</summary>
    
    
    
    <category term="經營管理" scheme="https://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="溝通" scheme="https://rickhw.github.io/tags/%E6%BA%9D%E9%80%9A/"/>
    
    <category term="Awareness" scheme="https://rickhw.github.io/tags/Awareness/"/>
    
    <category term="主管" scheme="https://rickhw.github.io/tags/%E4%B8%BB%E7%AE%A1/"/>
    
    <category term="Consensus" scheme="https://rickhw.github.io/tags/Consensus/"/>
    
    <category term="人才養成策略" scheme="https://rickhw.github.io/tags/%E4%BA%BA%E6%89%8D%E9%A4%8A%E6%88%90%E7%AD%96%E7%95%A5/"/>
    
    <category term="團隊協作" scheme="https://rickhw.github.io/tags/%E5%9C%98%E9%9A%8A%E5%8D%94%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>新書上市 - 個人著作《SRE 實踐與開發平台指南》</title>
    <link href="https://rickhw.github.io/2023/07/17/About/2023-SRE-Practice-and-IDP/"/>
    <id>https://rickhw.github.io/2023/07/17/About/2023-SRE-Practice-and-IDP/</id>
    <published>2023-07-17T13:42:30.000Z</published>
    <updated>2023-09-13T13:04:13.409Z</updated>
    
    <content type="html"><![CDATA[<p>如果你希望買一本書，照著裡面說的步驟走，事情就搞定了，那這本書一定不適合你。</p><p>如果你希望買一本書，可以隨意翻閱，然後有種「啊！就是這樣啦！」，那這本書應該適合你。</p><p><img src="/images/About/2023-SRE-Practical-and-IDP/cover.jpg"></p><p>銷售通路：</p><ul><li><a href="https://www.tenlong.com.tw/products/9786263334908">天瓏書局</a></li><li><a href="https://www.books.com.tw/products/0010963275">博客來書店</a></li></ul><span id="more"></span><h2 id="方向規劃"><a href="#方向規劃" class="headerlink" title="方向規劃"></a>方向規劃</h2><p>一開始在構思這本書，是從去年演講 “<a href="/2022/05/10/About/2022-SREConf2022/">91APP 在 AWS 上的 SRE 實踐之路</a>“ 為主幹，搜集了很多資料，但是寫到一半發現，我開始在思考一些問題：</p><ol><li>希望讀者花 500 (假設) 得到什麼？有什麼啟發？</li><li>一本書要給讀者怎樣的內容，才值回票價？</li><li>這本書可以隨意翻閱？</li><li>讀者為啥要買我的書？</li><li>這本書十年後會變成桌墊？還是經典？</li></ol><p>後來想想，大筆一揮，砍掉很多東西，更多是重新整理最真實的經驗，分享背後的 QBQ。</p><p>問問我自己，拿起一本書的時候，希望得到什麼？</p><blockquote><p>不是希望得到答案，更多是獲得思考的機會，也就是啟發思考；不是要讀者都同意我的觀點，更多是因為我的觀點，獲得啟發與思考。</p></blockquote><p>這樣就達到我的目的了。</p><!--## 內容與讀者的距離：實際問題切入Google 的 SRE 本身閱讀起來，是有距離的，也就是上面提的問題，如果沒有一定規模，或者自建機房，大部分遇不到。書中九成九的內容，都是我自己親自經歷、決策、，其中有不少內容，曾經共事過的同事一定不陌生，甚至會有會心一笑的。## 減法原則：本來有規劃，但後來沒寫的，本來書內容規劃很多，後來我全砍了。。。 (下一本？本來要寫這些：- Coding, 談 OOP- 談 Design Pattern因為遇過不少傳統 OP 要轉 DevOps or SRE，但因為沒有 coding 技能，或者不想接觸 coding為什麼沒有寫？怕定位混亂--><h2 id="寫作方式"><a href="#寫作方式" class="headerlink" title="寫作方式"></a>寫作方式</h2><ul><li><code>寫作原則</code>: 以降低 SRE 的距離感為原則，所以以口語化、容易閱讀、讀起來沒壓力、拿起來，隨意翻閱都可以讀。</li><li><code>生活經驗</code>: 書中的概念，以生活的概念為原則，不管是技術或者方法，應該都可以在生活當中找到例子，也就是讀者透握自身的生活經歷，就可以理解裡面的想法。</li><li><code>持續閱讀</code>: 身邊有在閱讀的朋友應該算多，至少上個工作，有國寶級大師 Ruddy 老師，讓大家在 <code>閱讀</code> 這件事，讓同事們都很有養分。</li><li><code>章節關聯性</code>: 章節的安排，前半段盡量減少關聯性，後半段則有關聯性。</li></ul><h2 id="感謝"><a href="#感謝" class="headerlink" title="感謝"></a>感謝</h2><ul><li>業界推坑魔人 <code>正瑋</code> 引薦出版社，讓我嘗試跟編輯討論出版的方向。</li><li>感謝出版社 <code>Abby</code>、以及責任編輯 <code>Sammi</code> 的耐心與建議。</li><li>感謝推薦序的幾位好朋友：<code>Andrew</code>、<code>正瑋</code>、<code>Kim</code>、<code>小城</code>，在短短的時間之內看完，然後寫推薦序，真的是很感謝他們：<ul><li><a href="https://www.facebook.com/andrew0928/posts/pfbid0kTDAuqv2EA87KJyi1aQ63FAsTqBHeA3NB2Xm6BpBxbqRmMGuCRuEXM9btEWahb8Jl">Andrew Wu 的推薦序</a></li><li><a href="https://chengweichen.com/2023/07/rick-sre-book.html">正瑋 的推薦序</a></li><li><a href="https://www.facebook.com/kimkao.solid/posts/pfbid02KRokXvwxvcS4vdGjqEASF47Ard79AD1B7btjqRWoRY8y18rjD4J6hSGsgh65yNCpl">Kim Kao 的推薦序</a></li><li><a href="https://medium.com/smalltowntechblog/sre%E5%AF%A6%E8%B8%90%E8%88%87%E9%96%8B%E7%99%BC%E5%B9%B3%E5%8F%B0%E6%8C%87%E5%8D%97-%E6%8E%A8%E8%96%A6%E5%BA%8F-%E4%B8%8D%E7%94%A8n%E5%B9%B4%E7%9A%84%E5%BE%9E%E6%A5%AD%E7%B6%93%E9%A9%97-%E5%8F%AA%E9%9C%80%E9%80%8F%E9%81%8E%E6%9C%AC%E6%9B%B8-%E5%8D%B3%E5%8F%AF%E5%9C%A8%E7%B6%AD%E9%81%8B%E8%B7%AF%E4%B8%8A%E6%92%A5%E9%9B%B2%E8%A6%8B%E6%97%A5-9e9d9a4b1c9">小城的推薦序</a></li></ul></li><li>感謝前東家 91APP 過去那麼多年舞台以及養分</li><li>感謝一起成長的團隊 - <code>91APP Infra Team (原 RD5)</code>，從零到一、從一到十，一路上不離不棄，不斷地鞭策，伴我成長</li></ul><h2 id="書中彩蛋"><a href="#書中彩蛋" class="headerlink" title="書中彩蛋"></a>書中彩蛋</h2><p>跟我共事過的同事都知道，我很重視閱讀文件這件事情，凡事都會要求先看過文件。這樣要求的同時，我也會要求自己把文件寫清楚，Infra Team 裡起草規範、制度、規格、Guideline 寫最多的一定是我，而且就是白紙黑字。</p><p>不過我很清楚，大部分的同仁不會去細看這些東西，所以我曾經在規格文件中，埋藏彩蛋，讓細心的同事有驚喜，如下圖 (<a href="https://www.facebook.com/rick.kyhwang/posts/pfbid031dXbsA7VNKFDDnQJAUQv7huPWAcQKJnbnMS7EadVvqKfT8wXHGVTEhytmBjhipvNl">原始連結</a>)</p><p><img src="/images/About/2023-SRE-Practical-and-IDP/happy-water.png"></p><p>書中也有這樣的彩蛋，不過要稍微動一點腦筋。。。找到歡迎私訊我，限量兩本書送給先找到的朋友 XD</p><h2 id="Q-and-A"><a href="#Q-and-A" class="headerlink" title="Q and A"></a>Q and A</h2><h3 id="Q-電子書的通路平台有哪些？"><a href="#Q-電子書的通路平台有哪些？" class="headerlink" title="Q: 電子書的通路平台有哪些？"></a>Q: 電子書的通路平台有哪些？</h3><blockquote><p>目前出版社回覆有合作的電子平台如下：博碩有長期合作的十大電子書平台 (博客來、讀墨 (Readmoo)、Pubu、Kobo樂天、Googleplay、凌網 (Hyread)、UDN (聯合線上)、讀冊生活、台灣漫讀 (Bookwalker)、mybook)</p></blockquote><h3 id="Q-電子書上市時間？"><a href="#Q-電子書上市時間？" class="headerlink" title="Q: 電子書上市時間？"></a>Q: 電子書上市時間？</h3><blockquote><p>出版社回覆：實體書上架後兩個月，實體書 08&#x2F;01 上架。</p></blockquote><h3 id="Q-有新書發表會或實體活動嗎？"><a href="#Q-有新書發表會或實體活動嗎？" class="headerlink" title="Q: 有新書發表會或實體活動嗎？"></a>Q: 有新書發表會或實體活動嗎？</h3><ul><li>2023&#x2F;07&#x2F;22: 目前 DevOps Taiwan 協助安排，活動報名處 <a href="https://devops.kktix.cc/events/meetup-54-rick-sre-book">KKtix</a>，其他邀約正在協調中。</li><li>2023&#x2F;08&#x2F;01 Updated:<ul><li>(已經結束) <a href="https://devops.kktix.cc/events/meetup-54-rick-sre-book">08&#x2F;19 (六) 1400-1630: 天瓏書局 Coding Space, DevOps Taiwan 主辦</a></li><li>(已經結束) <a href="https://agilecommtw.kktix.cc/events/sre-book">08&#x2F;26 (六) 1400-1700: 逸空間 (Yi-Spaces), Agile Taipei 主辦</a></li></ul></li></ul><h3 id="Q-寫作過程有用到-ChatGPT？或者參考？"><a href="#Q-寫作過程有用到-ChatGPT？或者參考？" class="headerlink" title="Q: 寫作過程有用到 ChatGPT？或者參考？"></a>Q: 寫作過程有用到 ChatGPT？或者參考？</h3><blockquote><p>只有整理 IDP 時候參考一下其他人寫的想法，然後融入自己的經驗。用 ChatGPT 倒是沒有。主要是整件事情我都有想過，問題是，我的腦袋裡沒有 ChatGPT … 所以就算問 ChatGPT，答案也不是我要的。</p></blockquote><hr><h2 id="紀錄"><a href="#紀錄" class="headerlink" title="紀錄"></a>紀錄</h2><h3 id="06-x2F-18-六-首度揭露資訊"><a href="#06-x2F-18-六-首度揭露資訊" class="headerlink" title="06&#x2F;18 (六) 首度揭露資訊"></a>06&#x2F;18 (六) 首度揭露資訊</h3><p>在 <a href="/2023/05/23/About/2023-Software-Test-Practice/">軟體測試實務 新書發表會</a> 現場首度揭露資訊，事後在 FB 發布的訊息 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid02GyqUw7GevVSMeJYMzp7ixSfQ5cJUJWNFKT8gey2LCH8rVQhkeQrjs4Xni397qxmBl">link</a></p><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230618_6.png"></p><h3 id="07-x2F-17-一-公開預購訊息"><a href="#07-x2F-17-一-公開預購訊息" class="headerlink" title="07&#x2F;17 (一) 公開預購訊息"></a>07&#x2F;17 (一) 公開預購訊息</h3><p>個人 FB 曝光訊息: <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid02XRUh3a63Wq9Lvkz4oF71k1DWUBhHqjCKgcycdgscRxDZD2JpxNrUMojcVAF1XuRJl">link</a></p><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230717_1_open.png"></p><p>天龍書局的 Banner</p><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230717_tenlong_banner.jpg"></p><h3 id="07-x2F-17-三-開放預購第三天，週銷售-Top1"><a href="#07-x2F-17-三-開放預購第三天，週銷售-Top1" class="headerlink" title="07&#x2F;17 (三) 開放預購第三天，週銷售 Top1"></a>07&#x2F;17 (三) 開放預購第三天，週銷售 Top1</h3><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230719_3-weekly-top1.jpg"></p><h3 id="07-x2F-21-五-開放預購第五天，月銷售-Top1"><a href="#07-x2F-21-五-開放預購第五天，月銷售-Top1" class="headerlink" title="07&#x2F;21 (五) 開放預購第五天，月銷售 Top1"></a>07&#x2F;21 (五) 開放預購第五天，月銷售 Top1</h3><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230721_5-monthly-top1.jpeg"></p><p>Page View: FB like 500++</p><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230721_5-pageview.png"></p><hr><h2 id="書友見面會"><a href="#書友見面會" class="headerlink" title="書友見面會"></a>書友見面會</h2><p>簡報:</p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/4CmibR0EfoTgjf?startSlide=1" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;max-width: 100%;" allowfullscreen></iframe><div style="margin-bottom:5px"><strong><a href="https://www.slideshare.net/rickhwang/2023-08-sre" title="2023 08 - SRE 實踐與開發平台指南 - 書友見面會" target="_blank">2023 08 - SRE 實踐與開發平台指南 - 書友見面會</a></strong> from <strong><a href="https://www.slideshare.net/rickhwang" target="_blank">Rick Hwang</a></strong></div><p>活動照片：</p><h3 id="天瓏書局"><a href="#天瓏書局" class="headerlink" title="天瓏書局"></a>天瓏書局</h3><ul><li>照片：<a href="https://www.facebook.com/media/set/?set=a.10219080102392862&type=3">20230819_6 - SRE 書友見面會 (天瓏書局)</a></li><li>現場書友的心得筆記 - <a href="https://www.facebook.com/permalink.php?story_fbid=pfbid02wDp4A97zux4NwUHApfS5JQYv256smD59YwYTf6Q41vwBegbuqtqb1HRRjeAptE4Kl&id=100068893800768">Anna Su Notes</a></li></ul><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230819_6-1.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230819_6-2.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230819_6-3.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230819_6-4.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230819_6-5.JPG"></p><h3 id="逸空間"><a href="#逸空間" class="headerlink" title="逸空間"></a>逸空間</h3><ul><li>照片：<a href="https://www.facebook.com/media/set/?vanity=rick.kyhwang&set=a.10219114701337814">20230823_6 - SRE 書友見面會 (逸空間, Agile Taipei)</a></li></ul><p><img src="/images/About/2023-SRE-Practical-and-IDP/20230826_6-1.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230826_6-2.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230826_6-3.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230826_6-4.JPG"><br><img src="/images/About/2023-SRE-Practical-and-IDP/20230826_6-5.JPG"></p><hr><h1 id="其他資訊"><a href="#其他資訊" class="headerlink" title="其他資訊"></a>其他資訊</h1><ul><li>iTHome - <a href="https://www.ithome.com.tw/article/157902">星期五不應該部署？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你希望買一本書，照著裡面說的步驟走，事情就搞定了，那這本書一定不適合你。&lt;/p&gt;
&lt;p&gt;如果你希望買一本書，可以隨意翻閱，然後有種「啊！就是這樣啦！」，那這本書應該適合你。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/About/2023-SRE-Practical-and-IDP/cover.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;銷售通路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tenlong.com.tw/products/9786263334908&quot;&gt;天瓏書局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.books.com.tw/products/0010963275&quot;&gt;博客來書店&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="About" scheme="https://rickhw.github.io/categories/About/"/>
    
    
    <category term="SRE" scheme="https://rickhw.github.io/tags/SRE/"/>
    
    <category term="Books" scheme="https://rickhw.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>為什麼有些人都不刪除用不到的程式碼？</title>
    <link href="https://rickhw.github.io/2023/07/11/Coding/Why-Keep-Old-Code/"/>
    <id>https://rickhw.github.io/2023/07/11/Coding/Why-Keep-Old-Code/</id>
    <published>2023-07-10T19:33:00.000Z</published>
    <updated>2023-07-12T11:11:58.550Z</updated>
    
    <content type="html"><![CDATA[<p>原文是我在 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid069YbbrasrKAnqcrL7bnME8ajSZiaGh5LvhxoPX5qrCbsbY4ohiq3QzLz3qWQXD9vl">fb 寫下</a> 草稿，主要針對靠北工程師 <a href="https://www.facebook.com/init.kobeengineer/posts/pfbid0GxdVfaGnYi3YHKWo1vzhApBkSNpQext32nLy1KmhihKc3ogAp6uEWtgoEUosXn3Nl">鄉民提的問題</a>。幾乎一面倒的狀況之下，分享我自己的經驗與看法，提供不一樣的思路與前後文。</p><p><img src="/images/Coding/Why-Keep-Old-Code/main.png"></p><span id="more"></span><h2 id="個人觀點"><a href="#個人觀點" class="headerlink" title="個人觀點"></a>個人觀點</h2><p>以前也會這樣做，現在還是會這樣做，背後核心的想法是：</p><blockquote><p>修改的當下,<br>有沒有 &#x2F; 能不能 <code>意會 (awareness)</code> 到過去曾經發生事情</p></blockquote><p>這就像, 大家都知道發脾氣解決不了問題, 難的是當下, 你要觀察到自己已經要發脾氣了, <code>認知 (awareness)</code> 要控制自己的情緒.</p><p>開始修改一段既有的邏輯, 假設是一個 function 裡的某個 block A:</p><ul><li>有沒有理解該 block A 原本的設計？</li><li>該 block A 是否有明確的範圍? <ul><li>Q: 已經是 block 為啥會有範圍問題？</li><li>A: 這就是問題, 就差在修改當下你有沒意識到這問題</li></ul></li><li>修改之後, 過些時間 (無論長短), 會來還記得為什麼這樣改?</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>我知道很多人會說, 可以看 git log, 現在 IDE 也會即時秀在上面, 工具的確可以幫助這點, 我覺得沒什麼問題.</p><p>但實務上, 在改 code 的當下, 重點還是要意會到, 這次的 change 與過去的設計的差異. git log &#x2F; IDE &#x2F; 留下就的 code 背後動機都是如此. 至於哪一個比較有效, 就是選擇.</p><blockquote><p>這段話的邏輯，與用實體看板的動機是一樣的。類似問題在選擇 實體看板與數位看板 經常出現。</p></blockquote><h3 id="務實的認知-Awareness-方法"><a href="#務實的認知-Awareness-方法" class="headerlink" title="務實的認知 (Awareness) 方法"></a>務實的認知 (Awareness) 方法</h3><p>老人的老方法, 就是把舊的放在上面, 但是會有 flag 註記為什麼改, 如果是 change 就一定要保留舊的, 像是一個 legacy code, 因為時間關係, 在一個超大的 <code>if ( ... // 五行  ) &#123;&#125; </code> 條件式, 上面已經有七八個 flag, 標示 defect number, issue tracing 上會記錄問題的背景, 討論的前因後果, 可能相關的 issue.</p><p>執行面, 時間關係, 只能先改, 之後再來重構.</p><blockquote><p>對, 我知道, 這種 Code 要重構, 要如何如何 …. (省略 3000 個字,<br>時間夠, 我可以整個都重寫 … 重點是沒時間<br>工程師都很常靠北別人寫的文件不清楚, 但靠北之前, 請問問自己花了多少時間寫文件.</p></blockquote><p>很多時候, 不知道前因後果, 只是為了改而改, 只會把問題越搞越撲逤迷離. 留下麵包屑, 留下 defect number, 才是有機會重構的線索.</p><h3 id="想當年-真實案例"><a href="#想當年-真實案例" class="headerlink" title="想當年, 真實案例"></a>想當年, 真實案例</h3><p>我還很菜的時候, 就做過這種重構的事. 但那風險非常高, 等於過去曾發生的 defect 要一次全解.</p><blockquote><p>註：那年代還沒有 Unit Test 這種名稱, 但有類似做法.</p></blockquote><p>那是一個類似 insert 的演算法, 簡單說就是一個文字編輯器, 當 insert 一個 character 的時候, 整文章的 linked list 結構被加入一些 node, 然後圖形介面要重新 render 的時候, 發生邏輯的誤判, 造成畫面大亂.</p><p>那時候我就重新分析這個演算法, 但是發現整個已經非常混亂了, 我改下去不是變成英雄, 不然就是背鍋俠. 最後 … 畫了一張很大的流程圖, 讓老闆知道, 不是我不改 … 而是我太菜, 不敢改 …. (算是權衡之計)</p><p>我之所以意會到這件事情, 是因為很多前人都有留 flag &#x2F; 還有舊的邏輯 (comment out), 所以我很清楚知道, 這段結構過去的傷疤與問題, 打開 code 當下馬上就意會 (awareness) 到這個問題了 …</p><p>這就是為什麼, 很多老人都會把舊的 code 放在上面, 不砍的原因.</p><h2 id="非黑即白"><a href="#非黑即白" class="headerlink" title="非黑即白"></a>非黑即白</h2><p>說說一些不一樣的看法.</p><p>重點還是看一下 Context (前後文), Situation (情況), 再來下定論.</p><p>真實世界的運作，不是那麼單純的</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原文是我在 &lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/pfbid069YbbrasrKAnqcrL7bnME8ajSZiaGh5LvhxoPX5qrCbsbY4ohiq3QzLz3qWQXD9vl&quot;&gt;fb 寫下&lt;/a&gt; 草稿，主要針對靠北工程師 &lt;a href=&quot;https://www.facebook.com/init.kobeengineer/posts/pfbid0GxdVfaGnYi3YHKWo1vzhApBkSNpQext32nLy1KmhihKc3ogAp6uEWtgoEUosXn3Nl&quot;&gt;鄉民提的問題&lt;/a&gt;。幾乎一面倒的狀況之下，分享我自己的經驗與看法，提供不一樣的思路與前後文。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Coding/Why-Keep-Old-Code/main.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Coding" scheme="https://rickhw.github.io/categories/Coding/"/>
    
    
    <category term="Code Convension" scheme="https://rickhw.github.io/tags/Code-Convension/"/>
    
  </entry>
  
  <entry>
    <title>SRE 常見問題 - 訪談紀錄</title>
    <link href="https://rickhw.github.io/2023/07/06/DevOps/SRE-FAQ/"/>
    <id>https://rickhw.github.io/2023/07/06/DevOps/SRE-FAQ/</id>
    <published>2023-07-06T04:43:00.000Z</published>
    <updated>2023-07-22T07:16:25.050Z</updated>
    
    <content type="html"><![CDATA[<p>整理一段關於 SRE 問題的訪談紀錄，歡迎大家提供不一樣的經驗與想法。</p><span id="more"></span><h2 id="Q1-企業內部的-SRE-與-DevOps-工作內容與分工？"><a href="#Q1-企業內部的-SRE-與-DevOps-工作內容與分工？" class="headerlink" title="Q1. 企業內部的 SRE 與 DevOps 工作內容與分工？"></a>Q1. 企業內部的 SRE 與 DevOps 工作內容與分工？</h2><p>這要看企業規模，而且大部分企業對於 DevOps &#x2F; SRE 的理解與定義可能都有差異。</p><p>個人經歷過大多是這樣分：</p><ul><li><code>Feature Team / DevOps</code>: 負責業務邏輯的開發團隊 (Scrum Team)，團隊裡可能有一個或多個專屬的 DevOps Engineer 負責處理所有的 CI &#x2F; CD 工作。 </li><li><code>Infra Team / SRE</code>: 負責處理 App 以外的東西，包含 Cloud &#x2F; Network &#x2F; Cost &#x2F; Provisioning &#x2F; Observability  &#x2F; Monitoring &#x2F; Architecture &#x2F; Artifact Repos &#x2F; CI&#x2F;CD 平台 &#x2F; Security …. Etc.</li></ul><p>其實很多企業，對於怎麼定義 SRE or DevOps 是沒有想法的，或者是有自己的解讀 … 所以討論這樣的題目時，通常我都會先反問對方的期待與認知，確認彼此 <code>On the same page</code>.</p><p>實務上，少於 500 人的企業，這兩個角色 (DevOps &#x2F; SRE) 對老闆來講，是沒差的；大於 500 人的企業，這兩個角色對老闆來講，還是沒差。。。</p><p>所以有時候工作上，不要太糾結自己的範圍，而是要思考，現在處在的環境，自己要怎麼做才會有貢獻 (亮點)。</p><p>換個角度想：</p><blockquote><p>你花了 5 萬塊，一個月請一個人，希望得到什麼？</p></blockquote><p>聽起來像是幹話，但很現實，因為勞雇就是一種買賣。</p><h2 id="Q2-SRE-工程師，需要具備的基礎技能有哪些？"><a href="#Q2-SRE-工程師，需要具備的基礎技能有哪些？" class="headerlink" title="Q2. SRE 工程師，需要具備的基礎技能有哪些？"></a>Q2. SRE 工程師，需要具備的基礎技能有哪些？</h2><p>依照 SRE 原文的定義，我認為的 SRE 本質是：</p><blockquote><p>用軟體工程，解決維運任務</p></blockquote><p>這句話我這樣拆解：</p><ul><li><code>專業職能</code>：軟體工程，包含程式設計&amp;開發&amp;測試 &#x2F; 系統工程＆架構<ul><li>軟體工程就是作出可以 Reusable &#x2F; Scalable 的東西，可以從 1 變成 10 的概念</li></ul></li><li><code>領域知識</code>：系統維運，包含異常處理, 事件管理, 自動化工程 … 很多，可以參閱我以前整理的 <a href="/2018/03/29/About/2018-Serverless-All-Star/">R&amp;R 分布圖</a></li></ul><p>專業技能：</p><ul><li><code>Programming</code>: Python&#x2F;Golang, Web, RDB, Cache, Queue.</li><li><code>Networking</code>: Protocol (TCP &#x2F; UDP &#x2F; HTTP &#x2F; DNS &#x2F; BGP  …), Network Devices (Switch &#x2F; Router &#x2F; AP … etc)</li><li><code>System</code>: Public Cloud, OS (Linux, OS), Storage</li><li>Observability &amp; Monitoring</li></ul><p>專業技能很粗略地寫，因為這些內容的技術過幾年就會翻一輪，實務上用人不會找 100% 符合的 (也找不到)，更多是找基礎好、可以栽培、個性積極的，當然要解釋成成本考量也是可以的。</p><p>相關用人的邏輯，可以參閱 <a href="/2018/09/18/Management/Hiring-Step2-Interview-Skills/">人力招募 - 二、見面談：招募第一關 面試</a></p><h2 id="Q3-在建置-SRE-團隊中，過程有遇到哪些痛點？"><a href="#Q3-在建置-SRE-團隊中，過程有遇到哪些痛點？" class="headerlink" title="Q3. 在建置 SRE 團隊中，過程有遇到哪些痛點？"></a>Q3. 在建置 SRE 團隊中，過程有遇到哪些痛點？</h2><p>所謂「痛點」要看用什麼角度來看，其中「政治問題」是避免不了的。</p><p>大多在業務上站上位置的角色，都是強勢的一方，也就是上位。這在任何企業都一樣，不管什麼產業都一樣，因為企業本質就是賺錢，開源單位講話大聲，成本單位大多能做的是滿足他們，這樣的供需關係，在很多企業裡都差不多，能改變關係的是少數。</p><p>所以大部分的現象 (不是問題) 都是組織結構上任務與資源不對等，更多的是 R&amp;R 不分，執行任務過程勞心、勞力、傷神又傷心，衍生的感覺就是「痛點」。(上述現象，把 SRE 換成 QA 一樣適用)</p><p>用人與人才培養也是問題，但是不能算是痛點，這方面需要耐心與信心，創造機會與耐心教導，還是可以做得好。</p><p>再來是怎麼讓 Feature Team 與 Infra &#x2F; SRE Team 能夠有效協作的「共識」，也就是制度。當遇到一件事情的時候，該怎麼區分這件事情的 ownership？官大說了算？該怎麼理性溝通？例如線上炸鍋，炸鍋解決了，因為系統資源不足，所以 Responsiblity 就是在 SRE &#x2F; Infra？大多是，實務上很多就是「政治」角力，讓這件事情正確的 R&amp;R 歪掉。</p><p>這個案例，大概是實務上的痛點，因為資源不足，更多時候是程式改善可以解決，但有時候「用錢能解決的問題不是問題」，就蓋過真正的問題了，那個問題幾年後通常會再爆出來，但已經沒人知道為什麼了 (省略一本書的故事 ….</p><p>可能的解法：建立一個可以跟 Feature Team 協作的制度，概念類似 AWS 的 Shared Responsibility。但建立這個「雙方」的智度，要有「自己」的制度，讓自己的制度動起來，站穩腳步。然後再去跟 Feature team 討論雙方的制度。大概的概念可以參閱我在 <a href="/2022/05/10/About/2022-SREConf2022/">SRE Conf 2022 分享</a> 的 P58.</p><h2 id="Q4-過去是怎麼進行內部-SRE-人才培訓？"><a href="#Q4-過去是怎麼進行內部-SRE-人才培訓？" class="headerlink" title="Q4. 過去是怎麼進行內部 SRE 人才培訓？"></a>Q4. 過去是怎麼進行內部 SRE 人才培訓？</h2><p>針對傳統 OP (管系統, 管設備, 不寫 Code) 的訓練，務實面的方式以及過程摘要如下：</p><ol><li>手把手教，以 Python &#x2F; Cloud 為主，像是 Python runs on Lambda (AWS)，Export as API。<ul><li>從他們本來就熟悉的領域切入，不要弄太難或者太多觀念 (ex: OOP, Framework)，重心擺在領域問題能用簡單的 Code &amp; Cloud 解決</li><li>從簡單的日常維運開始，像是備份、檢查 DNS &#x2F; SSL 過期 &#x2F; Health Check，可以玩 Cloud + Programming，不會太難，又有成就感。</li></ul></li><li>訓練開發 API 封裝 Public Cloud &#x2F; SaaS 的功能，提供給 CI &#x2F; CD 整合時、維運時使用<ul><li>減少 Feature Team 接觸 Cloud 的面積，因為大部分的 Public Cloud 的功能只能用到 20%，很容易讓人有選擇困難，透過 API 封裝，簡化 Feature team 的使用難度，又可以讓 SRE 設計 API &#x2F; Coding，雙贏。</li><li>更多參閱 <a href="/2022/05/10/About/2022-SREConf2022/">SRE Conf 2022 分享</a> 的 P47.</li></ul></li><li>資深一點的：透過 GitOps 的方法，設計較複雜的架構，像是非同步排程任務，只要 commit 就可以發動任務.<ul><li>這是長期策略，也就是未來雙方協作都是透過 GitOps 驅動</li><li>Policy as Code 的第一步。</li><li>看到 Code 一翻兩瞪眼，雙方容易聚焦，減少爭議</li></ul></li><li>訓練處理異常：從異常中學習架構是怎麼一回事，系統是怎麼運作的<ul><li>一個 Request 第一次跟第二次 Latency 不一樣，這是怎麼一回事？</li><li>就像醫生看到症狀，就可以大概知道問題在哪。但前提是醫生是了解人體結構與運作原理的，SRE 了解架構，才有辦法隔空抓藥。</li></ul></li></ol><p>管理角度，可以參閱我寫的 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tWjKzm9BnagRqknGrnXfzA2DbqTCq1xCcFTdZjvRtkA2pu1rLSbpvfsYGFAe9Mtdl">人才發展策略地圖 (草稿)</a>，這份草稿不止 SRE，只要是軟體開發團隊都適用。</p><h2 id="Q5-在-SRE-人才的培育上，應該要上哪些課程？"><a href="#Q5-在-SRE-人才的培育上，應該要上哪些課程？" class="headerlink" title="Q5. 在 SRE 人才的培育上，應該要上哪些課程？"></a>Q5. 在 SRE 人才的培育上，應該要上哪些課程？</h2><p>如果我有機會規劃學程，快速摘要一些想法，不見得可行，但是要先有一版出來 (先有再求好)。</p><p>3 + 3 代表三學分，兩個學期，如果是專職課程，3 &#x3D; 6 個月</p><ul><li>API 開發 (3 + 3): Python &#x2F; Golang, Cache, Queue, OpenAPI</li><li>網路基礎 (3 + 3)</li><li>軟體交付實務 (3 + 3)</li><li>監控 實務 (3 + 3)</li><li>架構 (3 + 3 + 3): Public Cloud &#x2F; K8s</li><li>分散式系統 (3 + 3): 可以參閱最近 <a href="https://sre.google/classroom/imageserver/?fbclid=IwAR1ncyFGKq7Kv3EVLl3REJun5xMp29Wntan3ZaqPRuC2xmei2hQ_hAKmAuY">Google 出的課程</a></li></ul><p>CS 有以下:</p><ul><li>OS &#x2F; Compute Architecture</li><li>Networking</li><li>Database</li><li>Programming (3+3) &#x2F; Data structure &#x2F; Algorithm</li></ul><p>是否一定要 CS (計算機科學 &#x2F; 資工 &#x2F; 資管) 背景？我個人希望要有，最好是數學相關背景的。當然，這是我個人的偏好而已。我也用過不是這樣背景，但表現也非常優秀的人。</p><hr><h2 id="聽歌"><a href="#聽歌" class="headerlink" title="聽歌"></a>聽歌</h2><p>聽著 <a href="https://www.youtube.com/watch?v=qna0SwJtoU4&list=RDEM0c_-4xca83hAcgJgn1Y86g&index=4">李玟 (Coco)</a> 的精選，寫文章。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="站內文章"><a href="#站內文章" class="headerlink" title="站內文章"></a>站內文章</h2><ul><li><a href="/2023/07/17/About/2023-SRE-Practice-and-IDP/">個人著作《SRE 實踐與開發平台指南》</a> (2023&#x2F;08 上市)</li><li>推薦：<a href="/2018/08/03/DevOps/An-Introduction-to-SRE/">Site Reliability Engineering (SRE, 網站可靠性工程)</a></li><li>演講：<a href="/2022/05/10/About/2022-SREConf2022/">SRE Conference 2022 - 91APP 在 AWS 上的 SRE 實踐之路</a></li><li>演講：<a href="/2018/03/29/About/2018-Serverless-All-Star/">Serverless All-Star - Ops as Code using Serverless</a></li><li>演講：<a href="/2017/06/21/AWS/Stategies-System-Monitor_and_CloudWatch/">淺談系統監控與 CloudWatch 的應用</a></li><li>演講：<a href="/2018/05/26/About/201805-Monitoring-Tools-CloudWatch/">Monitoring Tools 大亂鬥 - AWS CloudWatch</a></li><li><a href="/2018/01/07/DevOps/Emergency-Response/">緊急應變 (Emergency Response)</a></li></ul><h2 id="其它參考"><a href="#其它參考" class="headerlink" title="其它參考"></a>其它參考</h2><ul><li><a href="https://sre.google/classroom/imageserver/?fbclid=IwAR1ncyFGKq7Kv3EVLl3REJun5xMp29Wntan3ZaqPRuC2xmei2hQ_hAKmAuY">SRE Classroom: Distributed ImageServer</a></li><li><a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tWjKzm9BnagRqknGrnXfzA2DbqTCq1xCcFTdZjvRtkA2pu1rLSbpvfsYGFAe9Mtdl">人才發展策略</a> (draft, 2022&#x2F;10&#x2F;26)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理一段關於 SRE 問題的訪談紀錄，歡迎大家提供不一樣的經驗與想法。&lt;/p&gt;</summary>
    
    
    
    <category term="DevOps" scheme="https://rickhw.github.io/categories/DevOps/"/>
    
    <category term="SRE" scheme="https://rickhw.github.io/categories/DevOps/SRE/"/>
    
    
    <category term="SRE" scheme="https://rickhw.github.io/tags/SRE/"/>
    
    <category term="Emergency Response" scheme="https://rickhw.github.io/tags/Emergency-Response/"/>
    
    <category term="Incident Management" scheme="https://rickhw.github.io/tags/Incident-Management/"/>
    
    <category term="Monitoring" scheme="https://rickhw.github.io/tags/Monitoring/"/>
    
    <category term="Software Engineering" scheme="https://rickhw.github.io/tags/Software-Engineering/"/>
    
  </entry>
  
  <entry>
    <title>API 設計 - API 整合矩陣</title>
    <link href="https://rickhw.github.io/2023/07/02/DistributedSystems/API-First_Integration-Matrix/"/>
    <id>https://rickhw.github.io/2023/07/02/DistributedSystems/API-First_Integration-Matrix/</id>
    <published>2023-07-02T05:30:00.000Z</published>
    <updated>2023-07-13T13:29:53.183Z</updated>
    
    <content type="html"><![CDATA[<p>API 存在的目的，最早期是程式邏輯可以重複使用，例如 時間相關的工具，透過標準的介面定義，以及模組化的概念，每個人在開發應用程式的時候，都可以引用同一個函示庫，透過標準介面就可以調用。像是 Java 語言的 <code>java.util.Date</code> 這樣的標準介面，所以 API 的概念就出現了。</p><span id="more"></span><p>後來程式跟程式之間也要相互調用，像是 Java 要使用 linux ls 的資料，所以產生了 <code>Inter-Process Communication (IPC)</code>，讓 Process 跟 Process 之間可以相互調用。</p><p>但這都還是在同一個作業系統裡面，分散式系統的出現，開始出現 RPC (Remote Procedure Call)，讓跨系統之間可以相互調用，做出更複雜的功能。</p><p>類似的概念，到了 Web &#x2F; HTTP 出現之後，SOA 概念興起，跨服務之間的溝通，就變得更重要了，API 的概念又被更放大了。</p><h2 id="什麼是-API？"><a href="#什麼是-API？" class="headerlink" title="什麼是 API？"></a>什麼是 API？</h2><p><code>API (Application Programming Interface)</code> 指的是讓 <code>兩個以上</code> 的 <code>異質系統</code>，相互調用彼此功能的可程式化介面。例如：</p><blockquote><p>在 Windows (作業系統) 上有一個 行事曆 (Desktop 應用程式)，他需要取得 Windows 本身提供的時間資訊，所以調用 <code>Windows.Date()</code> 取得現在的時間。</p></blockquote><p>這個例子，Windows 和 行事曆 兩者就是異質系統，而 Windows 提供的 <code>Windows.Date()</code> 就是個 API 介面，通常這種稱為 Syscall。</p><p>API 泛指各種可以相互調用的介面，包含以下：</p><ul><li><code>Libraries</code>: 各種 C 的 .h、Java &#x2F; C# Code 的 Interface 都算是<ul><li>同一個程式語言之間，使用彼此功能的介面</li></ul></li><li><code>RPC</code>: Remote Procedure Call 遠程調用介面，技術觀點就是跨語言 &#x2F; 跨系統之間的調用，垂直整合 (系統與程式)、水平整合 (系統與系統)<ul><li><code>Web</code>: 基於 HTTP 協議的介面，也是本文的主角，屬於水平整合的 <code>系統與系統</code> 溝通</li><li><code>SSH</code>: 透過 SSH 下的 remote call</li></ul></li></ul><h2 id="API-Integration-Matrix"><a href="#API-Integration-Matrix" class="headerlink" title="API Integration Matrix"></a>API Integration Matrix</h2><p>常見的 API 整合方式，以 <code>提供者與使用者</code> 的角度，API 形式則用 <code>系統與程式</code> 區分，定義這兩者如下：</p><ul><li><code>Pub/Sub</code>：API 有 <code>提供者 (Publisher)</code> 也有 <code>使用者 (Subscriber)</code>，負責整合兩者稱為 API Platform，是個管理角色。</li><li><code>系統</code>：只作業系統、或者 Web Services</li><li><code>程式</code>：應用程式，像是 Desktop、開一個 Port 走 TCP &#x2F; UDP 的應用<ul><li>應用程式之間大多透過 <code>Inter-Process Communication (IPC)</code> 交互通訊，更多參閱 <a href="/2021/01/03/Linux/Shell-and-Bash-Concepts/">Shell and Bash Concepts</a></li></ul></li></ul><p>依照這樣的定義，整理出以下的整合矩陣：</p><p><img src="/images/DistributedSystems/API-Product-Plan-Design-Overview/API-Integration-Matrix_v20230701.png"></p><p>這四個象限分別說明如下：</p><ul><li>A: 指的是系統發布 API ，提供給程式使用<ul><li>例如：Linux 提供 Syscall 給應用程式 ls 使用。</li></ul></li><li>B: 程式跟程式之間相互調用使用，例如：<ul><li>使用 Springboot 開發 Web 應用，Springboot 是一個框架，開發者寫出自己的邏輯，背後調用框架的 API.</li><li>這裡指的程式是同一種語言，如果是不同語言，那屬於 D 象限。</li></ul></li><li>C: 與 A 相反，程式語言提供介面給系統使用，例如：<ul><li>微軟瀏覽器 Edge 的常駐程式，當需要更新版本的時候，提供介面讓 macOS 調用，並通知使用者有新版本更新</li></ul></li><li>D: 系統對系統，像是：<ul><li>Web Service 彼此之間 API 的調用</li><li>Linux 之間的溝通與調用 RPC，也是這個範圍</li><li>如果是跨作業系統溝通，例如 Linux 調用 Windows，這年代大多會封裝成 Web API 的方式調用，例如 AWS 的 microVM - <a href="https://github.com/firecracker-microvm/firecracker">FireCracker</a> 預設就有 WebAPI 可以使用</li></ul></li></ul><p>因為分散式系統的大爆炸，所以 D 象限大爆炸，特別是基於 Web &#x2F; HTTP 的 API，所以現在口語上說 API 的時候，很多時候都是泛指 Web API，特別是 RESTful API，當然也會包含其他像是 gRPC &#x2F; GraphQL 等不同的實踐技術。</p><p>實際上 D 範圍包含 A &#x2F; C &#x2F; B 三大塊，也就是為了達到 D 的目的，開發工作會橫跨另外三個。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="站內相關文章"><a href="#站內相關文章" class="headerlink" title="站內相關文章"></a>站內相關文章</h2><ul><li><a href="/2023/06/24/DistributedSystems/API-Communication-Protocol/">API 設計 - 摘要 API 通訊模式與協議</a></li><li><a href="/2023/07/02/DistributedSystems/API-Integration-Matrix/">API 設計 - API 整合矩陣</a></li><li><a href="/2018/01/24/DistributedSystems/Overview-API-Gateway/">Overview API Gateway</a></li><li><a href="/2021/05/14/DistributedSystems/Service-Governance/">聊聊分散式架構的服務治理</a></li><li><a href="/2022/07/04/DistributedSystems/Inspired-Design-From-Eclipse/">摘要 Eclipse 設計的啟發：當代 SaaS 分散式架構的關鍵設計</a></li><li><a href="/2021/01/03/Linux/Shell-and-Bash-Concepts/">Shell and Bash Concepts</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://dineshchandgr.medium.com/api-things-every-software-engineer-must-know-api-integration-economy-protocols-endpoint-4649ecbc7c41">API things every Software Engineer must know — API Integration, Economy, Protocols, Endpoint, Security…</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;API 存在的目的，最早期是程式邏輯可以重複使用，例如 時間相關的工具，透過標準的介面定義，以及模組化的概念，每個人在開發應用程式的時候，都可以引用同一個函示庫，透過標準介面就可以調用。像是 Java 語言的 &lt;code&gt;java.util.Date&lt;/code&gt; 這樣的標準介面，所以 API 的概念就出現了。&lt;/p&gt;</summary>
    
    
    
    <category term="Distributed Systems" scheme="https://rickhw.github.io/categories/Distributed-Systems/"/>
    
    
    <category term="Distributed Systems" scheme="https://rickhw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Distributed Communication" scheme="https://rickhw.github.io/tags/Distributed-Communication/"/>
    
    <category term="API Platform" scheme="https://rickhw.github.io/tags/API-Platform/"/>
    
    <category term="API First" scheme="https://rickhw.github.io/tags/API-First/"/>
    
    <category term="Contract First" scheme="https://rickhw.github.io/tags/Contract-First/"/>
    
    <category term="API Governance" scheme="https://rickhw.github.io/tags/API-Governance/"/>
    
    <category term="API Management" scheme="https://rickhw.github.io/tags/API-Management/"/>
    
    <category term="API Styles" scheme="https://rickhw.github.io/tags/API-Styles/"/>
    
    <category term="API Protocol" scheme="https://rickhw.github.io/tags/API-Protocol/"/>
    
  </entry>
  
  <entry>
    <title>API 設計 - 摘要 API 通訊模式與協議</title>
    <link href="https://rickhw.github.io/2023/06/24/DistributedSystems/API-First_Communication-Protocol/"/>
    <id>https://rickhw.github.io/2023/06/24/DistributedSystems/API-First_Communication-Protocol/</id>
    <published>2023-06-24T05:30:00.000Z</published>
    <updated>2023-07-28T09:21:41.321Z</updated>
    
    <content type="html"><![CDATA[<p><code>API First</code> 在跨企業的系統交互越來越頻繁的今天，提供有效的擴展業務的方法。過往什麼功能都要自行開發，但卻因為內部資源不足；亦或錯估新業務規模的深度與需求層次，造成投入沒有成效、或者必須不斷的加碼投入，最後才意會到，這是個獨立領域，需要獨立的專業團隊，像是 MarTech、支付、通訊 …</p><p>API First 的概念，背後是雙方在技術上彼此溝通的通訊協議，透過這層協議，雙方可以更快速的仰賴彼此的擅長的領域，進而拓展業務。最常見的就是電商與支付系統、廣告服務、電信系統、物流業、與 ChatBot &#x2F; AI … 等整合。</p><p>開放 API 是個策略性決策，背後代表著要與合作夥伴達成策略聯盟，本質上是 B2B 的商業行為；同時開放 API 也意味著內部系統需要有高度整合，提供對外統一介面與標準，讓合作夥伴在開發過程，可以有一致性的使用介面與理解。</p><p>基於這樣的前提，只要是 API 對外開放、或者是內部整合，都要面對本文要提到的問題：<code>API 通訊模式與協議</code></p><span id="more"></span><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文摘要基於 B2B 的業務模式，開放 API 時必須要規劃的對內、對外通訊模式，以及分析實務上的情境組合。</p><h2 id="通訊模式"><a href="#通訊模式" class="headerlink" title="通訊模式"></a>通訊模式</h2><p><code>通訊模式</code> 代表 API 對內、對外彼此交互的方式，整理如下圖：</p><p><img src="/images/DistributedSystems/API-Comm-Protocol/API-Comm-Mode_v20230623.png"></p><p>圖中定義的系統包含如下：</p><ol><li><code>API Platform</code>: 主要處理的是外部通訊請求，<ul><li>架構角色包含 API Gateway, API Manaement, API Operation 等部分<ul><li><code>API Gateway</code>: 職責包含 AAA, Traffic Control, Protection, Rate Limit,</li><li><code>API Management</code>: API 的 Publisher &#x2F; Subscriber, Token &amp; Key Management &#x2F; Lifecycle &#x2F; Documentation … 等，背後本質與核心議題是 <code>API Governance</code></li><li><code>API Operation</code>: 包含 Obervability &amp; Monitoring, APM, Tracing, Logging, Cache … 等架構性問題.</li></ul></li><li>整合 API Platform 對外處理合作夥伴的 API 請求, 同時轉發請求給對應的內部服務.</li><li>API Platform 本身必須滿足以下架構需求: Security, Reliablity, Performance, Operational</li></ul></li><li><code>Service X</code>: 企業內部各種 Domain Services 的泛稱，像是訂單 &#x2F; 商品 &#x2F; 庫存 … 等.<ul><li>這些服務都是內部系統，不直接對外</li><li>這些服務對於 API Platform 兒言，都屬於 Publisher，或稱 Provider (供應商)</li><li>這些服務跟服務之間的溝通，必須遵循 <code>內部通訊協議 (Internal Commucation Protocol, ICP)</code></li></ul></li><li><code>External Services</code>: 使用 API 的合作夥伴，這裡的案例是 B2B</li><li><code>Client</code>: 提供給 End User 使用的 GUI 介面形式，包含 Mobile, Desktop, Web … 等.</li></ol><p>這四個角色之間，彼此之間的溝通用不同顏色以及標示 (C2, B3, C4, C3, D4 … )，搭配 <code>情境矩陣</code> 收斂實際的範圍。</p><h2 id="情境矩陣"><a href="#情境矩陣" class="headerlink" title="情境矩陣"></a>情境矩陣</h2><p>這四個角色之間的通訊，有 16 種排列組合，整理出以下的情境矩陣：</p><p><img src="/images/DistributedSystems/API-Comm-Protocol/API-Comm-Scenario_v20230623.png"></p><p>這十六種排列組合，彼此之間都有可能會相互通訊，情境矩陣則展開了所有的可能，經過分析後，刪除不合理、不需要、不必要的排列組合 (A1, B2, C1 …)，確立我們需要關注的組合，最核心情境有以下：</p><ol><li><code>Session Base</code>: 排列組合中的 A2</li><li><code>External API</code>: 排列組合中的 B3, C4</li><li><code>Internal Commucation</code>: 排列組合中的 C3, D3, D4</li><li><code>External Invcation</code>: 排列組合中的 C2, D2</li></ol><p>有了這樣的定義與理解之後，針對每個通訊模式，就可以定義適當的 Context ，讓彼此有一致的標準溝通，包含 (但不限於) 以下：</p><ol><li>認證授權</li><li>服務治理</li><li>展開適當的架構設計</li><li>追蹤管理</li><li>API 設計方法</li><li>API 生態系的管理與治理</li><li>API 維運</li><li>… etc.</li></ol><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>下圖是網路上很有名的故事，個人覺得核心是「經營之道」：</p><p><img src="/images/DistributedSystems/API-Comm-Protocol/Biz.png"></p><p>故事摘要如下：</p><blockquote><p>第一個猶太人來到小鎮上開了個加油站，生意很旺。第二個猶太人來了，發現加油站生意很不錯，想到加油站的客戶需要吃飯，所以投資開了個餐館。第三個猶太人來了，想到來小鎮的人多了需要住宿，於是開了個飯店。第四個猶太人又發現住店的人需要生活用品，於是開了超市。第五個，第六個……來的人越來越多，吃飯住宿旅遊經商的人又需要加油，於是加油站、餐館、飯店、超市的生意相繼更旺了，逐步小鎮就成了一個經濟繁榮的小鎮，很多猶太人都富裕了。</p><p>第一個中國人來到小鎮上開了個加油站，生意很旺。第二個中國人來了，發現第一個人投資的加油站生意真令人羨慕，趕緊開了第二個加油站。第三個中國人又來了，看見前面2個同胞的加油站生意很好妒嫉得眼紅，火速開了第三個加油站。第四，第五個同胞過來都是一樣，開加油站還打折促銷……最後惡性競爭，然後紛紛倒閉，小鎮又回到原點……</p></blockquote><p>先不論故事中的反諷，但是猶太人的重點就在於經營的過程，透過整合的方式，而不是硬碰硬，透過共榮、相互依存的概念，集結成一個生態系。API 本身就是生態系中的一環，企業透過開放 API，與其他異業結合，相互協助、相互依存，形成一個生態系。</p><p>有了這個核心的模式與情境，接下來就可以討論實際上架構設計時的選擇與設計思路，以及市面上的解決方案。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="站內文章"><a href="#站內文章" class="headerlink" title="站內文章"></a>站內文章</h2><ul><li><a href="/2023/06/24/DistributedSystems/API-Communication-Protocol/">API 設計 - 摘要 API 通訊模式與協議</a></li><li><a href="/2023/07/02/DistributedSystems/API-Integration-Matrix/">API 設計 - API 整合矩陣</a></li><li><a href="/2018/01/24/DistributedSystems/Overview-API-Gateway/">Overview API Gateway</a></li><li><a href="/2021/05/14/DistributedSystems/Service-Governance/">聊聊分散式架構的服務治理</a></li><li><a href="/2022/07/04/DistributedSystems/Inspired-Design-From-Eclipse/">摘要 Eclipse 設計的啟發：當代 SaaS 分散式架構的關鍵設計</a></li><li><a href="/2021/01/03/Linux/Shell-and-Bash-Concepts/">Shell and Bash Concepts</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;API First&lt;/code&gt; 在跨企業的系統交互越來越頻繁的今天，提供有效的擴展業務的方法。過往什麼功能都要自行開發，但卻因為內部資源不足；亦或錯估新業務規模的深度與需求層次，造成投入沒有成效、或者必須不斷的加碼投入，最後才意會到，這是個獨立領域，需要獨立的專業團隊，像是 MarTech、支付、通訊 …&lt;/p&gt;
&lt;p&gt;API First 的概念，背後是雙方在技術上彼此溝通的通訊協議，透過這層協議，雙方可以更快速的仰賴彼此的擅長的領域，進而拓展業務。最常見的就是電商與支付系統、廣告服務、電信系統、物流業、與 ChatBot &amp;#x2F; AI … 等整合。&lt;/p&gt;
&lt;p&gt;開放 API 是個策略性決策，背後代表著要與合作夥伴達成策略聯盟，本質上是 B2B 的商業行為；同時開放 API 也意味著內部系統需要有高度整合，提供對外統一介面與標準，讓合作夥伴在開發過程，可以有一致性的使用介面與理解。&lt;/p&gt;
&lt;p&gt;基於這樣的前提，只要是 API 對外開放、或者是內部整合，都要面對本文要提到的問題：&lt;code&gt;API 通訊模式與協議&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Distributed Systems" scheme="https://rickhw.github.io/categories/Distributed-Systems/"/>
    
    
    <category term="API Gateway" scheme="https://rickhw.github.io/tags/API-Gateway/"/>
    
    <category term="Distributed Systems" scheme="https://rickhw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Distributed Communication" scheme="https://rickhw.github.io/tags/Distributed-Communication/"/>
    
    <category term="API Platform" scheme="https://rickhw.github.io/tags/API-Platform/"/>
    
    <category term="API First" scheme="https://rickhw.github.io/tags/API-First/"/>
    
    <category term="Contract First" scheme="https://rickhw.github.io/tags/Contract-First/"/>
    
    <category term="Communication Protocol" scheme="https://rickhw.github.io/tags/Communication-Protocol/"/>
    
    <category term="API Governance" scheme="https://rickhw.github.io/tags/API-Governance/"/>
    
  </entry>
  
  <entry>
    <title>一場失敗會議</title>
    <link href="https://rickhw.github.io/2023/06/14/Management/Failed-Meeting/"/>
    <id>https://rickhw.github.io/2023/06/14/Management/Failed-Meeting/</id>
    <published>2023-06-14T10:21:00.000Z</published>
    <updated>2023-08-01T13:49:19.778Z</updated>
    
    <content type="html"><![CDATA[<p>原文是 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid02wkn7qeuR29WFShcVFkBUmr9AfEbD96fwgjdvyZbigNjxVmy8xqti4AvFdqJebmiEl">2021&#x2F;06&#x2F;14</a> 寫下的 memo，摘錄一場失敗的會議有哪些現象，與另一篇 <a href="/2020/10/11/Management/Effective-Meetings/">一場有效的會議</a> 成對比。</p><span id="more"></span><h2 id="1-會議發起者、與會議控制的問題"><a href="#1-會議發起者、與會議控制的問題" class="headerlink" title="1. 會議發起者、與會議控制的問題"></a>1. 會議發起者、與會議控制的問題</h2><h3 id="1-1-太多人參加"><a href="#1-1-太多人參加" class="headerlink" title="1.1 太多人參加"></a>1.1 太多人參加</h3><p>很多人參加，有兩個意思：很多層級、或者同一個層級的人很多。</p><p>各種層級、角色都有，上至 CxO、VP、Director、Manager，到 Engineering Team 都有。人類的溝通，不同層級之間討論事情，大部分 (80%) 是需要翻譯的，換言之，如果沒有從基層幹起，一路往上的人，或者具備一定的人格特質，要跨那麼大維度溝通本身就是個不容易的事情，因為很常會出現這種現象：</p><blockquote><p>TCP 跟 HTTP 放在一起討論<br>討論 狗 和 熱狗 的差異</p></blockquote><p>這種現象很常出現在各種社會事件，媒體公關事件最明顯，那種抗議場合的溝通。</p><p>理想會議人數同 scrum team &lt;&#x3D; 8 人，這樣的溝通常會比較有效率，所有人對於事物的理解，才會一致。</p><p>類似的案例：</p><ol><li>宣誓大會</li><li>All-Hands Meetings、年會</li><li>部門會議</li></ol><h3 id="1-2-會議目的不清楚-這場會議目的到底是？"><a href="#1-2-會議目的不清楚-這場會議目的到底是？" class="headerlink" title="1.2 會議目的不清楚: 這場會議目的到底是？"></a>1.2 會議目的不清楚: 這場會議目的到底是？</h3><p>會議的目的通常有以下類型：</p><ol><li><code>討論</code>：因為資訊不足，希望透過討論，尋求建議，相互請教的過程。<ul><li>這種目的不要在太多人的場合討論，特別是一次跨太多部門的人一起頭論，基本上是沒意義的。因為狀況會同 1.1 的結果。</li><li>實際有效做法是主要負責的人，跟關係部門 (1:N)，每次一對一 (1:1) 的過，過程負責人發現 X &#x2F; Y 有衝突，在私下找 X &#x2F; Y 負責人做決議，最後由負責的人做總結與決策。</li><li>理想的是 <code>星狀溝通</code>，必要時才是 <code>網狀溝通</code>。</li></ul></li><li><code>找共識</code>：希望提供彙整的資訊 &#x2F; 報告，進而找到共識、做決策？</li><li><code>公告布達，產生行動</code>：已經有共識、已經做好決策，要開始執行了，主要目的是分工，資源協調</li></ol><h3 id="1-3-會議角色混亂，沒有控制"><a href="#1-3-會議角色混亂，沒有控制" class="headerlink" title="1.3 會議角色混亂，沒有控制"></a>1.3 會議角色混亂，沒有控制</h3><p>會議進行過程，沒有分工，詳細解法參閱 <a href="/2020/10/11/Management/Effective-Meetings/">一場有效的會議</a></p><h3 id="1-4-會議主軸資訊量過大"><a href="#1-4-會議主軸資訊量過大" class="headerlink" title="1.4 會議主軸資訊量過大"></a>1.4 會議主軸資訊量過大</h3><p>這是最常發生的現象，成年人在一個小時裡能夠專注的時間只有 30%，能夠理解全部資訊量的人通常是更少。</p><p>主講者把自己深思幾個月的結論，一次放出來，但沒有做適度的抽象畫整理，造成與會者瞬間看到太多資訊，無法理解，進而產生有效的討論，或者造成不同層次的討論，最常看到的是現象是：</p><blockquote><p>TCP 跟 HTTP 放在一起討論，層次根本就搞錯了。<br>討論 狗 和 熱狗 的差異</p></blockquote><p>背後的問題： <code>如何有效表達</code> ，也就是說故事、或者是具象化表達的技巧，參閱 <a href="/2020/03/24/Management/Principles-of-Communication/">溝通原理</a></p><h3 id="1-5-準備不全"><a href="#1-5-準備不全" class="headerlink" title="1.5 準備不全"></a>1.5 準備不全</h3><p>為了時程，硬上。</p><h3 id="1-6-沒有結論"><a href="#1-6-沒有結論" class="headerlink" title="1.6 沒有結論"></a>1.6 沒有結論</h3><p>花了時間，卻沒有任何產出。</p><p>也不知道接下來要做什麼？後續應該怎麼跟進？</p><hr><h2 id="2-與會者的問題"><a href="#2-與會者的問題" class="headerlink" title="2. 與會者的問題"></a>2. 與會者的問題</h2><h3 id="2-1-沒有搞清楚會議主題就進來"><a href="#2-1-沒有搞清楚會議主題就進來" class="headerlink" title="2.1 沒有搞清楚會議主題就進來"></a>2.1 沒有搞清楚會議主題就進來</h3><p>被邀請，不管哪一場都參加。這種很容易出現在社會新鮮人。</p><p>通常一場會議參與者超過 10 個以上，其實都可以考慮不要出席。除非裡面有需要獲取的情報。</p><h3 id="2-2-不恰當的提問"><a href="#2-2-不恰當的提問" class="headerlink" title="2.2 不恰當的提問"></a>2.2 不恰當的提問</h3><ul><li>用封閉問題 (現場 &#x2F; 細節) 打 開放問題 (概念 &#x2F; 抽象)</li><li>或者反過來，用開放問題，對封閉問題</li><li>開放問題：這東西的定義是什麼？</li><li>封閉問題：這東西是不是什麼什麼？</li><li>問跟會議主軸無關的問題</li></ul><h3 id="2-3-沒有參與討論"><a href="#2-3-沒有參與討論" class="headerlink" title="2.3 沒有參與討論"></a>2.3 沒有參與討論</h3><p>Steve Jobs 在自傳中提到，會議的目的就是要參與討論，在會議中沒有參與討論、沒有發言，Steve Jobs 會請他出去。反之，當收到會議邀請時，如果這場會議主題跟自己沒關係，是不用免強參與的。</p><blockquote><p>沒有參與討論，另外一個潛在問題是：「企業有沒有營造一個讓員工願意發言的環境」，更深層的意涵是：「管理團對有沒有營造一個安全的發言空間？」</p></blockquote><h3 id="2-4-會前沒有先閱讀資料"><a href="#2-4-會前沒有先閱讀資料" class="headerlink" title="2.4 會前沒有先閱讀資料"></a>2.4 會前沒有先閱讀資料</h3><p>有些資訊，在會前就會送出來，節省大家開會的時間。所以當參與者沒有在會前先閱讀的時候，到會議詢問已經提供的資訊，就會變成很浪費時間。</p><h3 id="2-5-提過去問過，有結論的問題"><a href="#2-5-提過去問過，有結論的問題" class="headerlink" title="2.5 提過去問過，有結論的問題"></a>2.5 提過去問過，有結論的問題</h3><p>提出這問題的人，只要是高層，很有機會就會翻盤整個計畫。</p><p>有時候是高層的問題，要適度提醒；但有時候也是與會者自己的問題。</p><h3 id="2-6-中斷：沒有聽完就想講自己的想法"><a href="#2-6-中斷：沒有聽完就想講自己的想法" class="headerlink" title="2.6 中斷：沒有聽完就想講自己的想法"></a>2.6 中斷：沒有聽完就想講自己的想法</h3><p>很容易發生上對下的情境，上面的人 (通常是直屬主管) 很有想法 &#x2F; 經驗，但負責執行的人準備很久，還沒說完就被上面的人中斷，然後作結論。這種狀況，不見得都是主管的錯，但有的時候這樣的方式，會讓底下的人很受傷，甚至會對於跟主管溝通起了反感。這種上位者（管理、主管）都是造成團隊運作效率低效、團隊成員最後不敢做決策的主因。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="會議系列文"><a href="#會議系列文" class="headerlink" title="會議系列文"></a>會議系列文</h2><ol><li><a href="/2020/10/11/Management/Effective-Meetings/">一場有效的會議</a></li><li><a href="/2014/11/26/Management/%E9%96%8B%E6%9C%83%E5%8E%9F%E5%89%87/">開會原則</a></li><li><a href="/2019/08/25/Management/Problems-of-Meeting/">會議的普遍現象</a></li><li><a href="/2020/10/11/Management/Effective-Meetings/">一場有效的會議</a></li><li><a href="/2020/08/01/Management/Expression-and-Communication/">表達與溝通的差異</a></li><li><a href="/2020/03/24/Management/Principles-of-Communication/">溝通的原理</a></li></ol><h2 id="溝通"><a href="#溝通" class="headerlink" title="溝通"></a>溝通</h2><ul><li><a href="/2020/03/24/Management/Principles-of-Communication/">溝通的原理</a></li><li><a href="/2020/08/01/Management/Expression-and-Communication/">表達與溝通的差異</a></li><li><a href="/2014/12/10/Management/%E6%BA%9D%E9%80%9A-%E6%88%90%E6%9C%AC/">溝通 &#x3D; 成本</a></li><li><a href="/2018/03/18/SQA/How-To-Report-A-Defect-or-Bug/">如何有效的回報問題</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;原文是 &lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/pfbid02wkn7qeuR29WFShcVFkBUmr9AfEbD96fwgjdvyZbigNjxVmy8xqti4AvFdqJebmiEl&quot;&gt;2021&amp;#x2F;06&amp;#x2F;14&lt;/a&gt; 寫下的 memo，摘錄一場失敗的會議有哪些現象，與另一篇 &lt;a href=&quot;/2020/10/11/Management/Effective-Meetings/&quot;&gt;一場有效的會議&lt;/a&gt; 成對比。&lt;/p&gt;</summary>
    
    
    
    <category term="經營管理" scheme="https://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="溝通" scheme="https://rickhw.github.io/tags/%E6%BA%9D%E9%80%9A/"/>
    
    <category term="Bus Memo" scheme="https://rickhw.github.io/tags/Bus-Memo/"/>
    
    <category term="Meetings" scheme="https://rickhw.github.io/tags/Meetings/"/>
    
    <category term="主管" scheme="https://rickhw.github.io/tags/%E4%B8%BB%E7%AE%A1/"/>
    
    <category term="時間管理" scheme="https://rickhw.github.io/tags/%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86/"/>
    
    <category term="會議原則" scheme="https://rickhw.github.io/tags/%E6%9C%83%E8%AD%B0%E5%8E%9F%E5%89%87/"/>
    
    <category term="會議效率" scheme="https://rickhw.github.io/tags/%E6%9C%83%E8%AD%B0%E6%95%88%E7%8E%87/"/>
    
    <category term="溝通成本" scheme="https://rickhw.github.io/tags/%E6%BA%9D%E9%80%9A%E6%88%90%E6%9C%AC/"/>
    
    <category term="工作管理" scheme="https://rickhw.github.io/tags/%E5%B7%A5%E4%BD%9C%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>新書上市 - 共同著作《軟體測試實務 I、II》</title>
    <link href="https://rickhw.github.io/2023/05/23/About/2023-Software-Test-Practice/"/>
    <id>https://rickhw.github.io/2023/05/23/About/2023-Software-Test-Practice/</id>
    <published>2023-05-23T13:42:30.000Z</published>
    <updated>2023-07-23T10:28:11.300Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年初的時候，經過朋友的介紹認識成大資工系 <a href="https://researchoutput.ncku.edu.tw/zh/persons/shin-jie-lee">李信杰 教授</a>，因此才有了這本書的誕生。</p><p>李老師對軟體工程非常有熱情，特別是軟體測試領域，是全球最熱門開源測試軟體 Selenium IDE V3、Katalon Recorder 與 Qualys Recorder 原型創造者。</p><p><img src="/images/About/2023-swtesting/MP22255-3d.png"></p><span id="more"></span><h2 id="寫作的背後"><a href="#寫作的背後" class="headerlink" title="寫作的背後"></a>寫作的背後</h2><p>2022 年暑假，在老師的熱情邀 (ㄊㄨㄟ) 約 (ㄎㄥ) 之下，讓我有機會分享一場心路歷程：<a href="/2022/08/13/SQA/Path-to-Software-Testing/">從理想、到現實的距離，開啟品味軟體測試之路</a>，重新燃起對於軟體測試與品質的想法，然後也著手寫下多年積累的想法。</p><p>在這個過程中，同步進行的就是本文的主角，也就是《軟體測試實務》的共同著作，老師從收文、討論、到收稿、校稿、一校、二校、三校，定稿，確認出版。一路走來，跟著業界的前輩們一起努力，大家一條心，期望分享做寶貴的心得與經驗！</p><p>經過約半年的寫作，以及大約四個月的協作，終於確立出版，因為文章篇幅很多，所以分成一、二兩冊 (未來還會有三、四？)，過程中我邀請前同事，優秀的現任測試主管 - 師孝一起參與寫作，同時也貢獻了 Blog 上一些文章的內容 (後面羅列)，也把以前曾經想寫，但一直沒 (ㄊㄡ) 空 (ㄌㄢˇ) 寫的，完整的寫出來。</p><p>除了我自己的心得與想法，書本還有其他各大知名企業的團隊，大家貢獻的心得與經驗，希望大家的想法與經驗，可以為業界軟體帶來新的動能與不同的觀點。</p><h2 id="新書發表會的分享-updated-20230618"><a href="#新書發表會的分享-updated-20230618" class="headerlink" title="新書發表會的分享 (updated: 20230618)"></a>新書發表會的分享 (updated: 20230618)</h2><p>分享錄影：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/tk_yAHkFlkU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>分享簡報：</p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/GRNOyyqJJt3YGg?hostedIn=slideshare&page=upload" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe><p>活動照片</p><p><img src="/images/About/2023-swtesting/LINE_ALBUM_230619_0.jpg"></p><p><img src="/images/About/2023-swtesting/LINE_ALBUM_230619_85.jpg"></p><p><img src="/images/About/2023-swtesting/LINE_ALBUM_230619_116.jpg"></p><h2 id="Rick-貢獻的內容與站內相關文章"><a href="#Rick-貢獻的內容與站內相關文章" class="headerlink" title="Rick 貢獻的內容與站內相關文章"></a>Rick 貢獻的內容與站內相關文章</h2><ul><li>第一冊 CH01 軟體測試工程師的職涯手冊<ul><li><a href="/2015/10/11/SQA/How-To-Be-An-SQA/">Software QA 的職能條件</a></li><li><a href="/2015/08/20/SQA/Three-Kinds-Of-QA/">三種 QA (Quality Assurance)</a></li><li><a href="/2019/10/30/SQA/Problems-In-Software-Testing/">關於軟體測試，一些觀察到的現象</a></li></ul></li><li>第一冊 CH05 從零開始，軟體測試團隊建立實戰<ul><li><a href="/2022/09/18/SQA/Integration-Test-and-Execution-Strategy/">整合測試與執行策略</a></li><li><a href="/2018/03/18/SQA/Gossip-System-Testing/">輕鬆聊：系統測試 (SVT) 的三兩事</a></li><li><a href="/2017/03/18/SQA/Stages-In-Software-Testing/">淺談軟體測試的階段與策略</a></li></ul></li><li>第二冊 CH01 Web Service系統容量量測的實務方法論<ul><li><a href="/2019/09/20/SQA/How-to-Measure-System-Capacity/">如何量測系統的容量？（壓測）</a></li></ul></li></ul><h2 id="相關資訊-amp-購買通路"><a href="#相關資訊-amp-購買通路" class="headerlink" title="相關資訊 &amp; 購買通路"></a>相關資訊 &amp; 購買通路</h2><ul><li><a href="https://sites.google.com/view/swtesting">書本官方網站</a></li><li>天瓏書局連結<ul><li><a href="https://www.tenlong.com.tw/products/9786263334854">軟體測試實務 : 業界成功案例與高效實踐 [ I ]</a></li><li><a href="https://www.tenlong.com.tw/products/9786263334861">軟體測試實務 : 業界成功案例與高效實踐 [ II ]</a></li></ul></li><li>電子書<ul><li>博客來：<a href="https://lnkd.in/gKXJMh6d">第一冊</a>、<a href="https://lnkd.in/gK2yTPTW">第二冊</a></li><li>讀墨：<a href="https://lnkd.in/gs24AQRz">第一冊</a>、<a href="https://lnkd.in/gE8W8Tfw">第二冊</a></li><li>金石堂：<a href="https://lnkd.in/gpxT3BMx">第一冊</a>、<a href="https://lnkd.in/g7tH5pWF">第二冊</a></li><li>Kobo：<a href="https://lnkd.in/gVQWH7Mb">第一冊</a>、<a href="https://lnkd.in/gWSNQJCC">第二冊</a></li><li>Pubu：<a href="https://lnkd.in/gBwRgCZk">第一冊</a>、<a href="https://lnkd.in/g_xpuiAv">第二冊</a></li><li><a href="https://lnkd.in/gNAf62GN">Google Play</a></li></ul></li></ul><p><img src="/images/About/2023-swtesting/MP22256-3d.png"></p><p><img src="/images/About/2023-swtesting/swtesting0.png"><br><img src="/images/About/2023-swtesting/swtesting1.png"><br><img src="/images/About/2023-swtesting/swtesting2.png"></p><p><img src="/images/About/2023-swtesting/tenlong1.png"><br><img src="/images/About/2023-swtesting/tenlong2.png"></p><hr><h1 id="站內軟體測試相關文章"><a href="#站內軟體測試相關文章" class="headerlink" title="站內軟體測試相關文章"></a>站內軟體測試相關文章</h1><ul><li><a href="/2014/05/09/SQA/Problems_In-Software-Autotest/">軟體自動化測試常見的問題</a></li><li><a href="/2015/10/11/SQA/How-To-Be-An-SQA/">Software QA 的職能條件</a></li><li><a href="/2015/08/20/SQA/Three-Kinds-Of-QA/">三種 QA</a></li><li><a href="/2017/12/03/SQA/Regression-Test-Is-Tough/">從 iOS 無限黑屏事件，淺談軟體測試階段 - 回歸測試 Regression Test</a></li><li><a href="/2017/08/30/DevOps/Automation-or-Process/">自動化 XXX 的陷阱</a></li><li><a href="/2018/03/18/SQA/Gossip-System-Testing/">輕鬆聊：系統測試 (SVT) 的三兩事</a></li><li><a href="/2018/05/12/SQA/Designing-Test-Architecture-and-Framework/">Designing Test Architecture and Framework</a></li><li><a href="/2018/07/22/SQA/Performance-Test/">淺談效能測試</a></li><li><a href="/2022/08/13/SQA/Path-to-Software-Testing/">演講：從理想、到現實的距離，開啟品味軟體測試之路</a></li><li><a href="/2023/05/23/About/2023-Software-Test-Practice/">新書上市 - 共同著作《軟體測試實務 I、II》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022 年初的時候，經過朋友的介紹認識成大資工系 &lt;a href=&quot;https://researchoutput.ncku.edu.tw/zh/persons/shin-jie-lee&quot;&gt;李信杰 教授&lt;/a&gt;，因此才有了這本書的誕生。&lt;/p&gt;
&lt;p&gt;李老師對軟體工程非常有熱情，特別是軟體測試領域，是全球最熱門開源測試軟體 Selenium IDE V3、Katalon Recorder 與 Qualys Recorder 原型創造者。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/About/2023-swtesting/MP22255-3d.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="About" scheme="https://rickhw.github.io/categories/About/"/>
    
    
    <category term="Books" scheme="https://rickhw.github.io/tags/Books/"/>
    
    <category term="Software Test" scheme="https://rickhw.github.io/tags/Software-Test/"/>
    
  </entry>
  
  <entry>
    <title>K8s 學習筆記 - 在 MacBook Pro M1 安裝 K3s</title>
    <link href="https://rickhw.github.io/2023/01/17/Container/Install-K3s-on-MBPR-M1/"/>
    <id>https://rickhw.github.io/2023/01/17/Container/Install-K3s-on-MBPR-M1/</id>
    <published>2023-01-17T01:41:58.000Z</published>
    <updated>2023-03-28T05:01:50.719Z</updated>
    
    <content type="html"><![CDATA[<p>在 Macbook Pro M1 (Apple Silicon) 安裝 K3s 的筆記。</p><span id="more"></span><hr><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="K3d-vs-K3s"><a href="#K3d-vs-K3s" class="headerlink" title="K3d vs K3s"></a>K3d vs K3s</h2><p>K3d 其實是 <code>K3s in Docker</code> 的縮寫，也就是透過 docker 把 K8s 的角色跑起來，包含 api, kube-api, kube-proxy, coredns … 等。兩者的使用對象有所差異，整理如下：</p><ul><li>開發者：適合用 K3d 快速建立 cluster，測試自己的應用程式。<ul><li>如果要在 Apple Silicon 的環境使用 k8s，也可以用 k3d 就可以。</li></ul></li><li>K8s admin：適合用 K3s 設計與規劃 K8s cluster，模擬各種 cluster 的需求。</li></ul><p>K3s 的架構與原理如下圖：</p><p><img src="/images/Container/k3s/k3s-architecture-single-server.svg"></p><p>Source: <a href="https://docs.k3s.io/architecture">https://docs.k3s.io/architecture</a></p><p>類似於 dapr 的 hosted mode 與 cluster mode.</p><h2 id="Multipasss"><a href="#Multipasss" class="headerlink" title="Multipasss"></a>Multipasss</h2><p><a href="https://multipass.run/">multipass</a> 是 ubuntu 的公司出的，針對 ubuntu 在三大作業系統上可以順利運行 ubuntu vm 的工具，本身提供的 ubuntu image 也是輕量化過的。</p><h3 id="安裝-multipass"><a href="#安裝-multipass" class="headerlink" title="安裝 multipass"></a>安裝 multipass</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">❯ brew install --cask multipass</span><br><span class="line">Running `brew update --auto-update`...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 1 tap (homebrew/core).</span><br><span class="line">==&gt; New Formulae</span><br><span class="line">aptos          cargo-about    ecoji          grayskull      kwctl          podsync        twm            xorg-server</span><br><span class="line">aws-sam-cli    cargo-deny     fgbio          jbang          mpfrcx         quartz-wm      video-compare  xrdb</span><br><span class="line">bossa          cascadia       flagd          jreleaser      ocm            ruby@3.1       xinit</span><br><span class="line">bzip3          cdebug         gokey          kubent         openvino       simdutf        xmodmap</span><br><span class="line"></span><br><span class="line">You have 3 outdated formulae installed.</span><br><span class="line">You can upgrade them with brew upgrade</span><br><span class="line">or list them with brew outdated.</span><br><span class="line"></span><br><span class="line">==&gt; Tapping homebrew/cask</span><br><span class="line">Cloning into <span class="string">&#x27;/opt/homebrew/Library/Taps/homebrew/homebrew-cask&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 702522, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (57/57), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (41/41), <span class="keyword">done</span>.</span><br><span class="line">Receiving objects:  39% (273984/702522), 98.74 MiB | 3.09 MiB/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; Installing Cask multipass</span><br><span class="line">==&gt; Running installer <span class="keyword">for</span> multipass; your password may be necessary.</span><br><span class="line">Package installers may write to any location; options such as `--appdir` are ignored.</span><br><span class="line">Password:</span><br><span class="line">installer: Package name is multipass</span><br><span class="line">installer: Installing at base path /</span><br><span class="line">installer: The install was successful.</span><br><span class="line">🍺  multipass was successfully installed!</span><br></pre></td></tr></table></figure><p>基本的使用參數：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">❯ multipass version</span><br><span class="line">multipass   1.10.1+mac</span><br><span class="line">multipassd  1.10.1+mac</span><br><span class="line"></span><br><span class="line"><span class="comment">## Help</span></span><br><span class="line">❯ multipass <span class="built_in">help</span></span><br><span class="line">Usage: multipass [options] &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">Create, control and connect to Ubuntu instances.</span><br><span class="line"></span><br><span class="line">This is a <span class="built_in">command</span> line utility <span class="keyword">for</span> multipass, a</span><br><span class="line">service that manages Ubuntu instances.</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看 launch 的 help</span></span><br><span class="line">❯ multipass <span class="built_in">help</span> launch</span><br><span class="line">Usage: multipass launch [options] [[&lt;remote:&gt;]&lt;image&gt; | &lt;url&gt;]</span><br><span class="line">Create and start a new instance.</span><br><span class="line"></span><br><span class="line"><span class="comment">## 提供哪一些 Images</span></span><br><span class="line">❯ multipass find</span><br><span class="line">Image                       Aliases           Version          Description</span><br><span class="line">snapcraft:core18            18.04             20201111         Snapcraft builder <span class="keyword">for</span> Core 18</span><br><span class="line">snapcraft:core20            20.04             20210921         Snapcraft builder <span class="keyword">for</span> Core 20</span><br><span class="line">snapcraft:core22            22.04             20220426         Snapcraft builder <span class="keyword">for</span> Core 22</span><br><span class="line">18.04                       bionic            20230112         Ubuntu 18.04 LTS</span><br><span class="line">20.04                       focal             20230111         Ubuntu 20.04 LTS</span><br><span class="line">22.04                       jammy,lts         20230107         Ubuntu 22.04 LTS</span><br><span class="line">anbox-cloud-appliance                         latest           Anbox Cloud Appliance</span><br><span class="line">charm-dev                                     latest           A development and testing environment <span class="keyword">for</span> charmers</span><br><span class="line">docker                                        latest           A Docker environment with Portainer and related tools</span><br><span class="line">jellyfin                                      latest           Jellyfin is a Free Software Media System that puts you <span class="keyword">in</span> control of managing and streaming your media.</span><br><span class="line">minikube                                      latest           minikube is <span class="built_in">local</span> Kubernetes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="啟動虛擬機"><a href="#啟動虛擬機" class="headerlink" title="啟動虛擬機"></a>啟動虛擬機</h3><p>透過 multipass 啟動一個虛擬機，指定虛擬機名稱、記憶體、Disk、CPU 數量、網路模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">❯ multipass launch --name k3s-main \</span><br><span class="line">    --mem 4G --disk 20G \</span><br><span class="line">    --cpus 2</span><br><span class="line"></span><br><span class="line">Launched: k3s-main</span><br><span class="line"></span><br><span class="line">❯ multipass info k3s-main</span><br><span class="line">Name:           k3s-main</span><br><span class="line">State:          Running</span><br><span class="line">IPv4:           192.168.64.3</span><br><span class="line">Release:        Ubuntu 22.04.1 LTS</span><br><span class="line">Image <span class="built_in">hash</span>:     3100a27357a0 (Ubuntu 22.04 LTS)</span><br><span class="line">Load:           0.88 0.37 0.14</span><br><span class="line">Disk usage:     2.4G out of 19.2G</span><br><span class="line">Memory usage:   749.0M out of 3.8G</span><br><span class="line">Mounts:         --</span><br><span class="line"></span><br><span class="line">❯ <span class="built_in">mkdir</span> -p ~/Temp/K8s</span><br><span class="line"></span><br><span class="line"><span class="comment">## 掛載磁碟: Host Machine to Virtual Machine</span></span><br><span class="line">❯ multipass mount ~/Temp/K8s k3s:~/k8s</span><br><span class="line">Enabling support <span class="keyword">for</span> mounting \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 刪除虛擬機</span></span><br><span class="line">❯ multipass delete k3s-main</span><br><span class="line">❯ multipass purge</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>進去虛擬機</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">❯ multipass shell k3s-main</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看 disk 狀況</span></span><br><span class="line">ubuntu@k3s-main:~$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs           393M  864K  392M   1% /run</span><br><span class="line">/dev/vda1        20G  1.9G   18G  10% /</span><br><span class="line">tmpfs           2.0G     0  2.0G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/vda15      105M  5.3M  100M   5% /boot/efi</span><br><span class="line">tmpfs           393M  4.0K  393M   1% /run/user/1000</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看 CPU 狀況, 需要安裝 apt install cpuinfo</span></span><br><span class="line">ubuntu@k3s-main:~$ cpu-info</span><br><span class="line">Packages:</span><br><span class="line">0: Intel Core i9-9900K</span><br><span class="line">1: Intel Core i9-9900K</span><br><span class="line">Microarchitectures:</span><br><span class="line">2x Sky Lake</span><br><span class="line">Cores:</span><br><span class="line">0: 1 processor (0), Intel Sky Lake</span><br><span class="line">1: 1 processor (1), Intel Sky Lake</span><br><span class="line">Logical processors (System ID):</span><br><span class="line">0 (0): APIC ID 0x00000000</span><br><span class="line">1 (1): APIC ID 0x00000001</span><br></pre></td></tr></table></figure><p>整理幾個 multipass 運作的資訊：</p><ul><li>multipass 程序主要工作在 <code>/Library/Application Support/com.canonical.multipass</code></li><li>multipass 預設使用 <code>qemu</code> 為 Hypervisor，虛擬磁碟為 COW2 格式，網路為 Bridge 模式</li><li>虛擬機的預設路徑為：<code>/var/root/Library/Application Support/multipassd/</code> (需要 root 權限才能存取)</li><li>multipass 預設透過 luanchd 跟著作業系統啟動<ul><li>配置檔位置： <code>/Library/LaunchDaemons/com.canonical.multipassd.plist</code></li></ul></li></ul><hr><h1 id="安裝-K3s"><a href="#安裝-K3s" class="headerlink" title="安裝 K3s"></a>安裝 K3s</h1><h2 id="直接安裝"><a href="#直接安裝" class="headerlink" title="直接安裝"></a>直接安裝</h2><p>如果在 macOS 直接安裝 k3s 會出現以下訊息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ curl -sfL https://get.k3s.io | sh -</span><br><span class="line">[ERROR]  Can not find systemd or openrc to use as a process supervisor <span class="keyword">for</span> k3s</span><br></pre></td></tr></table></figure><p>不管是 Intel or Apple Silicon 都是。</p><h2 id="在-VM-裡面安裝-K3s"><a href="#在-VM-裡面安裝-K3s" class="headerlink" title="在 VM 裡面安裝 K3s"></a>在 VM 裡面安裝 K3s</h2><p>透過 multipass 裝起好一台 VM 之後，進去裡面再安裝 K3s 就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在虛擬機裡面</span></span><br><span class="line">root@k3s:~<span class="comment"># curl -sfL https://get.k3s.io | sh -</span></span><br><span class="line">[INFO]  Finding release <span class="keyword">for</span> channel stable</span><br><span class="line">[INFO]  Using v1.25.5+k3s2 as release</span><br><span class="line">[INFO]  Downloading <span class="built_in">hash</span> https://github.com/k3s-io/k3s/releases/download/v1.25.5+k3s2/sha256sum-arm64.txt</span><br><span class="line">[INFO]  Downloading binary https://github.com/k3s-io/k3s/releases/download/v1.25.5+k3s2/k3s-arm64</span><br><span class="line">[INFO]  Verifying binary download</span><br><span class="line">[INFO]  Installing k3s to /usr/local/bin/k3s</span><br><span class="line">[INFO]  Skipping installation of SELinux RPM</span><br><span class="line">[INFO]  Creating /usr/local/bin/kubectl symlink to k3s</span><br><span class="line">[INFO]  Creating /usr/local/bin/crictl symlink to k3s</span><br><span class="line">[INFO]  Creating /usr/local/bin/ctr symlink to k3s</span><br><span class="line">[INFO]  Creating killall script /usr/local/bin/k3s-killall.sh</span><br><span class="line">[INFO]  Creating uninstall script /usr/local/bin/k3s-uninstall.sh</span><br><span class="line">[INFO]  <span class="built_in">env</span>: Creating environment file /etc/systemd/system/k3s.service.env</span><br><span class="line">[INFO]  systemd: Creating service file /etc/systemd/system/k3s.service</span><br><span class="line">[INFO]  systemd: Enabling k3s unit</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/k3s.service → /etc/systemd/system/k3s.service.</span><br><span class="line">[INFO]  systemd: Starting k3se</span><br><span class="line"></span><br><span class="line"><span class="comment">## 確認 K8s 安裝的狀況</span></span><br><span class="line">ubuntu@k3s-main:~$ sudo kubectl get po,no --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                          READY   STATUS      RESTARTS   AGE</span><br><span class="line">kube-system   pod/local-path-provisioner-79f67d76f8-w946b   1/1     Running     0          8m15s</span><br><span class="line">kube-system   pod/coredns-597584b69b-9mx2w                  1/1     Running     0          8m15s</span><br><span class="line">kube-system   pod/metrics-server-5f9f776df5-p826z           1/1     Running     0          8m15s</span><br><span class="line">kube-system   pod/helm-install-traefik-crd-bq27h            0/1     Completed   0          8m15s</span><br><span class="line">kube-system   pod/helm-install-traefik-b6vb4                0/1     Completed   1          8m15s</span><br><span class="line">kube-system   pod/svclb-traefik-09095d96-v9fpk              2/2     Running     0          7m45s</span><br><span class="line">kube-system   pod/traefik-66c46d954f-r48tq                  1/1     Running     0          7m45s</span><br><span class="line"></span><br><span class="line">NAMESPACE   NAME            STATUS   ROLES                  AGE     VERSION</span><br><span class="line">            node/k3s-main   Ready    control-plane,master   8m31s   v1.25.5+k3s2</span><br><span class="line"></span><br><span class="line">ubuntu@k3s-main:~$ sudo kubectl api-resources</span><br><span class="line">NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND</span><br><span class="line">bindings                                       v1                                     <span class="literal">true</span>         Binding</span><br><span class="line">componentstatuses                 cs           v1                                     <span class="literal">false</span>        ComponentStatus</span><br><span class="line">configmaps                        cm           v1                                     <span class="literal">true</span>         ConfigMap</span><br><span class="line">endpoints                         ep           v1                                     <span class="literal">true</span>         Endpoints</span><br><span class="line">events                            ev           v1                                     <span class="literal">true</span>         Event</span><br><span class="line">... 略 ...</span><br><span class="line"></span><br><span class="line">ubuntu@k3s-main:~$ sudo kubectl get rs --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                DESIRED   CURRENT   READY   AGE</span><br><span class="line">kube-system   local-path-provisioner-79f67d76f8   1         1         1       10m</span><br><span class="line">kube-system   coredns-597584b69b                  1         1         1       10m</span><br><span class="line">kube-system   metrics-server-5f9f776df5           1         1         1       10m</span><br><span class="line">kube-system   traefik-66c46d954f                  1         1         1       10m</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在 Host Machine，取得 K8s 的 Node Token</span></span><br><span class="line">❯ multipass <span class="built_in">exec</span> k3s-main sudo <span class="built_in">cat</span> /var/lib/rancher/k3s/server/node-token</span><br><span class="line">K1082f1ce868a513c55999a7eba68ab888dc2035baf2323131466364f65bf5f0220::server:27b105f74351819669c0481da7c87baa</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在 Master Node 裏取得 KubeConfig</span></span><br><span class="line"><span class="comment">## 如果要在 Master Node 之外使用，複製檔案內容後，</span></span><br><span class="line"><span class="comment">## 記得把 server: https://127.0.0.1:6443 改成 Master Node 的 IP</span></span><br><span class="line"><span class="built_in">cat</span> /etc/rancher/k3s/k3s.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="新增-Worker-Node"><a href="#新增-Worker-Node" class="headerlink" title="新增 Worker Node"></a>新增 Worker Node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">multipass launch --name k3s-worker1 --mem 2G --disk 20G</span><br><span class="line">multipass launch --name k3s-worker2 --mem 2G --disk 20G</span><br><span class="line"></span><br><span class="line">multipass shell k3s-worker1</span><br><span class="line">multipass shell k3s-worker2</span><br><span class="line"></span><br><span class="line"><span class="comment">## 進去 VM 裡</span></span><br><span class="line">curl -sfL https://get.k3s.io | K3S_URL=https://192.168.64.3:6443 K3S_TOKEN=<span class="string">&quot;K102a46f234cf614bd49a50092389d8e03fed00618846936782fbdae904c32ee9d5::server:5fc3190151a2de0126199cc6fbd94acf&quot;</span> sh -</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在 Master Node</span></span><br><span class="line">ubuntu@k3s-main:~$ sudo kubectl get no</span><br><span class="line">NAME          STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k3s-main      Ready    control-plane,master   65m   v1.25.5+k3s2</span><br><span class="line">k3s-worker1   Ready    &lt;none&gt;                 75s   v1.25.5+k3s2</span><br><span class="line">k3s-worker2   Ready    &lt;none&gt;                 2s    v1.25.5+k3s2</span><br></pre></td></tr></table></figure><h2 id="移除-Worker-Node"><a href="#移除-Worker-Node" class="headerlink" title="移除 Worker Node"></a>移除 Worker Node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain k3s-worker --delete-emptydir-data --force --ignore-daemonsets</span><br><span class="line"></span><br><span class="line">root@k3s:~<span class="comment"># kubectl delete node k3s-worker</span></span><br><span class="line">node <span class="string">&quot;k3s-worker&quot;</span> deleted</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h1><p>底下都在 k3s-master node 裡面執行。</p><p>建立測試網頁: <code>index.html</code>，內容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把這個 HTML 設定成 configmap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ kubectl create configmap hello-world --from-file index.html</span><br></pre></td></tr></table></figure><p>建立 K8s YAML:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;traefik&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">hello-world</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-world</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-world</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-world-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-world-volume</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">hello-world</span></span><br></pre></td></tr></table></figure><p>執行這段 YAML </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~$ kubectl apply -f hello-world.yml</span><br><span class="line">~$ kubectl get po</span><br><span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-world-nginx-5876d86d96-k2mm6   1/1     Running   0          4m25s</span><br><span class="line">hello-world-nginx-5876d86d96-krsrh   1/1     Running   0          4m25s</span><br><span class="line">hello-world-nginx-5876d86d96-wq9hf   1/1     Running   0          4m25s</span><br></pre></td></tr></table></figure><p>測試：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~$ curl localhost:80</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">  &lt;title&gt;Hello World!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;Hello World!&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><h2 id="Q-可以把-master-和-worker-node-裝在同一台-VM"><a href="#Q-可以把-master-和-worker-node-裝在同一台-VM" class="headerlink" title="Q: 可以把 master 和 worker node 裝在同一台 VM?"></a>Q: 可以把 master 和 worker node 裝在同一台 VM?</h2><p>不可以，Port 會出現衝突，要裝在同一台 VM，就用 K3d</p><p>如果已經執行了，記得跑 <code>k3s-agent-uninstall.sh</code> 或者 <code>k3s-uninstall.sh</code> 刪掉造成衝突的一方，然後重新啟動 service 即可: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start k3s.service</span><br><span class="line">systemctl status k3s.service</span><br></pre></td></tr></table></figure><!--## 安裝 K3d如果想透過<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">❯ curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash</span><br><span class="line"></span><br><span class="line">Preparing to install k3d into /usr/local/bin</span><br><span class="line">Password:</span><br><span class="line">k3d installed into /usr/local/bin/k3d</span><br><span class="line">Run <span class="string">&#x27;k3d --help&#x27;</span> to see what you can <span class="keyword">do</span> with it.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 建立 Cluster -- 有啟動 docker</span></span><br><span class="line">❯ k3d cluster create mycluster</span><br><span class="line">INFO[0000] Prep: Network</span><br><span class="line">INFO[0000] Created network <span class="string">&#x27;k3d-mycluster&#x27;</span></span><br><span class="line">INFO[0000] Created image volume k3d-mycluster-images</span><br><span class="line">INFO[0000] Starting new tools node...</span><br><span class="line">INFO[0001] Creating node <span class="string">&#x27;k3d-mycluster-server-0&#x27;</span></span><br><span class="line">INFO[0002] Pulling image <span class="string">&#x27;ghcr.io/k3d-io/k3d-tools:5.4.6&#x27;</span></span><br><span class="line">INFO[0004] Pulling image <span class="string">&#x27;docker.io/rancher/k3s:v1.24.4-k3s1&#x27;</span></span><br><span class="line">INFO[0016] Creating LoadBalancer <span class="string">&#x27;k3d-mycluster-serverlb&#x27;</span></span><br><span class="line">INFO[0018] Pulling image <span class="string">&#x27;ghcr.io/k3d-io/k3d-proxy:5.4.6&#x27;</span></span><br><span class="line">INFO[0027] Starting Node <span class="string">&#x27;k3d-mycluster-tools&#x27;</span></span><br><span class="line">INFO[0028] Using the k3d-tools node to gather environment information</span><br><span class="line">INFO[0028] Starting new tools node...</span><br><span class="line">INFO[0028] Starting Node <span class="string">&#x27;k3d-mycluster-tools&#x27;</span></span><br><span class="line">INFO[0030] Starting cluster <span class="string">&#x27;mycluster&#x27;</span></span><br><span class="line">INFO[0030] Starting servers...</span><br><span class="line">INFO[0030] Starting Node <span class="string">&#x27;k3d-mycluster-server-0&#x27;</span></span><br><span class="line">INFO[0033] All agents already running.</span><br><span class="line">INFO[0033] Starting helpers...</span><br><span class="line">INFO[0033] Starting Node <span class="string">&#x27;k3d-mycluster-serverlb&#x27;</span></span><br><span class="line">INFO[0039] Injecting records <span class="keyword">for</span> hostAliases (incl. host.k3d.internal) and <span class="keyword">for</span> 3 network members into CoreDNS configmap...</span><br><span class="line">INFO[0042] Cluster <span class="string">&#x27;mycluster&#x27;</span> created successfully!</span><br><span class="line">INFO[0042] You can now use it like this:</span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment">## 建立 Cluster -- 沒有啟動 docker</span></span><br><span class="line">❯ k3d cluster create mycluster</span><br><span class="line">ERRO[0000] Failed to get nodes <span class="keyword">for</span> cluster <span class="string">&#x27;mycluster&#x27;</span>: docker failed to get containers with labels <span class="string">&#x27;map[k3d.cluster:mycluster]&#x27;</span>: failed to list containers: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">INFO[0000] Prep: Network</span><br><span class="line">ERRO[0000] Failed Cluster Preparation: Failed Network Preparation: failed to create cluster network: failed to check <span class="keyword">for</span> duplicate docker networks: docker failed to list networks: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">ERRO[0000] Failed to create cluster &gt;&gt;&gt; Rolling Back</span><br><span class="line">INFO[0000] Deleting cluster <span class="string">&#x27;mycluster&#x27;</span></span><br><span class="line">ERRO[0000] Failed to get nodes <span class="keyword">for</span> cluster <span class="string">&#x27;mycluster&#x27;</span>: docker failed to get containers with labels <span class="string">&#x27;map[k3d.cluster:mycluster]&#x27;</span>: failed to list containers: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">ERRO[0000] failed to get cluster: No nodes found <span class="keyword">for</span> given cluster</span><br><span class="line">FATA[0000] Cluster creation FAILED, also FAILED to rollback changes!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 刪除 K3d cluster</span></span><br><span class="line">❯ k3d cluster delete mycluster</span><br><span class="line">INFO[0000] Deleting cluster <span class="string">&#x27;mycluster&#x27;</span></span><br><span class="line">INFO[0000] Deleting cluster network <span class="string">&#x27;k3d-mycluster&#x27;</span></span><br><span class="line">INFO[0000] Deleting 2 attached volumes...</span><br><span class="line">WARN[0000] Failed to delete volume <span class="string">&#x27;k3d-mycluster-images&#x27;</span> of cluster <span class="string">&#x27;mycluster&#x27;</span>: failed to find volume <span class="string">&#x27;k3d-mycluster-images&#x27;</span>: Error: No such volume: k3d-mycluster-images -&gt; Try to delete it manually</span><br><span class="line">INFO[0000] Removing cluster details from default kubeconfig...</span><br><span class="line">INFO[0000] Removing standalone kubeconfig file (<span class="keyword">if</span> there is one)...</span><br><span class="line">INFO[0000] Successfully deleted cluster mycluster!</span><br></pre></td></tr></table></figure><p>–&gt;</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="站內文章：K8s-相關"><a href="#站內文章：K8s-相關" class="headerlink" title="站內文章：K8s 相關"></a>站內文章：K8s 相關</h2><ul><li><a href="/2017/07/15/Container/Experience-minikube/">Experience minikube</a></li><li><a href="/2021/09/23/AWS/Experience-EKS-Anywhere/">Experience EKS Anywhere</a></li><li><a href="/2019/03/17/Container/Install-K8s-with-Kubeadm/">K8s 學習筆記 - kubeadm 手動安裝</a></li><li><a href="/2019/03/17/Container/Install-Addons-For-K8s/">K8s 學習筆記 - 工具篇</a></li><li><a href="/2019/03/17/Container/Admin-Maintenance-And-Troubleshooting-K8s/">K8s 學習筆記 - 維護與常見問題</a></li><li><a href="/2019/10/13/AWS/Study-Notes-EKS_Provision-Cluster/">EKS 學習筆記 - 基礎安裝篇</a></li><li><a href="/2019/10/19/AWS/Study-Notes-EKS_Networking/">EKS 學習筆記 - 網路規劃與管理篇</a></li></ul><h2 id="VPC-網路規劃"><a href="#VPC-網路規劃" class="headerlink" title="VPC - 網路規劃"></a>VPC - 網路規劃</h2><ul><li><a href="/2016/02/21/AWS/Study-Notes-VPC/">Study Notes - Virtual Private Cloud (VPC)</a></li><li><a href="/2018/04/08/GCP/Building-a-VPN-Between-GCP-and-AWS/">Building a VPN Between GCP and AWS</a></li><li><a href="/2017/02/04/AWS/Study-Notes-EC2-Auto-Scaling/">Study Notes - EC2 Auto Scaling 基礎介紹</a></li><li><a href="/2017/07/07/AWS/Plan-And-Deisgn-Multiple-VPCs-in-Different-Regions/">Plan and Design Multiple VPCs in Different Regions</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://dev.to/chillaranand/local-kubernetes-cluster-with-k3s-on-mac-m1-i57">https://dev.to/chillaranand/local-kubernetes-cluster-with-k3s-on-mac-m1-i57</a></li><li><a href="https://dev.to/sr229/how-to-use-nginx-ingress-controller-in-k3s-2ck2">https://dev.to/sr229/how-to-use-nginx-ingress-controller-in-k3s-2ck2</a></li><li><a href="https://zhuanlan.zhihu.com/p/435237515">Multipass 对已经存在的实例进行调整</a></li><li><a href="https://www.jeffgeerling.com/blog/2022/quick-hello-world-http-deployment-testing-k3s-and-traefik">https://www.jeffgeerling.com/blog/2022/quick-hello-world-http-deployment-testing-k3s-and-traefik</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Macbook Pro M1 (Apple Silicon) 安裝 K3s 的筆記。&lt;/p&gt;</summary>
    
    
    
    <category term="Container" scheme="https://rickhw.github.io/categories/Container/"/>
    
    
    <category term="K8s" scheme="https://rickhw.github.io/tags/K8s/"/>
    
    <category term="Ubuntu" scheme="https://rickhw.github.io/tags/Ubuntu/"/>
    
    <category term="Kubernetes" scheme="https://rickhw.github.io/tags/Kubernetes/"/>
    
    <category term="Macbook Pro M1" scheme="https://rickhw.github.io/tags/Macbook-Pro-M1/"/>
    
    <category term="Apple Silicon" scheme="https://rickhw.github.io/tags/Apple-Silicon/"/>
    
    <category term="multipass" scheme="https://rickhw.github.io/tags/multipass/"/>
    
    <category term="docker" scheme="https://rickhw.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>探索職涯、成就未來 - AWS Career Exploration Day 2022</title>
    <link href="https://rickhw.github.io/2022/12/21/About/2022-AWS-Career-Exploration-Day/"/>
    <id>https://rickhw.github.io/2022/12/21/About/2022-AWS-Career-Exploration-Day/</id>
    <published>2022-12-21T13:42:30.000Z</published>
    <updated>2023-09-13T13:04:13.409Z</updated>
    
    <content type="html"><![CDATA[<p>這是一場很特別的活動：<a href="https://pages.awscloud.com/20221121-tw-career-day.html">雲端職涯探索日</a> (<a href="https://events.104.com.tw/aws/20221201/">104專區</a>)，第一時間 AWS 的邀請我就毫不猶豫的答應了 XDD</p><span id="more"></span><h2 id="Slide-與錄影"><a href="#Slide-與錄影" class="headerlink" title="Slide 與錄影"></a>Slide 與錄影</h2><p>沒有來現場的朋友，可以透過以下的 Slide 與錄影回看內容：</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/3Aqb5R8P5ZJTTN" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/rickhwang/aws-career-exploration-day" title="AWS Career Exploration Day" target="_blank">AWS Career Exploration Day</a> </strong> from <strong><a href="//www.slideshare.net/rickhwang" target="_blank">Rick Hwang</a></strong> </div><p>錄影 (iPad 直接錄影，收音)</p><iframe width="560" height="315" src="https://www.youtube.com/embed/q-58KOHbGSY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ol><li>從問題中出發，解決問題、探索需要的技能</li><li>為自己的技能抓一個目標：考證照</li></ol><p><img src="/images/About/2022-AWSCareerExplorationDay/Slide1.png"><br><img src="/images/About/2022-AWSCareerExplorationDay/Slide2.png"><br><img src="/images/About/2022-AWSCareerExplorationDay/Slide3.png"><br><img src="/images/About/2022-AWSCareerExplorationDay/Slide4.png"></p><h3 id="現場問答-一-：問問題，找答案"><a href="#現場問答-一-：問問題，找答案" class="headerlink" title="現場問答 (一)：問問題，找答案"></a>現場問答 (一)：問問題，找答案</h3><p>在現場攤位有一些朋友來問準備考試的方向，類似問題我統一把當下講的東西，重點敲下來，關鍵就是：</p><blockquote><p>問問題，找答案。</p></blockquote><p>這個過程，才是從不會、到會的學習過程。</p><p>現場我給了我的標準面試考題：<code>短網址</code>、<code>縮網址</code>，關鍵字是 <code>Short URL</code>。這個題目可以從開發 (寫程式) 角度、從架構設計角度、從維運角度，都可以切入；可以用 AWS 服務組出來，也可以完全自幹。</p><p>依照我要用人的職務、角色不一樣，我會有不同問法。例如要找 Cloud Engineer，就會看看如何用 AWS 服務做出來，而且考慮可靠度、效能、成本、資安 … 等因素。如果是面試開發工程師，如果他也懂 AWS，那我就會說：設計不能用 AWS Lambda (Serverless)，要怎麼做架構設計？怎麼做系統設計？</p><p>同樣，會真實情境去思考問題，例如短網址最常拿來用什麼？Line 廣告推播，例如某個商品特價了、新商品上架優惠 … 通常會有瞬間巨量 (或叫高併發)，怎麼利用 AWS 的服務，組出一個滿足這樣需求的設計？</p><p>養分來自於問題，問題的深度與廣度，會決定學習的方向。</p><p>現場很多朋友是剛出社會、或者尚未出社會，我的建議就是：</p><blockquote><p>先做出來再說。</p></blockquote><p>不管啥方式，先把短網址這個功能做出來，先能用了，再來開始挑戰。如果不知道短網址是啥，那就趕快去 google ~</p><h3 id="現場問答-二-：探索自己"><a href="#現場問答-二-：探索自己" class="headerlink" title="現場問答 (二)：探索自己"></a>現場問答 (二)：探索自己</h3><p>現場另一類的問題是，不知道自己下一步要做什麼？要繼續做開發？還是碰 AWS？要做資料分析？還是做維運？</p><p>更多看這篇： <a href="/2021/09/10/About/Self-Exploration/">職涯、探索、退休</a></p><h2 id="相關文章"><a href="#相關文章" class="headerlink" title="相關文章"></a>相關文章</h2><p>這場主軸是職涯 (Career)，構思內容的出發點是從 “<a href="/2021/09/10/About/Self-Exploration/">職涯、探索、退休</a>“、”<a href="/2018/08/20/Management/Overview-Hiring/">聊聊人力招募</a>“ 這兩篇出發，然後再扣回主辦單位想要的考證照，以 “<a href="/2019/08/14/About/About-Certificate/">證照有無用論？</a>“ 為主軸，真實案例是 “<a href="/2016/10/10/AWS/Migrate-to-AWS-NAT-Gateway/">Migrate to AWS NAT Gateway</a>“ 這篇。其他更多還有以下：</p><ul><li><a href="/2020/06/21/Management/Interview-Problems/">面試常見的問題</a></li><li><a href="/2017/09/20/About/Learning-Approaches/">學習法則</a></li><li><a href="/2016/10/01/AWS-Study-Roadmap/">AWS Study Roadmap</a></li><li><a href="/2016/08/20/AWS/AWS-Certified-Developer/">AWS Certified Developer - Associate 準備心得</a></li><li><a href="/2016/07/29/AWS/AWS-Certified-SysOps-Administrator/">AWS Certified SysOps Administrator - Associate 準備心得</a></li><li><a href="/2016/04/22/AWS/AWS-Certified-Solutions-Architect_Associate/">AWS Certified Solutions Architect - Associate 準備心得</a></li><li><a href="/2019/01/12/About/Talent-And-Effort/">天賦與努力</a></li></ul><h2 id="照片-by-主辦單位-AWS"><a href="#照片-by-主辦單位-AWS" class="headerlink" title="照片 by 主辦單位 (AWS)"></a>照片 by 主辦單位 (AWS)</h2><p>這次活動 AWS 籌辦很久，其中最辛苦的莫過於負責活動的 Pamela，過程中很有耐心跟我討論內容，很慎重的 rehearsal 活動 rundown 流程 (這些過程我真的都滿熟的 XD) ～</p><p>感謝推坑的老朋友 Cliff、認識的新朋友 - 另一位 Scott (Data)、Carol，很久沒碰面的 Roy、來攤位詢問職涯的朋友、SRE 社群的朋友、前同事 Viola … (認親大會嗎 XDD)</p><p><img src="/images/About/2022-AWSCareerExplorationDay/IMG_6549.JPG"></p><p><img src="/images/About/2022-AWSCareerExplorationDay/IMG_6553.JPG"></p><h2 id="相關連結"><a href="#相關連結" class="headerlink" title="相關連結"></a>相關連結</h2><ul><li><a href="/2023/09/09/About/2023-AWS-Career-Exploration-Day/">探索職涯、複利人生 - AWS Career Exploration Day 2023</a></li><li><a href="https://pages.awscloud.com/20221121-tw-career-day.html">雲端職涯探索日</a></li><li><a href="https://events.104.com.tw/aws/20221201/">104專區</a></li><li><a href="https://buzzorange.com/techorange/2023/03/01/aws-people-3/">雲端大鬧人才荒！如何加速職涯跳轉、成為搶破頭的雲端人才？</a> - Updated: 2023&#x2F;03&#x2F;06</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;這是一場很特別的活動：&lt;a href=&quot;https://pages.awscloud.com/20221121-tw-career-day.html&quot;&gt;雲端職涯探索日&lt;/a&gt; (&lt;a href=&quot;https://events.104.com.tw/aws/20221201/&quot;&gt;104專區&lt;/a&gt;)，第一時間 AWS 的邀請我就毫不猶豫的答應了 XDD&lt;/p&gt;</summary>
    
    
    
    <category term="About" scheme="https://rickhw.github.io/categories/About/"/>
    
    
    <category term="AWS" scheme="https://rickhw.github.io/tags/AWS/"/>
    
    <category term="Career" scheme="https://rickhw.github.io/tags/Career/"/>
    
    <category term="Certiciation" scheme="https://rickhw.github.io/tags/Certiciation/"/>
    
  </entry>
  
  <entry>
    <title>和艦長一起 30 天玩轉 GitLab【第二版】- 推薦序完整版</title>
    <link href="https://rickhw.github.io/2022/11/19/About/Gitlab-Recommand/"/>
    <id>https://rickhw.github.io/2022/11/19/About/Gitlab-Recommand/</id>
    <published>2022-11-19T13:42:30.000Z</published>
    <updated>2023-05-01T04:17:19.423Z</updated>
    
    <content type="html"><![CDATA[<p>只要是軟體開發，不管 Web Services、還是 Mobile 或 Desktop Application，都會需要建置 (Build) 與交付 (Delivery) 兩個核心過程。Web Services 的交付稱為部署 (Deployment)，應用程式稱為發佈 (Publish)。而這些過程，也伴隨著一些衍生的任務 (Task)，組成一連串的行為，隨著時間的推進，架構的改變，這些任務的組合，往往是工程師們的夢靨的開始。</p><span id="more"></span><h2 id="走過的路"><a href="#走過的路" class="headerlink" title="走過的路"></a>走過的路</h2><p>在 git 還沒開始流行之前，我早期在 IBM 工作時使用的 <a href="https://en.wikipedia.org/wiki/IBM_Configuration_Management_Version_Control_(CMVC)">CMVC</a> 這套 IBM 自行開發的整合性 SCM <sup>註</sup>，它整合了 Issue Tracking System (ITS)、Build Procedure、Unit Test、Integration Test、Source Control 等 … 完美整合，分支策略以 Trunk Based 為主，每個 Commit 都一定根據 Issue Number。通常 Commit 一定要基於 Feature Ticket 或者 Defect &#x2F; Bug Number。</p><blockquote><p>註： SCM: Source Code Mangement, 早期稱 VSC, Version Control System</p></blockquote><p>除了 CMVC，後來常用的 SCM 則是 CVS、SVN、Perforce (p4)，但這些 SCM 如果要處理開發流程，以 SVN 來說，是透過 pre-commit 以及 post-commit hook 去管理。透過這些機制，配合像是 Redmine 這種 ITS 就可以做到 commit 語意化，以達到流程管理的目的。</p><p>以下是我在新創事業的工作經歷時，當時配合 <a href="/2016/09/17/Redmine/Integrate-GIT-in-Redmine/">Redmine 設計的 commit 規則</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ref <span class="comment">#1235 part 1 for this functional set.</span></span><br><span class="line">fix <span class="comment">#9527 This is a defect fix, the root cause is invalid assignment.</span></span><br><span class="line"><span class="keyword">done</span> <span class="comment">#6741 complete functional implementation.</span></span><br><span class="line">build <span class="comment">#9420 trigger build</span></span><br></pre></td></tr></table></figure><p>每次 commit 都必須符合這樣的規則：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">command</span>] [issue-number] [comments]</span><br></pre></td></tr></table></figure><p>透過這樣的機制，自己做出完整的 CI &#x2F; CD 流程。</p><h2 id="必要的機制"><a href="#必要的機制" class="headerlink" title="必要的機制"></a>必要的機制</h2><p>CI &#x2F; CD 加上 Pipeline 最核心的有三件事情： <strong>Build</strong> 、 <strong>Delivery</strong> 、以及把這兩件事連接起來的 <strong>Pipeline (Workflow)</strong> 。衍伸的任務，其他 CI 還有的像是串接 Unit Test、Integration Test、Code Scan、Code Review，CD 則有環境建置 (Provisioning)、配置管理、部署策略 (發布策略) … 等，是讓整件事情更完善的下一步。</p><p>除了上述任務，另外影響整個 Pipeline 的則是分支策略這種流程 (Workflow) 帶來的複雜度，不管是 Git Flow、GitHub Flow、還是 Trunk Based，都會讓團隊有更一致的開發流程體驗，當然隨之而來的就是 Pipeline 的複雜度，進而衍伸的架構議題。</p><p>從技術本質來看，要滿足上述任務需要包含這些條件： <strong>(1) 任務 (Task)</strong> 、 <strong>(2) 流程控制 (Flow Control)</strong> 、與 <strong>(3) 事件驅動 (Event Driven)</strong> 。任務指的是像 Build、Deploy、Unit Test、Code Scan … 這些事情，這些事情通常是透過 Script、寫程式、第三方工具串接做整合；流程控制則是把 Task 接起來的控制，包含先後次序，甚至是條件控制；事件驅動則是怎樣發動一個流程或者任務，透過人為觸發 (Approve &#x2F; Bug Report)、還是 commit 觸發、還是 tag &#x2F; branch 觸發、還是 Slack 觸發 … 等。</p><p>當系統架構變大、變複雜，為了加速 Pipeline 執行的效率，通常會考慮增加運算資源，隨之而來的是第四個條件：<strong>分散式運算 (Distributed Computing)</strong> ，但也因此會帶來 <strong>分散式架構</strong> 議題 <sup><a href="/2019/05/21/AWS/Study-Notes-Step-Functions/">1</a>, <a href="https://github.com/rickhw/thinking-in-code/tree/master/task-placement-controller">2</a></sup>。</p><p>撇除工具提供的功能，寫一個好的 Task、做好基本的 Flow Control，需要基本軟體工程能力，還有寫程式的紀律。如果純手工，沒有工具支援，要做好這兩件事情還可以，這也是普遍人在談的自動化程式範圍。但如果要做到事件驅動、分散式運算的需求，那麼就不是普通工程師能做好的了。而 Gitlab 本身的架構透過分散式運行機制：Gitlab Runner 與 Tag，完美的解決這個問題。</p><h2 id="推薦"><a href="#推薦" class="headerlink" title="推薦"></a>推薦</h2><p><img src="/images/About/GitLab-2022/gitlab-2022.jpg"></p><p>一本書如果要說那些最重要的，我會用上述的觀點來作為衡量指標，觀念要正確，實踐方法與思路要清晰、可用、有效率。這本 Gitlab 實戰，作者除了把 GitLab 整體概念有完整的介紹，CI &#x2F; CD &#x2F; Pipeline 該怎麼設計與實踐，有著更實務的介紹，特別在第五章，把我心裡的想法，變成如何透過 Gitlab 實踐出來。</p><p>Pipeline 的複雜度是跟著架構，通常系統架構越複雜、依賴性越多，整個 Pipeline 就會越長且複雜。這時候問題通常不是工具的問題，而是結構問題，計算機科學處理複雜度最常用的方法： <strong>分而治之 (Divide and Conquer)</strong></p><p>例如有五個系統要部署，彼此有先後依賴關係，Pipeline 的長度有數十個 Stages，這時候可以利用 GitLab Pipeline 提供的變數 (Variables)、流程控制 (Workflow)、樣板 (Templates) 等類似於 DSL (Domain-Specific Language) 的功能，搭配分而治之的概念，降低複雜度、提高 Pipeline 重用性，在軟體工程裡就是重構 (Refactoring)。這些在書本都有詳細說明概念與應用。</p><p>如果再加上 Cloud Native 的流行，從傳統的地端機房，變成各種雲提供者 (AWS、GCP、Azure)，乃至於 Kubernates (K8s)，這麼複雜的條件，如何搭配 GitLab 的 Auto DevOps，也是本書會給予讀者方向與概念的。這麼複雜的條件，其實核心概念依舊脫離不了前面提到的本質： <strong>任務、流程控制、事件驅動、以及分散式運算</strong> ，也就是各種雲或者 K8s。</p><p>如果你有個朋友，他是初出茅廬的工程師，如果你想毀了他，那就叫他去寫自動化吧；但是如果你又想讓他覺得，你是世界上對他最好的人，那麼就介紹他 Gitlab 吧！同樣的條件之下，如果他是你的好朋友，為了拯救他於水深火熱，沒日沒夜的加班，那還是介紹他 Gitlab 吧！他上車了，但卻沒有人教他怎麼讓順利做好 Pipeline，那就介紹他這本書，讓艦長帶他一步一步走向更好生活的路上！</p><blockquote><p>技術部落格《<a href="https://rickhw.github.io/">Complete Think</a>》 作者 <a href="/2017/12/29/About/About-Author/">Rick Hwang</a>, 2022&#x2F;10 台北</p></blockquote><p> ☛ 天瓏書局：<a href="https://www.tenlong.com.tw/products/9786263332966?list_name=i-r-zh_tw">和艦長一起 30 天玩轉 GitLab【第二版】（iT邦幫忙鐵人賽系列書）</a></p><h2 id="上市後"><a href="#上市後" class="headerlink" title="上市後"></a>上市後</h2><blockquote><p>updated 2022&#x2F;12&#x2F;16</p></blockquote><p>感謝艦長贈書留念～</p><p><img src="/images/About/GitLab-2022/Chen-Wei2.jpg"><br><img src="/images/About/GitLab-2022/Chen-Wei1.jpg"><br><img src="/images/About/GitLab-2022/Chen-Wei3.jpg"><br><img src="/images/About/GitLab-2022/Chen-Wei4.jpg"></p><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol><li><a href="/2019/04/04/DevOps/Four-Pillars-of-Software-Delivery/">軟體交付的四大支柱 (Four Pillars of Software Delivery)</a></li><li><a href="/2018/12/16/DevOps/Hire-a-Release-Engineer/">需要專職的 Release Engineer？</a></li><li><a href="/2018/04/01/DevOps/How-To-Make-CICD-Quality/">怎樣的 CI&#x2F;CD 才夠 Quality?</a></li><li><a href="/2019/03/28/DevOps/DevOpsTaiwan-Meetup-Beginning-in-Artifacts-Management/">聊聊軟體交付的濫觴 談產出物管理</a></li><li><a href="/2019/05/21/AWS/Study-Notes-Step-Functions/">Study Notes - Step Functions</a></li><li><a href="/2016/09/17/Redmine/Integrate-GIT-in-Redmine/">系統整合：Integrate GIT in Redmine</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;只要是軟體開發，不管 Web Services、還是 Mobile 或 Desktop Application，都會需要建置 (Build) 與交付 (Delivery) 兩個核心過程。Web Services 的交付稱為部署 (Deployment)，應用程式稱為發佈 (Publish)。而這些過程，也伴隨著一些衍生的任務 (Task)，組成一連串的行為，隨著時間的推進，架構的改變，這些任務的組合，往往是工程師們的夢靨的開始。&lt;/p&gt;</summary>
    
    
    
    <category term="About" scheme="https://rickhw.github.io/categories/About/"/>
    
    
    <category term="Continuous Delivery" scheme="https://rickhw.github.io/tags/Continuous-Delivery/"/>
    
    <category term="Published-SRE1" scheme="https://rickhw.github.io/tags/Published-SRE1/"/>
    
    <category term="Continuous Integration" scheme="https://rickhw.github.io/tags/Continuous-Integration/"/>
    
    <category term="Gitlab" scheme="https://rickhw.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Problem Behind Question</title>
    <link href="https://rickhw.github.io/2022/10/15/Management/Problem-Behind-Question/"/>
    <id>https://rickhw.github.io/2022/10/15/Management/Problem-Behind-Question/</id>
    <published>2022-10-15T10:21:00.000Z</published>
    <updated>2023-09-13T13:04:13.411Z</updated>
    
    <content type="html"><![CDATA[<p>工作上經常問題還沒被看清楚，只求快，要有成果，往往都只是做表面工作。</p><p>這篇整理自 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid02kCCdZu2ztmzmYRA8i44qDVA1JYVPfgcn3BaEukmgBerJdRrL3ebojGnJTk2oaDkml">2022&#x2F;09&#x2F;08</a>、<a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0fSDnHyqy4oCN1e1dT6uHR72dGXY4wfHgqcQEimpvJRLGAdDAioDzjsnRznqWuMrMl">2022&#x2F;07&#x2F;22</a> 我自己的思考的筆記，延伸 <code>QBQ (問題背後的問題)</code> 以及 <a href="/2019/12/28/Management/Awareness-and-Deep-Thinking/">如何意識到問題的存在</a>，我自己深度體悟與昇華後的心得。</p><span id="more"></span><h2 id="表象、議題、問題"><a href="#表象、議題、問題" class="headerlink" title="表象、議題、問題"></a>表象、議題、問題</h2><p>普遍的 <code>表象</code> 都只是些 <code>現象</code>，還在 <code>議題 (Issue)</code> 階段，真正的 <code>問題 (Problem)</code> 還沒顯現。</p><p>需透過眾人的 <code>提問 (Question)</code>，經過 <code>思 (Thinking)</code>、<code>辨 (Discussion)</code>、<code>分析 (Analyze)</code>、<code>總結 (Conclusion)</code>，然後真正問題背後的問題：</p><blockquote><p>Problem Behind Question (PBQ)</p></blockquote><p>真正核心問題才會出現，接下來的行動才有機會是提出 <code>解決方案 (Solution)</code>、討論各個 <code>執行計畫 (Plan)</code> 的優缺、進行 <code>執行策略 (Strategy)</code> 謀劃，<code>問題 (Problems)</code> 才能真正的 <code>被解決 (Resolved)</code>。</p><h2 id="定義用詞"><a href="#定義用詞" class="headerlink" title="定義用詞"></a>定義用詞</h2><p>定義前面提到幾個用詞：</p><ul><li><code>Issue</code>: 翻譯成 <code>議題</code>，抽象名詞，泛指事件的統稱，包含已確立的、尚未釐清的、混沌不明的 …<ul><li>這個詞源源自於 Redmine，任何需要被處理的事情都抽象成 Issue。更多參閱 <a href="/2015/01/06/Management/%E5%8D%94%E5%90%8C%E5%90%88%E4%BD%9C%E7%B3%BB%E7%B5%B1%E5%BB%BA%E5%88%B6%E8%88%87%E5%B0%8E%E5%85%A5-%E4%BB%A5-Redmine-%E7%82%BA%E4%BE%8B/">協同合作系統建制與導入 - 以 Redmine 為例</a></li></ul></li><li><code>Question</code>: 這裡我翻譯成 <code>提問</code>，而不是問題，指的是針對事件的現象進行提問，大部分背後動機都是收集事件的資訊、上下文 (Context)</li><li><code>Context</code>: 背景資訊、上下文、前後文。提問過程，蒐集到的資訊，例如人事時地物等，以及因果關係。</li><li><code>Problem</code>: 問題，已經確立根本的因素，包含實際影響 (Impact)、關鍵觸發者 (Event Source)、範圍 (Scope)，有具體的 <code>問題根源 (Root Cause)</code></li><li><code>Solution</code>: 解決方案，針對問題 (Problem) 的因素而設計的處理方法。留意，是針對性地。</li><li><code>Resolved</code>: 已經解決，是個狀態。透過 Solution，把問題根源排除。</li><li><code>Strategy</code>: 執行策略，當問題被定義好了，通常不會只有一個 Solution，而是會有多個，然後衍生出各個執行計畫，這時候可以比較 Plan A &#x2F; B &#x2F; C 的優缺點 (Pros &#x2F; Cons)，然後往下執行才有策略可言。</li></ul><hr><h2 id="Problem-Behind-Question"><a href="#Problem-Behind-Question" class="headerlink" title="Problem Behind Question"></a>Problem Behind Question</h2><p>改一下很常用的</p><blockquote><p>QBQ: Question Behind Question</p></blockquote><p><a href="https://www.books.com.tw/products/0010245329">問題背後的問題</a>，這是本很有名的書。</p><p>我把這段話改成這樣：</p><blockquote><p>Problem Behind Question, PBQ</p></blockquote><p>可以翻譯成：<code>提問背後的問題</code></p><p>我想要強調的重點是：</p><blockquote><p>在還沒把 <code>議題 (Issue)</code> 的 <code>背景資訊 (Context)</code> 搞清楚之前，<code>問題 (Problem)</code> 是無法定義。</p></blockquote><p>我常常看到這樣的狀況：</p><p>在一些關鍵的問題，像是系統架構、商業決策，很常看到還沒確認問題，就開始急著討論解決方案、什麼時間完成，往往核心問題、核心需求都還沒搞清楚。所以最後解決的往往不是根本因素 (Root Cause)。</p><p>大部分 議題 (Issue) 剛開始看的現象，在背景資料 Ccontext) 不足的情況、情報不足，都還不足以確認、或者定義問題 (Problem)，貿然出手處理，如果經驗又不足，往往處理的，只是表面的東西。</p><blockquote><p>註：<code>緊急事件</code> 的止血行為不在此範圍。</p></blockquote><p>解決方案 (Solution) 處理的是 Problem 的根本因素 (Root Cause)，而提問 (Question) 是探索 Problem 的 Context，搜集情報的過程、疏理 Context、進而找到 Root Cause，然後才定義問題。</p><p>越是關鍵的問題，越是要嚴正以待，提問是很關鍵的一關。</p><h2 id="開會是在浪費時間？"><a href="#開會是在浪費時間？" class="headerlink" title="開會是在浪費時間？"></a>開會是在浪費時間？</h2><p>其實很常聽到同事說，開會是在浪費時間，因為沒有像寫程式一樣有具體產出。</p><p>開會的重點在於，問題 (Question) 提出來，經過思辨、搜集各種角度的想法、最後需要一個人 (最好是 PO)，去整理這些討論與問題，然後分析、總結脈絡，最後做策略性選擇。</p><p>通常問題就在於，沒有針對狀況提問，問題本身沒有經過精煉或者討論。</p><p>最慘的是，時間花了，卻沒有去 <code>整理</code>、<code>分析</code>、<code>總結</code>，所以開會當然會變浪費時間。</p><p>知道問題點在哪，就針對問題用技術能力去改善，而且是一針見血的執行，這樣的開會自然就會有意義，而且是非常有意義。</p><blockquote><p>開會的方法請參閱：<a href="/2020/10/11/Management/Effective-Meetings/">一場有效的會議</a></p></blockquote><h2 id="工程師的等級"><a href="#工程師的等級" class="headerlink" title="工程師的等級"></a>工程師的等級</h2><p>把問題定義清楚，再來談技術。</p><p>而不是談了一堆技術，卻不知道在解決什麼。</p><p>我常舉的例子：</p><blockquote><p>沒有方向的開車，跟酒駕沒什麼兩樣。</p></blockquote><p>下圖大概是最好的描述。</p><p><img src="/images/Management/Level-of-Engineer.jpg"><br>出處： <a href="https://www.books.com.tw/products/0010942768">流寇與創新者：林宜敬的怪奇求學與創業生涯</a></p><!--https://www.facebook.com/completethink/posts/pfbid0d3PYec48w97tyPPDep7QvYGEAn32gp2qTnj9TbwLFfF2YBYyAdtTdmX14mbw7jyzl--><h2 id="未完-…"><a href="#未完-…" class="headerlink" title="未完 …"></a>未完 …</h2><p>我先整理這段核心想法，延伸 <code>QBQ (問題背後的問題)</code> 以及 <a href="/2019/12/28/Management/Awareness-and-Deep-Thinking/">如何意識到問題的存在</a>，未來再整理完整版。</p><h2 id="相關的書"><a href="#相關的書" class="headerlink" title="相關的書"></a>相關的書</h2><ul><li><a href="https://www.books.com.tw/products/0010245329">問題背後的問題</a></li><li><a href="https://www.books.com.tw/products/0010478689">你會問問題嗎：問對問題是成功領導的第一步</a></li></ul><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="/2020/10/11/Management/Effective-Meetings/">一場有效的會議</a></li><li><a href="/2019/12/28/Management/Awareness-and-Deep-Thinking/">如何意識到問題的存在</a></li><li><a href="/2017/09/20/About/Learning-Approaches/">學習法則</a></li><li><a href="/2015/01/06/Management/%E5%8D%94%E5%90%8C%E5%90%88%E4%BD%9C%E7%B3%BB%E7%B5%B1%E5%BB%BA%E5%88%B6%E8%88%87%E5%B0%8E%E5%85%A5-%E4%BB%A5-Redmine-%E7%82%BA%E4%BE%8B/">協同合作系統建制與導入 - 以 Redmine 為例</a></li></ul><h2 id="更新紀錄"><a href="#更新紀錄" class="headerlink" title="更新紀錄"></a>更新紀錄</h2><ul><li>2023&#x2F;09&#x2F;09 (Sat): 新增 工程師的等級</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;工作上經常問題還沒被看清楚，只求快，要有成果，往往都只是做表面工作。&lt;/p&gt;
&lt;p&gt;這篇整理自 &lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/pfbid02kCCdZu2ztmzmYRA8i44qDVA1JYVPfgcn3BaEukmgBerJdRrL3ebojGnJTk2oaDkml&quot;&gt;2022&amp;#x2F;09&amp;#x2F;08&lt;/a&gt;、&lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/pfbid0fSDnHyqy4oCN1e1dT6uHR72dGXY4wfHgqcQEimpvJRLGAdDAioDzjsnRznqWuMrMl&quot;&gt;2022&amp;#x2F;07&amp;#x2F;22&lt;/a&gt; 我自己的思考的筆記，延伸 &lt;code&gt;QBQ (問題背後的問題)&lt;/code&gt; 以及 &lt;a href=&quot;/2019/12/28/Management/Awareness-and-Deep-Thinking/&quot;&gt;如何意識到問題的存在&lt;/a&gt;，我自己深度體悟與昇華後的心得。&lt;/p&gt;</summary>
    
    
    
    <category term="經營管理" scheme="https://rickhw.github.io/categories/%E7%B6%93%E7%87%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Design" scheme="https://rickhw.github.io/tags/Design/"/>
    
    <category term="主管" scheme="https://rickhw.github.io/tags/%E4%B8%BB%E7%AE%A1/"/>
    
    <category term="QBQ" scheme="https://rickhw.github.io/tags/QBQ/"/>
    
    <category term="PBQ" scheme="https://rickhw.github.io/tags/PBQ/"/>
    
    <category term="Thinking" scheme="https://rickhw.github.io/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>架構師的使命</title>
    <link href="https://rickhw.github.io/2022/10/07/About/As-Architect/"/>
    <id>https://rickhw.github.io/2022/10/07/About/As-Architect/</id>
    <published>2022-10-07T04:39:00.000Z</published>
    <updated>2023-06-02T13:21:25.313Z</updated>
    
    <content type="html"><![CDATA[<p>架構師的工作到底是做啥？用一張十年前 (2012) 我自己在 <a href="https://www.plurk.com/p/hp91r2">Plurk</a> 寫下的定義，然後再真實經歷之後，重新回顧這段話。</p><p><img src="/images/About/201211_as-Architect.jpg"><br><a href="https://www.plurk.com/p/hp91r2">Plurk Permalink</a></p><p>這篇是我在粉專寫下的 <a href="https://www.facebook.com/completethink/posts/pfbid02kxY7WJLh6aWnpVNuSeK8z6WQm26kEVqPuzrcYKVyEjAFhPjwzF6pau1Y2uyKPx9rl">隨筆文</a>，放在 blog 做個紀錄。</p><span id="more"></span><hr><h2 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h2><p>截圖是我 2012 年在 <code>噗浪</code> (Plurk, 還有人在用？) 上自己對於 <code>架構師</code> 寫下的定義:</p><blockquote><p>讓所有團隊的 <code>關係人</code>，對於 <code>產品</code> 有 <code>一致性</code> 的 <code>整體觀</code></p></blockquote><p>我的部落格文章裡，有很高的比例都在整理溝通表達的想法，像是：</p><ul><li><a href="/2020/03/24/Management/Principles-of-Communication/">溝通的原理</a></li><li><a href="/2020/08/01/Management/Expression-and-Communication/">表達與溝通的差異</a></li><li><a href="/2014/11/26/Management/%E9%96%8B%E6%9C%83%E5%8E%9F%E5%89%87/">開會原則</a> 及 系列文</li><li><a href="/2021/12/19/Management/Protocol-to-Communication/">團隊溝通的通訊協議</a></li></ul><p>除了這些軟性的，在 “<a href="/2018/08/11/DistributedSystems/Distributed-Consistency-and-Consensus-Algorithm/">一致性問題與共識演算法</a>“ 這篇整理，把 <code>一致性問題</code>、<code>共識演算法</code> 兩個 分散式系統的核心議題，直接用到組織溝通。計算機科學裡的 <code>通訊協議</code> 概念，應用在人與人溝通。</p><h2 id="使命"><a href="#使命" class="headerlink" title="使命"></a>使命</h2><p>最近跟朋友聊到架構師工作內容是做啥？研究最新的最炫砲的技術？還是去扛別人留下來的坑、把坑變黃金？研究下一代的技術？ …. 聽起來好像是，也好像都不是。</p><p>最近剛好有機會，有在學學生來公司參訪，我負責介紹架構師在做啥，準備的時候我直覺的就用了十年前的這段話當開場，定義了架構師的使命。</p><p>這句話其實換成其他角色，也可以？其實不然，換成總監、經理層級，絕對不行；VP 以上層級，也不對，大部分的 VP、總監、經裡 還是 Functional Base 的角色，也就是具備本位主義。所以只有架構師、產品長、PO，或者 C-Level 這種全局觀的角色，才是做這種工作。</p><p>普遍人對於架構師還是以技術角度出發，例如就是在導 MicroServices、DDD、Clean Code &#x2F; Architect、搞 K8s、弄 Cloud、弄 vSphere、Service Mesh、資訊安全 … 我也的確在當場回答了一些概念，我的 Blog 也有一半以上都在寫技術類的東西。</p><h2 id="各種-XXX-Architect-updated-2023-x2F-05-x2F-31"><a href="#各種-XXX-Architect-updated-2023-x2F-05-x2F-31" class="headerlink" title="各種 XXX Architect (updated: 2023&#x2F;05&#x2F;31)"></a>各種 XXX Architect (updated: 2023&#x2F;05&#x2F;31)</h2><p>我的 <a href="/2017/12/29/About/About-Author/">個人介紹</a> 有寫到這些 <code>XXX Architect</code>，突然想到 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid026vWwDuNdFRrLheKbN9fDAYhumSJpuLfumxLwSgCUsBdQZam4w38YjYnkrRGHEHYVl">紀錄</a> 這件事。。。</p><p>這些名稱背後我有自己的解釋，記錄這些定義，以及背後的想法。好友 Kim 也有類似的 <a href="https://www.facebook.com/kimkao.solid/posts/pfbid0yuVSwo7h4GYtnLS3eP14JkhR5mWMdcuNj6CAzDbE9NRYdjPrtggfg3nrNpjfEuRKl">紀錄</a>，也可以參考看看～～</p><h3 id="Software-Architect"><a href="#Software-Architect" class="headerlink" title="Software Architect"></a>Software Architect</h3><p>有些公司稱 <code>Application Architect</code>, 本質是處理 Code Level 的各種 <code>資料結構</code> 與 <code>資料流</code>. System Design 談的 Design Patterns, DI, AoP, SOLID, Algorithm, Protocol, Framework, API, UI, … 等要處理的. 也就是一個應用程式裡面所有的東西, 與他對外的關係. </p><p>最近我用 Process 概念來闡述這種概念, App 跑起來在作業系統裡就是一條 Process …. Process 以外的就是 Infra, 有怨念 … 但真實世界就是這樣運作的 QQ</p><h3 id="Infra-Architect"><a href="#Infra-Architect" class="headerlink" title="Infra Architect"></a>Infra Architect</h3><p>處理 Application 以外的東西. 跳出 Process 以外的事情, 都是 Infra 的事 (也很符合事實) … </p><p>K8s 核心概念的 Pod 表述的是一個應用程式 (Process &#x2F; container) 與其他 Process (Container) 之間的關係. 實務上, 應用程式 (Process) 之外的 Processes (ex: DB, storage, networking …), 真的都是 Infra Team 在管的. </p><p>大概就是你媽在家裡做的是，老爸只負責賺錢 …</p><h3 id="Tech-Architect"><a href="#Tech-Architect" class="headerlink" title="Tech Architect"></a>Tech Architect</h3><p>做 <code>技術決策</code> 與 <code>技術管理</code>. </p><p>舉凡各種 Design Principle &#x2F; Methodology &#x2F; Guideline, 技術選擇, Evaluation &#x2F; Tradeoff &#x2F; Tuning &#x2F; Optimizition …. </p><p>該用 REST or GraphQL? 該用 NATS or Kafka? 該用 RDB or NoSQL or NewSQL? 該用 Block or Object Storage? </p><p>所以 Tech Architect 會往下繼續展開各種專業, 像是 DB &#x2F; Data &#x2F; Network &#x2F; Security &#x2F; Storage &#x2F; Test … 等更深度領域的. </p><p>這也是大多數人認為 architect 的主要工作.</p><h3 id="Solution-Architect"><a href="#Solution-Architect" class="headerlink" title="Solution Architect"></a>Solution Architect</h3><p>解決問題的那個人, 需要懂上面一堆東西 …. 技能很硬、身段卻要很軟的角色 (到處跪🧎)。</p><p>一些人會以為導入 OOXX 技術就是 “Solution”, 所以常常系統裡就多了很多不知道為啥存在的東西 …. Solution Architect 的重點是要解決問題, 這才是最難的.</p><p>通常問我, 你都用什麼 Solution ? 通常我都會反問: </p><blockquote><p>你說的問題是什麼？怎樣才叫解決？</p></blockquote><p>通常被我這樣反問的人, 有一半會當機 ….</p><blockquote><p>問題背後的問題：<a href="/2022/10/15/Management/Problem-Behind-Question/">Problem Behind Question</a></p></blockquote><h3 id="Enterprice-Architect"><a href="#Enterprice-Architect" class="headerlink" title="Enterprice Architect"></a>Enterprice Architect</h3><p>跟業務 ($$) 有關的, 上面沒列到的, 簡稱 Others …. (有點像 PMO .. XDD</p><p>詳細可以參閱 <a href="https://en.wikipedia.org/wiki/Enterprise_architecture">Wikipedia</a> 的整理.</p><h2 id="武、俠與俠之大者"><a href="#武、俠與俠之大者" class="headerlink" title="武、俠與俠之大者"></a>武、俠與俠之大者</h2><p>我很喜歡讀金庸武俠，其中最喜歡討論的就是 <code>武俠</code>，喜歡郭靖的 <code>俠之大者，為國為民</code>。江湖上喜歡討論誰武功高、誰的武功有多厲害、喜歡討論之最、最高、爭奪武功秘笈 ….. (這年代的武功秘笈都在 ACM 論文 …. 只要有心，人人都可以練成葵花寶典、超級賽雅人)。</p><p>而我個人，更多喜歡討論的是俠者為何？直接引用金庸自己在小說序中提到的概念：</p><blockquote><p>『武功』只是用來解決問題的手段，特別是在過去朝代律法規範不健全之下，人們只能用『武功』來取得正義，或者利益。『武俠』小說要討論的核心，應該是人跟人之間的俠與義，更近一步的是人性。只是在說故事的時候，需要透過武功來陳述過程衝突，解決的手段，甚至誇大武功的力量（所以乾坤大挪移、降龍十八掌），藉此吸引讀者目光。</p></blockquote><p>同樣的概念，也可以套用在科幻小說上。藉由幻想的科學 (科幻)，探討『哲學』議題，包含生命、烏托邦 … 等。</p><p>回到架構師的職責，架構師要凝聚的是 <code>關係人 (Stakeholder)</code> 的 <code>共識 (Consensus)</code> ，讓團隊對於展品有整體 <code>一致性 (Consistency)</code> 的 <code>整體觀</code>。</p><blockquote><p>Consensus vs Consistency 的差異，參閱 “<a href="/2018/08/11/DistributedSystems/Distributed-Consistency-and-Consensus-Algorithm/">一致性問題與共識演算法</a>“ 有實際舉例說明其差異。</p></blockquote><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><h2 id="站內文章"><a href="#站內文章" class="headerlink" title="站內文章"></a>站內文章</h2><ul><li><a href="/2020/03/24/Management/Principles-of-Communication/">溝通的原理</a></li><li><a href="/2020/08/01/Management/Expression-and-Communication/">表達與溝通的差異</a></li><li><a href="/2014/11/26/Management/%E9%96%8B%E6%9C%83%E5%8E%9F%E5%89%87/">開會原則</a> 及 系列文</li><li><a href="/2021/12/19/Management/Protocol-to-Communication/">團隊溝通的通訊協議</a></li><li><a href="/2018/08/11/DistributedSystems/Distributed-Consistency-and-Consensus-Algorithm/">一致性問題與共識演算法</a></li><li><a href="/2022/10/15/Management/Problem-Behind-Question/">Problem Behind Question</a></li></ul><h2 id="Facebook-隨筆"><a href="#Facebook-隨筆" class="headerlink" title="Facebook 隨筆"></a>Facebook 隨筆</h2><ul><li>2022&#x2F;10&#x2F;07: <a href="https://www.facebook.com/completethink/posts/pfbid02kxY7WJLh6aWnpVNuSeK8z6WQm26kEVqPuzrcYKVyEjAFhPjwzF6pau1Y2uyKPx9rl">架構師的使命</a></li><li>2023&#x2F;05&#x2F;31: <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid026vWwDuNdFRrLheKbN9fDAYhumSJpuLfumxLwSgCUsBdQZam4w38YjYnkrRGHEHYVl">各種 XXX Architect</a></li><li>2022&#x2F;11&#x2F;10: <a href="/2017/12/29/About/About-Author/">Kim Kao 的架構師解釋</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;架構師的工作到底是做啥？用一張十年前 (2012) 我自己在 &lt;a href=&quot;https://www.plurk.com/p/hp91r2&quot;&gt;Plurk&lt;/a&gt; 寫下的定義，然後再真實經歷之後，重新回顧這段話。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/About/201211_as-Architect.jpg&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://www.plurk.com/p/hp91r2&quot;&gt;Plurk Permalink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇是我在粉專寫下的 &lt;a href=&quot;https://www.facebook.com/completethink/posts/pfbid02kxY7WJLh6aWnpVNuSeK8z6WQm26kEVqPuzrcYKVyEjAFhPjwzF6pau1Y2uyKPx9rl&quot;&gt;隨筆文&lt;/a&gt;，放在 blog 做個紀錄。&lt;/p&gt;</summary>
    
    
    
    <category term="About" scheme="https://rickhw.github.io/categories/About/"/>
    
    
    <category term="Career" scheme="https://rickhw.github.io/tags/Career/"/>
    
    <category term="Architect" scheme="https://rickhw.github.io/tags/Architect/"/>
    
  </entry>
  
  <entry>
    <title>蓋環境很難？是這樣的嗎？QA 需要自己蓋環境？</title>
    <link href="https://rickhw.github.io/2022/09/25/SQA/QA4QA-Provisioning-is-Difficult/"/>
    <id>https://rickhw.github.io/2022/09/25/SQA/QA4QA-Provisioning-is-Difficult/</id>
    <published>2022-09-25T03:08:00.000Z</published>
    <updated>2022-12-19T11:47:28.869Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2022/08/13/SQA/Path-to-Software-Testing/">上一次的分享</a> 之後，開始有 QA 的朋友找我聊很多他正在面對的問題。其中一個問題是：</p><blockquote><p>Backend 開發人員說建立環境很難？是這樣嗎？</p></blockquote><p>本文針對這個問題，整理背後可能的問題，以及實際可行的方法。全文整理自 <a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tC7UQ4JMVfUf7bXng3o4wM6FfTZc6HzzW1NujnZgZ6p8cRJznMHkBXWBmHZKXLjcl">09&#x2F;18 在 FB 寫的草稿</a>。</p><span id="more"></span><hr><h1 id="Backend-開發人員說建立環境很難？是這樣嗎？"><a href="#Backend-開發人員說建立環境很難？是這樣嗎？" class="headerlink" title="Backend 開發人員說建立環境很難？是這樣嗎？"></a>Backend 開發人員說建立環境很難？是這樣嗎？</h1><p>標題簡化了一些訊息，重現原本的提問：</p><blockquote><p>我是一個 QA，我曾經找 Backend 開發人員問，我想自己建環境測試，他們說很難，Config 很雜亂、DB Schema 很複雜、Infra 很複雜，真的是這樣？</p></blockquote><p>重新整理提問，整個問題是從 <a href="/2017/02/11/DevOps/Resource-Provisioning-and-DevOps/">蓋環境 (專有名詞 Provisioning)</a> 出發，對於測試人員來看，背後 <code>動機</code> 與 <code>目的</code> 有以下：</p><ol><li>因為執行測試過程會被自動觸發的 CI 部署打斷，希望不被干擾執行</li><li>想要透過了解環境，更確立問題的正確性</li><li>想要透過 Log 找問題，目前環境無法看到 Log</li><li>測試過程，想進去 DB 增加資料，查問題</li></ol><p>從開發人員的回覆，可以看出背後有以下問題：</p><ol><li>Config 很雜亂</li><li>DB Schema 很複雜</li><li>Infra 很複雜</li></ol><h2 id="1-現象：Config-很雜亂"><a href="#1-現象：Config-很雜亂" class="headerlink" title="1. 現象：Config 很雜亂"></a>1. 現象：Config 很雜亂</h2><p>Config 指的是應用程式在啟動階段透過外界指定的配置資訊，應該在 <code>系統設計 (System Design)</code> 過程就要確立的結構，這屬於 <code>Application Interface</code> 的範疇，也是 System Design 階段要確立的東西。</p><blockquote><p><code>Application Interface</code> 是我自己定義的名詞，用來描述一個應用程式的外顯介面。只要是使用者會接觸到的資訊，都屬於外顯介面，像是 Config &#x2F; Environment Variables &#x2F; Secret &#x2F; API &#x2F; Documentation … etc.</p></blockquote><p>常見的 Config 大概可以分成以下幾個部分：</p><ol><li>系統依賴：<ol><li>會有 connection string 的，包含 ip &#x2F; host、protocol、id &#x2F; password 、parameters 等。</li><li>服務自己的基礎設施，像是對 Database &#x2F; Cacche &#x2F; Queue .. 等依賴</li><li>公司內部與第三方系統的依賴：<ol><li>公司內部：像是依賴於內部的 簡訊服務、另一個服務的 API … 等。</li><li>第三方服務：像是依賴於 Google SSO、AWS S3 服務、Twillo 的簡訊服務、Paypal 的金流服務 … 等。</li></ol></li></ol></li><li>業務邏輯功能的初始與預設參數：<ol><li>通常是 Feature Toggle 以及其參數</li><li>每頁商品數量的預設數量</li><li>其他 … etc</li></ol></li><li>非功能的參數：<ol><li>Logging: Rotation 的規則、擋名規則、輸出模式 (File or Stdout) ..</li><li>DI 框架的參數，像是 Autowire 掃描的規則</li><li>框架的設定</li></ol></li></ol><p>這些依照實際案例，會有所差異，不過我個人大概是這樣分。</p><p>Config 需要有經驗的人、經過有設計的過程，持續精煉與重構。因為沒有這個循環，隨著時間的推進 (通常是 &gt;2y)，會越來越複雜，隨之而來的是管理複雜度。如果再加上多環境部署 (不管 Test or Prod)，管理問題就會浮上檯面。</p><blockquote><p>Config 的設計概念參閱 <a href="/2022/05/06/Coding/Designing-Configuration-Loading-Strategies/">Designing Configuration Loading Strategies</a></p></blockquote><h3 id="問題背後的問題-QBQ"><a href="#問題背後的問題-QBQ" class="headerlink" title="問題背後的問題 (QBQ)"></a>問題背後的問題 (QBQ)</h3><ol><li><code>開發過程沒有設計與管理</code>：在新需求開發過程中，Config 很常會因為新需求而增加，這時候沒有適度的設計與管理，時間久了，一定開花。<ol><li>不管用 K&#x2F;V 結構 (.properies) 或者 object (XML &#x2F; JSON &#x2F; YAML)，只要沒有配套的 <code>技術管理機制</code>，最後就是整串葡萄串大亂鬥</li><li>機制：透過統一個 ConfigLoader 限制，包含命名規則、資料結構驗證等</li><li>規範：要有設計與 Review 流程</li></ol></li><li><code>沒有持續收斂設計</code>：如果沒有適度的技術管理機制持續收斂，時間越久越亂是正常的<ol><li>各種亂象出現在 Config 裡，像是在一個 JSON element 裡面塞入一個 XML string</li><li>在一個 XML 的 attribute 裡塞入整個 JSON payload</li></ol></li><li><code>部署管理機制不踏實</code>：<ol><li>不管有沒設計或收斂，都需要面對管理問題，因為只要有部署的需求，部署的環境越多，就要有管理流程。</li><li>實際上 APP 的部署第一關應該是 QA 要把關，這概念在 “<a href="/2018/12/15/DevOps/TheProblem-In-DevOps-8-Cycle/">DevOps 8 字環的誤區：左環問題</a>“ 有深入說明。</li></ol></li></ol><p>理想 Config 實踐流程有以下的循環：</p><ol><li><code>設計優先 (Design First)</code>: 系統設計的時候，#TechLead 必須把關規格</li><li><code>持續迭代 (Continuous Iteration)</code>: 每次更版都要做適度的調整與迭代</li><li><code>管理政策 (Management Policy)</code>: 也就是每次的更版要遵守的規範，例如 Key 的 增刪改 各自需要應對的措施<ul><li>這些規範背後需要技術支撐，像是 Config Migration 機制與流程</li></ul></li></ol><h2 id="2-現象：DB-Schema-很複雜"><a href="#2-現象：DB-Schema-很複雜" class="headerlink" title="2. 現象：DB Schema 很複雜"></a>2. 現象：DB Schema 很複雜</h2><p>DB Schema 很複雜 (或者很亂)，其實背後本質是跟 Config 一樣的問題。</p><p>DB Schema (這裡指的是 Ralation DB, 不是 NoSQL) 一樣是要經過設計與收斂，透過迭代 <code>去蕪存菁</code>、<code>精煉</code>。資料結構的設計難的是在初期 <code>判斷</code> 與 <code>預測</code> <strong>判斷資料溫度在未來的變化性</strong>，因為很難一次到位，所以通常都要透過以下方法：</p><ol><li>設計階段 Tech Leader 需要把關 DDL 的設計</li><li>持續小部分的迭代與改進，調整資料溫度的配置，例如：<ol><li>原本判定是 <code>熱資料</code>，後期變成冷資料，那應該就要設計 Archive 機制，轉入 <code>OLAP</code></li><li>原本是以為是 <code>冷資料</code>，變成溫資料，那就要透過快取緩存改善</li><li>原本是以為是 <code>熱資料</code>，上線後發現根本沒有存取，所以要改成冷資料，或者一次快取。</li></ol></li><li>規劃每次更版 DDL &#x2F; DML Migration 機制與流程</li></ol><p>這些都是透過 <code>持續迭代</code> 改善出來的，會越來越亂，都是因為 <code>沒有持續迭代</code>、或者 <code>經驗不足</code> 與 <code>能力不夠</code> 造成的。經驗與能力我覺得找到適當的人就可以了，難的是專案管理過程中，沒有持續迭代，這也是普遍公司的問題。</p><p>看到這裡，不難發現， Config &#x2F; DB Schema 的處理與管理手段是一樣的。</p><h2 id="3-現象：Infra-很複雜"><a href="#3-現象：Infra-很複雜" class="headerlink" title="3. 現象：Infra 很複雜"></a>3. 現象：Infra 很複雜</h2><p>再來談談 Infra 的部分，其實也是一樣的。</p><p>通常一個應用程式起來，都會有相應的依賴，常見的有:</p><ol><li>Database (RDB &#x2F; NoSQL): MySQL &#x2F; PostgreSQL &#x2F; MongoDB &#x2F; DDB … etc</li><li>Cache: Redis &#x2F; Memcached</li><li>Queue: RabbitMQ &#x2F; SQS</li><li>Storage: File System &#x2F; Object Storage (S3, GCS)</li></ol><blockquote><p>上述的排序：Structure to Non-Structure</p></blockquote><p>這些東西，通常難的都不是建立 (Provisioning) 起來這件事情，因為這年代有 docker &#x2F; container 這個技術，通常只要 config 講清楚，不會太難。上面列的最難的大概只有 RDB (Relation Database)，因為他有 DDL 需要做 Migration，這個會稍微難一點。現在很多 ORM 都有對應的方法與策略，概念從 RoR (Ruby on Rails, 2008) 年代就有了，基本概念就是可以做到持續更迭 DDL。所以最難的沒了。</p><p>其他不管是 NoSQL &#x2F; Cache &#x2F; Queue &#x2F; Storage …. 都談不上難。</p><ul><li>NoSQL 本身就是沒有 DDL Migration 的問題，因為這東西本身就是 Non-Schema 的。</li><li>Cache 通常就是一些 Key &#x2F; Value 的操作，所以只要知道 Key 的定義與結構即可</li><li>Queue 是通道的概念，大部分只要把通道規則弄好就好，一次性的。</li><li>Storage 目錄結構，不管是 Object Storage or Block Storage，搞懂目錄結構即可。</li></ul><p>很多人想問，像那些 Replication &#x2F; HA &#x2F; Cluster 不是很難嗎？</p><p>這時候我會先分清楚目的性：<code>Functional Test</code> or <code>NonFunctional Test</code></p><p>如果前者，基本上，不用考慮這些是。如果是測後者，才需要考慮這些事情，看你自己的 R&amp;R。後者通常跟 <code>架構</code> 很有關係，因為 前述的 (HA, Cluster … ) 很多都跟 <a href="/2020/04/22/SoftwareEngineering/Reliability-Engineering/">Reliability</a> 有關係，可靠度本質就是工程 &#x2F; 架構 要面對的問題，這才是真正的難。</p><p>相關概念參閱以下的文章：</p><ul><li><a href="/2022/08/13/SQA/Path-to-Software-Testing/">演講：從理想、到現實的距離，開啟品味軟體測試之路</a></li><li><a href="/2017/03/18/SQA/Stages-In-Software-Testing/">淺談軟體測試的階段與策略</a></li><li><a href="/2022/09/18/SQA/Integration-Test-and-Execution-Strategy/">整合測試與執行策略</a></li><li><a href="https://rickhw.github.io/2018/03/18/SQA/Gossip-System-Testing/">輕鬆聊：系統測試 (SVT) 的三兩事</a></li><li><a href="/2020/04/22/SoftwareEngineering/Reliability-Engineering/">可靠性工程 (Reliability Engineering)</a></li></ul><p>除了這些，可能還有其他像是 Networking, Platform (K8s) 的依賴。</p><hr><h1 id="問題背後的問題-Problem-Behind-Question-PBQ"><a href="#問題背後的問題-Problem-Behind-Question-PBQ" class="headerlink" title="問題背後的問題 (Problem Behind Question, PBQ)"></a>問題背後的問題 (Problem Behind Question, PBQ)</h1><h2 id="很雜亂？很難？"><a href="#很雜亂？很難？" class="headerlink" title="很雜亂？很難？"></a>很雜亂？很難？</h2><p>上述的東西，都很雜，談不上難，但是時間只要越來越久，就會由雜變成難。更多參閱： “<a href="/2022/09/10/About/Difficult-and-Complicate/">問題的難與雜</a>“</p><p>只要有遵循前述的設計原則，持續迭代，給一台 Linux，足夠的 CPU &#x2F; Memory &#x2F; Disk，應該沒什麼做不到的。</p><p>去看看外面 Open Source ，我沒看過有哪個說一定要 K8s &#x2F; AWS &#x2F; GCP 才能安裝的？</p><p>我把問題歸類為：</p><ol><li>設計問題</li><li>能力問題</li><li>執行力</li></ol><p>對於 QA 而言，我自己親身經驗，裝軟體這件事情，只要上述條件具備，剩下的都是指日可待的問題。所以這問題，最後我的回答都是一樣的：</p><blockquote><p>如果你覺得很複雜，那表示不夠熟悉；如果覺得很難，那代表基本功不夠紮實；如果覺得很亂，那大多都是管理問題。</p></blockquote><!--RD 要會裝自己的環境就是基本功RD 自己都搞不定那 QA 就更遠了窮和尚富和尚# 議題：QA 需要自己蓋環境嗎？# 延續問題：如果公司開發團隊無法做到像你說的那樣，那我應該繼續待下去？--><h2 id="團隊的問題"><a href="#團隊的問題" class="headerlink" title="團隊的問題"></a>團隊的問題</h2><p>而蓋環境背後也可以看出整個開發團隊的問題：</p><ol><li>Backend 開發人員都覺得蓋環境難，表示不了解整體架構與對外依賴配置<ol><li>有很多依賴問題：<ol><li>例如強依賴於 Cloud Services，像是 AWS S3 &#x2F; Secret Management，卻沒有做適度的設計。</li><li>像是用了 EKS 的 IRSA，或者 AWS IAM Role，就以為一定要 AWS 應用程式才能跑，其實這些都是不了解運作原理，以及沒有適度設 Config 造成的。</li></ol></li><li>時間久了，導致連開發人員自己都蓋不起來，就連一些 Sr. Engineer 都搞不定。</li><li>沒有適度切割顆粒度，導致 Config 隨時間增長，複雜度過高。<ol><li>切割顆粒度背後代表著要重構，一個 Method 有一千行，通常就要拆分職責。</li></ol></li></ol></li><li>太過依賴於所謂的 <code>自動化</code>，而自動化的程式本身的品質堪憂，導致部署難度越來越高。<ol><li>只有寫自動化的人大概知道整個架構是怎麼一回事</li></ol></li><li>Config 的資訊只有開發人員知道，其他 (QA &#x2F; Ops) 都不知道</li><li>蓋環境這件事情，在團隊裡是一個天方夜譚的 #能力</li></ol><p>所以，得到結論：</p><blockquote><p>蓋環境這件事情不可能<br>需要動用很多團隊</p></blockquote><p>上述問題，在越有歷史、越有規模，但不注重軟體工程的公司，越容易發生。</p><blockquote><p>翻譯：很多 (九成九) 公司都有這樣的問題。</p></blockquote><h2 id="怎麼解？"><a href="#怎麼解？" class="headerlink" title="怎麼解？"></a>怎麼解？</h2><p>做好該做的基本功，只要想省略、或者用自動化掩蓋的念頭，時間越久會越雜。 OOP 之所以會出現，是因為 早期程式發展到複雜度而產生，而 OOP 背後的本質就是持續的分類與重構。</p><p>問題提到的 Config &#x2F; DB Schema &#x2F; Infra 其實都是要持續設計與改善的。不是只有自動化就天下太平，自動化只會粉飾太平。</p><p>公司已經 Run 一段時間 (&gt;3y) 了，怎麼辦？這時候只能請 <a href="/2019/09/13/DevOps/Scrum-for-SRE-Team/">扁鵲</a> 出場開刀了，不用懷疑，任何想要走捷徑的方法，最後一定死路一條。該開刀，就要開刀，沒有特效藥。</p><h2 id="QA-需要自己蓋環境嗎？"><a href="#QA-需要自己蓋環境嗎？" class="headerlink" title="QA 需要自己蓋環境嗎？"></a>QA 需要自己蓋環境嗎？</h2><p>QA 的職責之一是發現問題。</p><p>發現問題這個過程，背後代表要能證明 <code>症狀 (Symptom)</code> 真的是一個 <code>問題 (Problem)</code>。如果已經是問題了，那麼一定能夠提供完整的重現步驟 (Reproducable)，有相關的證據，像是 Log、Config、Data …. 等。這個過程本身是非常講究科學方法的，</p><p>當掌握環境建置的時候，上述的過程才能夠有效地掌握，也才能找出有意義的 Defect。</p><p>對我來講，蓋環境，是 QA 的第一個條件，這段在 “<a href="/2015/10/11/SQA/How-To-Be-An-SQA/">Software QA 的職能條件</a>“ 的技能段落排第一位。</p><hr><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ul><li><a href="/2022/08/13/SQA/Path-to-Software-Testing/">演講：從理想、到現實的距離，開啟品味軟體測試之路</a></li><li><a href="/2022/09/05/About/Blog-Practice/">聊聊寫 Blog 的想法</a></li><li><a href="/2022/05/06/Coding/Designing-Configuration-Loading-Strategies/">Designing Configuration Loading Strategies</a></li><li><a href="/2022/09/10/About/Difficult-and-Complicate/">問題的難與雜</a></li><li><a href="/2018/12/15/DevOps/TheProblem-In-DevOps-8-Cycle/">DevOps 8 字環的誤區：左環問題</a></li><li><a href="/2017/02/11/DevOps/Resource-Provisioning-and-DevOps/">Resource Provisioning and DevOps</a></li><li><a href="/2018/03/18/SQA/How-To-Report-A-Defect-or-Bug/">如何有效的回報問題 (How to Report Problems Effectively)</a></li><li><a href="/2018/04/01/DevOps/How-To-Make-CICD-Quality/">怎樣的 CI&#x2F;CD 才夠 Quality?</a></li><li><a href="/2020/04/22/SoftwareEngineering/Reliability-Engineering/">可靠性工程 (Reliability Engineering)</a></li><li><a href="/2015/10/11/SQA/How-To-Be-An-SQA/">Software QA 的職能條件</a></li></ul><h2 id="Facebook-隨筆"><a href="#Facebook-隨筆" class="headerlink" title="Facebook 隨筆"></a>Facebook 隨筆</h2><ul><li><a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0tC7UQ4JMVfUf7bXng3o4wM6FfTZc6HzzW1NujnZgZ6p8cRJznMHkBXWBmHZKXLjcl">Backend 開發人員說建立環境很難？是這樣嗎？</a></li><li><a href="https://www.facebook.com/completethink/posts/pfbid09UTWvYbHLnKKixJyWiinmXQGCc7tuTkuoZ9Gna7W8KPzZxSp7vQL6jkhdaZVRthXl">軟體工程師需要會蓋環境？</a></li><li><a href="https://www.facebook.com/rick.kyhwang/posts/pfbid024b4F5Q9xngNAV6NsqGi7wMZs4WVQPpohjCmGkomcGGCAYqirYeEjV2hDhW8LE2Eql">Container vs VM</a></li><li><a href="https://www.facebook.com/rick.kyhwang/posts/pfbid0he6RNijEgMFY4pUcfWcUbJqRqZMmqw9pzHfCtw6gWQoG12b9YhZhZ2smMgJKEB7Jl">難與雜</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/2022/08/13/SQA/Path-to-Software-Testing/&quot;&gt;上一次的分享&lt;/a&gt; 之後，開始有 QA 的朋友找我聊很多他正在面對的問題。其中一個問題是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Backend 開發人員說建立環境很難？是這樣嗎？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文針對這個問題，整理背後可能的問題，以及實際可行的方法。全文整理自 &lt;a href=&quot;https://www.facebook.com/rick.kyhwang/posts/pfbid0tC7UQ4JMVfUf7bXng3o4wM6FfTZc6HzzW1NujnZgZ6p8cRJznMHkBXWBmHZKXLjcl&quot;&gt;09&amp;#x2F;18 在 FB 寫的草稿&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="軟體測試" scheme="https://rickhw.github.io/categories/%E8%BB%9F%E9%AB%94%E6%B8%AC%E8%A9%A6/"/>
    
    
    <category term="Software Test" scheme="https://rickhw.github.io/tags/Software-Test/"/>
    
    <category term="Software Quality Assurance" scheme="https://rickhw.github.io/tags/Software-Quality-Assurance/"/>
    
  </entry>
  
</feed>
